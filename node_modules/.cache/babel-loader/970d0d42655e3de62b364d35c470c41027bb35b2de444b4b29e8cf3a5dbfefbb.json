{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { fetchWinnersListPage, fetchNewWinner, fetchUpdateWinner, fetchDeleteWinner, fetchCarData } from 'CONSTANTS/Axios';\nimport { openWinnerPopup, setRace } from './garageListReducer';\nconst initialState = {\n  winnersList: [],\n  winner: undefined,\n  loading: false,\n  count: 0\n};\nconst newWinner = createAsyncThunk('winnersList/newWinner', async (carData, {\n  rejectWithValue,\n  dispatch\n}) => {\n  const response = await fetchNewWinner(carData);\n  if (response.isFailed) return rejectWithValue({\n    isFailed: true\n  });\n  dispatch(setRace('finished'));\n  dispatch(openWinnerPopup());\n  return response;\n});\nconst updateWinner = createAsyncThunk('winnersList/updateWinner', async (carData, {\n  rejectWithValue\n}) => {\n  const response = await fetchUpdateWinner(carData);\n  if (response.isFailed) return rejectWithValue({\n    isFailed: true\n  });\n  return response;\n});\nconst deleteWinner = createAsyncThunk('winnersList/deleteWinner', async (id, {\n  rejectWithValue\n}) => {\n  const response = await fetchDeleteWinner(id);\n  if (response.isFailed) return rejectWithValue({\n    isFailed: true\n  });\n  return response;\n});\nconst getWinnersListPage = createAsyncThunk('winnersList/getWinnersListPage', async (pageNo, {\n  rejectWithValue,\n  getState\n}) => {\n  const response = await fetchWinnersListPage(pageNo);\n  if (response.isFailed) {\n    var _response$errors;\n    return rejectWithValue({\n      isFailed: true,\n      errorMessage: (response === null || response === void 0 ? void 0 : (_response$errors = response.errors) === null || _response$errors === void 0 ? void 0 : _response$errors.message) || 'Failed to fetch winners'\n    });\n  }\n  const {\n    garageList\n  } = getState().garageList;\n  const data = await Promise.all(response.data.map(async winner => {\n    const car = garageList.find(c => c.id === winner.id);\n    if (car) {\n      return {\n        ...winner,\n        name: car.name,\n        color: car.color\n      };\n    }\n    const fetchedCar = await fetchCarData(winner.id).then(response => response[0]);\n    return {\n      ...winner,\n      name: (fetchedCar === null || fetchedCar === void 0 ? void 0 : fetchedCar.name) || '',\n      color: (fetchedCar === null || fetchedCar === void 0 ? void 0 : fetchedCar.color) || '#ccc'\n    };\n  }));\n  return {\n    data,\n    headers: response.headers\n  };\n});\nconst winnersListReducer = createSlice({\n  name: 'winnersList',\n  initialState,\n  reducers: {\n    setWinnersList(state, {\n      payload\n    }) {\n      state.winnersList = payload;\n    },\n    setWinner(state, {\n      payload\n    }) {\n      state.winner = payload;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(newWinner.pending, (state, {\n      meta\n    }) => {\n      state.winner = meta.arg;\n    }).addCase(newWinner.fulfilled, (state, {\n      meta\n    }) => {\n      state.winnersList.push({\n        id: meta.arg.id,\n        time: meta.arg.time,\n        wins: 1,\n        name: meta.arg.name || 'car',\n        color: meta.arg.color || '#ccc'\n      });\n      state.count += 1;\n    }).addCase(updateWinner.fulfilled, (state, {\n      meta\n    }) => {\n      state.winnersList = state.winnersList.map(winner => winner.id === meta.arg.id ? {\n        ...winner,\n        ...meta.arg\n      } : winner);\n      state.winner = meta.arg;\n    }).addCase(deleteWinner.fulfilled, (state, {\n      meta\n    }) => {\n      state.winnersList = state.winnersList.filter(winner => winner.id !== meta.arg);\n      state.count -= 1;\n    }).addCase(getWinnersListPage.pending, state => {\n      state.loading = true;\n    }).addCase(getWinnersListPage.fulfilled, (state, {\n      payload\n    }) => {\n      const list = [...state.winnersList, ...payload.data].sort((carOne, carSecond) => carOne.id - carSecond.id);\n      state.winnersList = Array.from(new Map(list.map(item => [item.id, item])).values());\n      state.count = Number(payload.headers['x-total-count']);\n      state.loading = false;\n    }).addCase(getWinnersListPage.rejected, state => {\n      state.loading = false;\n    });\n  }\n});\nexport const {\n  setWinnersList,\n  setWinner\n} = winnersListReducer.actions;\nexport { updateWinner, getWinnersListPage, deleteWinner, newWinner };\nexport default winnersListReducer.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","fetchWinnersListPage","fetchNewWinner","fetchUpdateWinner","fetchDeleteWinner","fetchCarData","openWinnerPopup","setRace","initialState","winnersList","winner","undefined","loading","count","newWinner","carData","rejectWithValue","dispatch","response","isFailed","updateWinner","deleteWinner","id","getWinnersListPage","pageNo","getState","_response$errors","errorMessage","errors","message","garageList","data","Promise","all","map","car","find","c","name","color","fetchedCar","then","headers","winnersListReducer","reducers","setWinnersList","state","payload","setWinner","extraReducers","builder","addCase","pending","meta","arg","fulfilled","push","time","wins","filter","list","sort","carOne","carSecond","Array","from","Map","item","values","Number","rejected","actions","reducer"],"sources":["C:/Users/Admin/Documents/GitHub/Async-Race/src/store/modules/winnersListReducer.ts"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { fetchWinnersListPage, fetchNewWinner, fetchUpdateWinner, fetchDeleteWinner, fetchCarData } from 'CONSTANTS/Axios';\nimport type { RootState } from 'store/configureReduxStore';\nimport { Car, openWinnerPopup, setRace } from './garageListReducer';\n\nexport interface Winner {\n   id: number;\n   wins: number;\n   time: number;\n   name: string;\n   color: string;\n}\n\ninterface WinnersState {\n   winnersList: Winner[];\n   winner?: Partial<Winner>;\n   loading: boolean;\n   count: number;\n}\n\nconst initialState: WinnersState = {\n   winnersList: [],\n   winner: undefined,\n   loading: false,\n   count: 0,\n};\n\nconst newWinner = createAsyncThunk<Winner, Partial<Winner>, { state: RootState; rejectValue: { isFailed: boolean } }>(\n   'winnersList/newWinner',\n   async (carData, { rejectWithValue, dispatch }) => {\n      const response = await fetchNewWinner(carData);\n      if (response.isFailed) return rejectWithValue({ isFailed: true });\n      dispatch(setRace('finished'));\n      dispatch(openWinnerPopup());\n\n      return response;\n   }\n);\n\nconst updateWinner = createAsyncThunk<Winner, Winner, { state: RootState; rejectValue: { isFailed: boolean } }>(\n   'winnersList/updateWinner',\n   async (carData, { rejectWithValue }) => {\n      const response = await fetchUpdateWinner(carData);\n      if (response.isFailed) return rejectWithValue({ isFailed: true });\n\n      return response;\n   }\n);\n\nconst deleteWinner = createAsyncThunk<number, number, { state: RootState; rejectValue: { isFailed: boolean } }>(\n   'winnersList/deleteWinner',\n   async (id, { rejectWithValue }) => {\n      const response = await fetchDeleteWinner(id);\n      if (response.isFailed) return rejectWithValue({ isFailed: true });\n\n      return response;\n   }\n);\n\nconst getWinnersListPage = createAsyncThunk<any, number, { state: RootState; rejectValue: { isFailed: boolean; errorMessage: string } }>(\n   'winnersList/getWinnersListPage',\n   async (pageNo, { rejectWithValue, getState }) => {\n      const response = await fetchWinnersListPage(pageNo);\n\n      if (response.isFailed) {\n         return rejectWithValue({\n            isFailed: true,\n            errorMessage: response?.errors?.message || 'Failed to fetch winners',\n         });\n      }\n      const { garageList } = getState().garageList;\n      const data = await Promise.all(\n         response.data.map(async (winner: Winner) => {\n            const car = garageList.find((c: Car) => c.id === winner.id);\n            if (car) {\n               return { ...winner, name: car.name, color: car.color };\n            }\n\n            const fetchedCar = await fetchCarData(winner.id).then((response) => response[0]);\n\n            return {\n               ...winner,\n               name: fetchedCar?.name || '',\n               color: fetchedCar?.color || '#ccc',\n            };\n         })\n      );\n\n      return {\n         data,\n         headers: response.headers,\n      };\n   }\n);\n\nconst winnersListReducer = createSlice({\n   name: 'winnersList',\n   initialState,\n   reducers: {\n      setWinnersList(state, { payload }) {\n         state.winnersList = payload;\n      },\n      setWinner(state, { payload }) {\n         state.winner = payload;\n      },\n   },\n   extraReducers: (builder) => {\n      builder\n         .addCase(newWinner.pending, (state, { meta }) => {\n            state.winner = meta.arg;\n         })\n         .addCase(newWinner.fulfilled, (state, { meta }) => {\n            state.winnersList.push({\n               id: meta.arg.id!,\n               time: meta.arg.time!,\n               wins: 1,\n               name: meta.arg.name || 'car',\n               color: meta.arg.color || '#ccc',\n            });\n            state.count += 1;\n         })\n         .addCase(updateWinner.fulfilled, (state, { meta }) => {\n            state.winnersList = state.winnersList.map((winner) => (winner.id === meta.arg.id ? { ...winner, ...meta.arg } : winner));\n            state.winner = meta.arg;\n         })\n         .addCase(deleteWinner.fulfilled, (state, { meta }) => {\n            state.winnersList = state.winnersList.filter((winner) => winner.id !== meta.arg);\n            state.count -= 1;\n         })\n         .addCase(getWinnersListPage.pending, (state) => {\n            state.loading = true;\n         })\n         .addCase(getWinnersListPage.fulfilled, (state, { payload }) => {\n            const list = [...state.winnersList, ...payload.data].sort((carOne, carSecond) => carOne.id - carSecond.id);\n            state.winnersList = Array.from(new Map(list.map((item) => [item.id, item])).values());\n            state.count = Number(payload.headers['x-total-count']);\n            state.loading = false;\n         })\n         .addCase(getWinnersListPage.rejected, (state) => {\n            state.loading = false;\n         });\n   },\n});\n\nexport const { setWinnersList, setWinner } = winnersListReducer.actions;\nexport { updateWinner, getWinnersListPage, deleteWinner, newWinner };\nexport default winnersListReducer.reducer;\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAChE,SAASC,oBAAoB,EAAEC,cAAc,EAAEC,iBAAiB,EAAEC,iBAAiB,EAAEC,YAAY,QAAQ,iBAAiB;AAE1H,SAAcC,eAAe,EAAEC,OAAO,QAAQ,qBAAqB;AAiBnE,MAAMC,YAA0B,GAAG;EAChCC,WAAW,EAAE,EAAE;EACfC,MAAM,EAAEC,SAAS;EACjBC,OAAO,EAAE,KAAK;EACdC,KAAK,EAAE;AACV,CAAC;AAED,MAAMC,SAAS,GAAGd,gBAAgB,CAC/B,uBAAuB,EACvB,OAAOe,OAAO,EAAE;EAAEC,eAAe;EAAEC;AAAS,CAAC,KAAK;EAC/C,MAAMC,QAAQ,GAAG,MAAMhB,cAAc,CAACa,OAAO,CAAC;EAC9C,IAAIG,QAAQ,CAACC,QAAQ,EAAE,OAAOH,eAAe,CAAC;IAAEG,QAAQ,EAAE;EAAK,CAAC,CAAC;EACjEF,QAAQ,CAACV,OAAO,CAAC,UAAU,CAAC,CAAC;EAC7BU,QAAQ,CAACX,eAAe,CAAC,CAAC,CAAC;EAE3B,OAAOY,QAAQ;AAClB,CACH,CAAC;AAED,MAAME,YAAY,GAAGpB,gBAAgB,CAClC,0BAA0B,EAC1B,OAAOe,OAAO,EAAE;EAAEC;AAAgB,CAAC,KAAK;EACrC,MAAME,QAAQ,GAAG,MAAMf,iBAAiB,CAACY,OAAO,CAAC;EACjD,IAAIG,QAAQ,CAACC,QAAQ,EAAE,OAAOH,eAAe,CAAC;IAAEG,QAAQ,EAAE;EAAK,CAAC,CAAC;EAEjE,OAAOD,QAAQ;AAClB,CACH,CAAC;AAED,MAAMG,YAAY,GAAGrB,gBAAgB,CAClC,0BAA0B,EAC1B,OAAOsB,EAAE,EAAE;EAAEN;AAAgB,CAAC,KAAK;EAChC,MAAME,QAAQ,GAAG,MAAMd,iBAAiB,CAACkB,EAAE,CAAC;EAC5C,IAAIJ,QAAQ,CAACC,QAAQ,EAAE,OAAOH,eAAe,CAAC;IAAEG,QAAQ,EAAE;EAAK,CAAC,CAAC;EAEjE,OAAOD,QAAQ;AAClB,CACH,CAAC;AAED,MAAMK,kBAAkB,GAAGvB,gBAAgB,CACxC,gCAAgC,EAChC,OAAOwB,MAAM,EAAE;EAAER,eAAe;EAAES;AAAS,CAAC,KAAK;EAC9C,MAAMP,QAAQ,GAAG,MAAMjB,oBAAoB,CAACuB,MAAM,CAAC;EAEnD,IAAIN,QAAQ,CAACC,QAAQ,EAAE;IAAA,IAAAO,gBAAA;IACpB,OAAOV,eAAe,CAAC;MACpBG,QAAQ,EAAE,IAAI;MACdQ,YAAY,EAAE,CAAAT,QAAQ,aAARA,QAAQ,wBAAAQ,gBAAA,GAARR,QAAQ,CAAEU,MAAM,cAAAF,gBAAA,uBAAhBA,gBAAA,CAAkBG,OAAO,KAAI;IAC9C,CAAC,CAAC;EACL;EACA,MAAM;IAAEC;EAAW,CAAC,GAAGL,QAAQ,CAAC,CAAC,CAACK,UAAU;EAC5C,MAAMC,IAAI,GAAG,MAAMC,OAAO,CAACC,GAAG,CAC3Bf,QAAQ,CAACa,IAAI,CAACG,GAAG,CAAC,MAAOxB,MAAc,IAAK;IACzC,MAAMyB,GAAG,GAAGL,UAAU,CAACM,IAAI,CAAEC,CAAM,IAAKA,CAAC,CAACf,EAAE,KAAKZ,MAAM,CAACY,EAAE,CAAC;IAC3D,IAAIa,GAAG,EAAE;MACN,OAAO;QAAE,GAAGzB,MAAM;QAAE4B,IAAI,EAAEH,GAAG,CAACG,IAAI;QAAEC,KAAK,EAAEJ,GAAG,CAACI;MAAM,CAAC;IACzD;IAEA,MAAMC,UAAU,GAAG,MAAMnC,YAAY,CAACK,MAAM,CAACY,EAAE,CAAC,CAACmB,IAAI,CAAEvB,QAAQ,IAAKA,QAAQ,CAAC,CAAC,CAAC,CAAC;IAEhF,OAAO;MACJ,GAAGR,MAAM;MACT4B,IAAI,EAAE,CAAAE,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAEF,IAAI,KAAI,EAAE;MAC5BC,KAAK,EAAE,CAAAC,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAED,KAAK,KAAI;IAC/B,CAAC;EACJ,CAAC,CACJ,CAAC;EAED,OAAO;IACJR,IAAI;IACJW,OAAO,EAAExB,QAAQ,CAACwB;EACrB,CAAC;AACJ,CACH,CAAC;AAED,MAAMC,kBAAkB,GAAG5C,WAAW,CAAC;EACpCuC,IAAI,EAAE,aAAa;EACnB9B,YAAY;EACZoC,QAAQ,EAAE;IACPC,cAAcA,CAACC,KAAK,EAAE;MAAEC;IAAQ,CAAC,EAAE;MAChCD,KAAK,CAACrC,WAAW,GAAGsC,OAAO;IAC9B,CAAC;IACDC,SAASA,CAACF,KAAK,EAAE;MAAEC;IAAQ,CAAC,EAAE;MAC3BD,KAAK,CAACpC,MAAM,GAAGqC,OAAO;IACzB;EACH,CAAC;EACDE,aAAa,EAAGC,OAAO,IAAK;IACzBA,OAAO,CACHC,OAAO,CAACrC,SAAS,CAACsC,OAAO,EAAE,CAACN,KAAK,EAAE;MAAEO;IAAK,CAAC,KAAK;MAC9CP,KAAK,CAACpC,MAAM,GAAG2C,IAAI,CAACC,GAAG;IAC1B,CAAC,CAAC,CACDH,OAAO,CAACrC,SAAS,CAACyC,SAAS,EAAE,CAACT,KAAK,EAAE;MAAEO;IAAK,CAAC,KAAK;MAChDP,KAAK,CAACrC,WAAW,CAAC+C,IAAI,CAAC;QACpBlC,EAAE,EAAE+B,IAAI,CAACC,GAAG,CAAChC,EAAG;QAChBmC,IAAI,EAAEJ,IAAI,CAACC,GAAG,CAACG,IAAK;QACpBC,IAAI,EAAE,CAAC;QACPpB,IAAI,EAAEe,IAAI,CAACC,GAAG,CAAChB,IAAI,IAAI,KAAK;QAC5BC,KAAK,EAAEc,IAAI,CAACC,GAAG,CAACf,KAAK,IAAI;MAC5B,CAAC,CAAC;MACFO,KAAK,CAACjC,KAAK,IAAI,CAAC;IACnB,CAAC,CAAC,CACDsC,OAAO,CAAC/B,YAAY,CAACmC,SAAS,EAAE,CAACT,KAAK,EAAE;MAAEO;IAAK,CAAC,KAAK;MACnDP,KAAK,CAACrC,WAAW,GAAGqC,KAAK,CAACrC,WAAW,CAACyB,GAAG,CAAExB,MAAM,IAAMA,MAAM,CAACY,EAAE,KAAK+B,IAAI,CAACC,GAAG,CAAChC,EAAE,GAAG;QAAE,GAAGZ,MAAM;QAAE,GAAG2C,IAAI,CAACC;MAAI,CAAC,GAAG5C,MAAO,CAAC;MACxHoC,KAAK,CAACpC,MAAM,GAAG2C,IAAI,CAACC,GAAG;IAC1B,CAAC,CAAC,CACDH,OAAO,CAAC9B,YAAY,CAACkC,SAAS,EAAE,CAACT,KAAK,EAAE;MAAEO;IAAK,CAAC,KAAK;MACnDP,KAAK,CAACrC,WAAW,GAAGqC,KAAK,CAACrC,WAAW,CAACkD,MAAM,CAAEjD,MAAM,IAAKA,MAAM,CAACY,EAAE,KAAK+B,IAAI,CAACC,GAAG,CAAC;MAChFR,KAAK,CAACjC,KAAK,IAAI,CAAC;IACnB,CAAC,CAAC,CACDsC,OAAO,CAAC5B,kBAAkB,CAAC6B,OAAO,EAAGN,KAAK,IAAK;MAC7CA,KAAK,CAAClC,OAAO,GAAG,IAAI;IACvB,CAAC,CAAC,CACDuC,OAAO,CAAC5B,kBAAkB,CAACgC,SAAS,EAAE,CAACT,KAAK,EAAE;MAAEC;IAAQ,CAAC,KAAK;MAC5D,MAAMa,IAAI,GAAG,CAAC,GAAGd,KAAK,CAACrC,WAAW,EAAE,GAAGsC,OAAO,CAAChB,IAAI,CAAC,CAAC8B,IAAI,CAAC,CAACC,MAAM,EAAEC,SAAS,KAAKD,MAAM,CAACxC,EAAE,GAAGyC,SAAS,CAACzC,EAAE,CAAC;MAC1GwB,KAAK,CAACrC,WAAW,GAAGuD,KAAK,CAACC,IAAI,CAAC,IAAIC,GAAG,CAACN,IAAI,CAAC1B,GAAG,CAAEiC,IAAI,IAAK,CAACA,IAAI,CAAC7C,EAAE,EAAE6C,IAAI,CAAC,CAAC,CAAC,CAACC,MAAM,CAAC,CAAC,CAAC;MACrFtB,KAAK,CAACjC,KAAK,GAAGwD,MAAM,CAACtB,OAAO,CAACL,OAAO,CAAC,eAAe,CAAC,CAAC;MACtDI,KAAK,CAAClC,OAAO,GAAG,KAAK;IACxB,CAAC,CAAC,CACDuC,OAAO,CAAC5B,kBAAkB,CAAC+C,QAAQ,EAAGxB,KAAK,IAAK;MAC9CA,KAAK,CAAClC,OAAO,GAAG,KAAK;IACxB,CAAC,CAAC;EACR;AACH,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEiC,cAAc;EAAEG;AAAU,CAAC,GAAGL,kBAAkB,CAAC4B,OAAO;AACvE,SAASnD,YAAY,EAAEG,kBAAkB,EAAEF,YAAY,EAAEP,SAAS;AAClE,eAAe6B,kBAAkB,CAAC6B,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}