{"ast":null,"code":"import axios from 'axios';\nconst API_BASE = 'http://localhost:3000';\nconst URLS = {\n  garage: `${API_BASE}/garage`,\n  winners: `${API_BASE}/winners`,\n  engine: `${API_BASE}/engine`\n};\nconst ajax = async (url, {\n  method = 'get',\n  headers = {},\n  data = {}\n}) => {\n  try {\n    const response = await axios({\n      url,\n      method,\n      data,\n      headers\n    });\n    return response.data;\n  } catch (axiosError) {\n    var _axiosError$response, _axiosError$response$, _axiosError$response2, _axiosError$response3;\n    console.error('AJAX Error:', axiosError);\n    return {\n      isFailed: true,\n      errors: {\n        message: (axiosError === null || axiosError === void 0 ? void 0 : (_axiosError$response = axiosError.response) === null || _axiosError$response === void 0 ? void 0 : (_axiosError$response$ = _axiosError$response.data) === null || _axiosError$response$ === void 0 ? void 0 : _axiosError$response$.message) || axiosError.message || 'Unknown Error',\n        list: axiosError !== null && axiosError !== void 0 && (_axiosError$response2 = axiosError.response) !== null && _axiosError$response2 !== void 0 && (_axiosError$response3 = _axiosError$response2.data) !== null && _axiosError$response3 !== void 0 && _axiosError$response3.errors ? {\n          ...axiosError.response.data.errors\n        } : null\n      }\n    };\n  }\n};\nconst fetchGarageList = async () => {\n  const data = await ajax(URLS.garage, {\n    method: 'GET',\n    headers: {},\n    data: {}\n  });\n  return data;\n};\nconst fetchWinnersList = async () => {\n  const data = await ajax(URLS.winners, {\n    method: 'GET',\n    headers: {},\n    data: {}\n  });\n  return data;\n};\nconst fetchNewCar = async carData => {\n  const data = await ajax(URLS.garage, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    data: {\n      ...carData\n    }\n  });\n  return data;\n};\nconst fetchDeleteCar = async id => {\n  const data = await ajax(`${URLS.garage}/${id}`, {\n    method: 'DELETE',\n    headers: {},\n    data: {}\n  });\n  return data;\n};\nconst fetchUpdateCar = async carData => {\n  const data = await ajax(`${URLS.garage}/${carData.id}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    data: {\n      ...carData\n    }\n  });\n  return data;\n};\nconst fetchCarDrive = async (id, status) => {\n  const queryParams = new URLSearchParams({\n    id,\n    status\n  });\n  const data = await ajax(`${URLS.engine}?${queryParams.toString()}`, {\n    method: 'PATCH',\n    headers: {},\n    data: {}\n  });\n  return data;\n};\nconst fetchNewWinner = async carData => {\n  const data = await ajax(URLS.winners, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    data: {\n      id: carData.id,\n      wins: 1,\n      time: carData.time\n    }\n  });\n  return data;\n};\nconst fetchDeleteWinner = async id => {\n  const data = await ajax(`${URLS.winners}/:${id}`, {\n    method: 'DELETE',\n    headers: {},\n    data: {}\n  });\n  return data;\n};\nconst fetchUpdateWinner = async carData => {\n  const data = await ajax(`${URLS.winners}/:${carData.id}`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    data: {\n      wins: carData.wins + 1,\n      time: carData.time\n    }\n  });\n  return data;\n};\nexport { fetchDeleteWinner, fetchGarageList, fetchWinnersList, fetchUpdateCar, fetchDeleteCar, fetchNewCar, fetchCarDrive, fetchNewWinner, fetchUpdateWinner };\nexport default ajax;","map":{"version":3,"names":["axios","API_BASE","URLS","garage","winners","engine","ajax","url","method","headers","data","response","axiosError","_axiosError$response","_axiosError$response$","_axiosError$response2","_axiosError$response3","console","error","isFailed","errors","message","list","fetchGarageList","fetchWinnersList","fetchNewCar","carData","fetchDeleteCar","id","fetchUpdateCar","fetchCarDrive","status","queryParams","URLSearchParams","toString","fetchNewWinner","wins","time","fetchDeleteWinner","fetchUpdateWinner"],"sources":["C:/Users/Admin/Documents/GitHub/Async-Race/src/CONSTANTS/Axios.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_BASE = 'http://localhost:3000';\r\nconst URLS = {\r\n   garage: `${API_BASE}/garage`,\r\n   winners: `${API_BASE}/winners`,\r\n   engine: `${API_BASE}/engine`,\r\n};\r\n\r\nconst ajax = async ( url, { method = 'get', headers = {}, data = {} } ) => {\r\n   try {\r\n      const response = await axios({\r\n         url,\r\n         method,\r\n         data,\r\n         headers,\r\n      });\r\n      return response.data;\r\n   } catch ( axiosError ) {\r\n      console.error('AJAX Error:', axiosError );\r\n      return {\r\n         isFailed: true,\r\n         errors: {\r\n            message: axiosError?.response?.data?.message || axiosError.message || 'Unknown Error',\r\n            list: axiosError?.response?.data?.errors ? { ...axiosError.response.data.errors } : null,\r\n         },\r\n      };\r\n   }\r\n};\r\n\r\nconst fetchGarageList = async() => {\r\n   const data = await ajax( URLS.garage, {\r\n      method: 'GET',\r\n      headers: { },\r\n      data: { }\r\n   } );\r\n\r\n   return data;\r\n};\r\n\r\nconst fetchWinnersList = async() => {\r\n   const data = await ajax( URLS.winners, {\r\n      method: 'GET',\r\n      headers: { },\r\n      data: { }\r\n   } );\r\n\r\n   return data;\r\n};\r\n\r\nconst fetchNewCar = async( carData ) => {\r\n   const data = await ajax( URLS.garage, {\r\n      method: 'POST',\r\n      headers: { \r\n         'Content-Type': 'application/json',\r\n      },\r\n      data: { ...carData }\r\n   } );\r\n\r\n   return data;\r\n};\r\n\r\nconst fetchDeleteCar = async( id ) => {\r\n   const data = await ajax( `${ URLS.garage }/${ id }`, {\r\n      method: 'DELETE',\r\n      headers: { },\r\n      data: { }\r\n   } );\r\n\r\n   return data;\r\n};\r\n\r\nconst fetchUpdateCar = async( carData ) => {\r\n   const data = await ajax( `${ URLS.garage }/${ carData.id }`, {\r\n      method: 'PUT',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      data: { ...carData }\r\n   } );\r\n\r\n   return data;\r\n};\r\n\r\nconst fetchCarDrive = async( id, status ) => {\r\n   const queryParams = new URLSearchParams({ id, status });\r\n   const data = await ajax( `${ URLS.engine }?${ queryParams.toString() }`, {\r\n      method: 'PATCH',\r\n      headers: { },\r\n      data: { }\r\n   } );\r\n\r\n   return data;\r\n}\r\n\r\nconst fetchNewWinner = async( carData ) => {\r\n   const data = await ajax( URLS.winners, {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      data: { \r\n         id: carData.id,\r\n         wins: 1,\r\n         time: carData.time,\r\n      }\r\n   } );\r\n\r\n   return data;\r\n}\r\n\r\nconst fetchDeleteWinner = async( id ) => {\r\n   const data = await ajax( `${ URLS.winners }/:${ id }`, {\r\n      method: 'DELETE',\r\n      headers: { },\r\n      data: { }\r\n   } );\r\n\r\n   return data;\r\n}\r\n\r\nconst fetchUpdateWinner = async( carData ) => {\r\n   const data = await ajax( `${ URLS.winners }/:${ carData.id }`, {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      data: { \r\n         wins: carData.wins + 1,\r\n         time: carData.time,\r\n      }\r\n   } );\r\n\r\n   return data;\r\n}\r\n\r\nexport {\r\n   fetchDeleteWinner,\r\n   fetchGarageList,\r\n   fetchWinnersList,\r\n   fetchUpdateCar,\r\n   fetchDeleteCar,\r\n   fetchNewCar,\r\n   fetchCarDrive,\r\n   fetchNewWinner,\r\n   fetchUpdateWinner,\r\n};\r\nexport default ajax;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}