{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { useAppDispatch, useAppSelector } from 'store/hooks/hooks';\nimport { handleGarageRaceStatusesHistory } from 'Storages/SessionStorage';\nimport { fetchCarEngineMode, fetchCarDrive } from 'CONSTANTS/Axios';\nimport { deleteCar, newWinner, setSelectedCar, updateWinner } from 'store/modules/listReducer';\nimport styles from './GarageTableRow.module.scss';\nconst getAnimationStyle = (raceStatus, time) => ({\n  animationName: styles.moveToEnd,\n  animationDuration: `${time}s`,\n  animationTimingFunction: 'linear',\n  animationDelay: '4.2s',\n  animationFillMode: 'forwards',\n  animationPlayState: raceStatus === 'brokenEngine' ? 'paused' : 'running'\n});\nfunction UseGarageTableRow(carData) {\n  _s();\n  const dispatch = useAppDispatch();\n  const {\n    id\n  } = carData;\n  const {\n    selectedCar,\n    race,\n    winner,\n    winnersList\n  } = useAppSelector(store => store.list);\n  const [time, setTime] = useState(0);\n  const [raceStatus, setRaceStatus] = useState(handleGarageRaceStatusesHistory('getItem', {\n    key: id\n  }) || 'stopped');\n  const animationStyle = getAnimationStyle(raceStatus, time);\n  useEffect(() => {\n    if (raceStatus !== 'started') {\n      handleGarageRaceStatusesHistory('update', {\n        key: id,\n        newValue: raceStatus\n      });\n    }\n  }, [raceStatus]);\n  const handleStart = () => {\n    setRaceStatus('stopped');\n    setTimeout(() => {\n      setRaceStatus('started');\n      if ((selectedCar === null || selectedCar === void 0 ? void 0 : selectedCar.id) == id) dispatch(setSelectedCar(undefined));\n      fetchCarEngineMode(id, 'started').then(response => {\n        if (!(response !== null && response !== void 0 && response.isFailed)) {\n          const raceTime = response.distance / (response.velocity * 500);\n          setTimeout(() => fetchCarDrive(id).then(response => {\n            if (response !== null && response !== void 0 && response.isFailed && response.status == 500) {\n              setRaceStatus('brokenEngine');\n            }\n          }), 4200);\n          setTime(raceTime);\n        } else setRaceStatus('stopped');\n      });\n    }, 0);\n  };\n  const handleStop = () => {\n    fetchCarEngineMode(id, 'stopped');\n    setRaceStatus('stopped');\n  };\n  const toggleSelect = () => dispatch(setSelectedCar((selectedCar === null || selectedCar === void 0 ? void 0 : selectedCar.id) == id ? undefined : carData));\n  const handleDelete = () => dispatch(deleteCar(id));\n  const handleFinish = () => {\n    if (race && !winner) {\n      const lastWin = winnersList.find(car => car.id === id);\n      const timeNewValue = Number((time * 5).toFixed(3));\n      if (lastWin) dispatch(updateWinner({\n        ...lastWin,\n        time: Math.min(lastWin.time, timeNewValue)\n      }));else dispatch(newWinner({\n        ...carData,\n        time: timeNewValue\n      }));\n    }\n    setRaceStatus('finished');\n  };\n  useEffect(() => {\n    if (race && race != 'finished') race === 'started' ? handleStart() : handleStop();\n  }, [race]);\n  return {\n    handleStart,\n    handleStop,\n    toggleSelect,\n    handleDelete,\n    raceStatus,\n    animationStyle,\n    handleFinish\n  };\n}\n_s(UseGarageTableRow, \"eNe3FXVE5Cu1lcjjE3vVmGtOa5g=\", false, function () {\n  return [useAppDispatch, useAppSelector];\n});\n_c = UseGarageTableRow;\nexport default UseGarageTableRow;\nvar _c;\n$RefreshReg$(_c, \"UseGarageTableRow\");","map":{"version":3,"names":["useState","useEffect","useAppDispatch","useAppSelector","handleGarageRaceStatusesHistory","fetchCarEngineMode","fetchCarDrive","deleteCar","newWinner","setSelectedCar","updateWinner","styles","getAnimationStyle","raceStatus","time","animationName","moveToEnd","animationDuration","animationTimingFunction","animationDelay","animationFillMode","animationPlayState","UseGarageTableRow","carData","_s","dispatch","id","selectedCar","race","winner","winnersList","store","list","setTime","setRaceStatus","key","animationStyle","newValue","handleStart","setTimeout","undefined","then","response","isFailed","raceTime","distance","velocity","status","handleStop","toggleSelect","handleDelete","handleFinish","lastWin","find","car","timeNewValue","Number","toFixed","Math","min","_c","$RefreshReg$"],"sources":["C:/Users/Admin/Documents/GitHub/Async-Race/src/components/commons/GarageTableRow/UseGarageTableRow.ts"],"sourcesContent":["import React, { FC, useState, useEffect, CSSProperties } from 'react';\nimport { useAppDispatch, useAppSelector } from 'store/hooks/hooks';\n\nimport { handleGarageRaceStatusesHistory } from 'Storages/SessionStorage';\nimport { fetchCarEngineMode, fetchCarDrive } from 'CONSTANTS/Axios';\nimport { deleteCar, newWinner, setSelectedCar, updateWinner } from 'store/modules/listReducer';\n\nimport styles from './GarageTableRow.module.scss';\n\ninterface CarData {\n   id: number;\n   name: string;\n   color: string;\n}\n\ntype RaceStatus = 'stopped' | 'started' | 'finished' | 'brokenEngine';\n\ninterface UseGarageTableRowReturn {\n   handleStart: () => void;\n   handleStop: () => void;\n   toggleSelect: () => void;\n   handleDelete: () => void;\n   raceStatus: RaceStatus;\n   animationStyle: CSSProperties;\n   handleFinish: () => void;\n}\n\nconst getAnimationStyle = (raceStatus: string, time: number): CSSProperties => ({\n   animationName: styles.moveToEnd,\n   animationDuration: `${time}s`,\n   animationTimingFunction: 'linear',\n   animationDelay: '4.2s',\n   animationFillMode: 'forwards',\n   animationPlayState: raceStatus === 'brokenEngine' ? 'paused' : 'running',\n})\n\nfunction UseGarageTableRow(carData: CarData): UseGarageTableRowReturn {\n   const dispatch = useAppDispatch();\n   const { id } = carData;\n   const { selectedCar, race, winner, winnersList } = useAppSelector((store) => store.list);\n   const [time, setTime] = useState<number>(0);\n   const [raceStatus, setRaceStatus] = useState<RaceStatus>((handleGarageRaceStatusesHistory('getItem', { key: id }) as RaceStatus) || 'stopped');\n   const animationStyle: CSSProperties = getAnimationStyle( raceStatus, time );\n   useEffect(() => {\n      if (raceStatus !== 'started') {\n         handleGarageRaceStatusesHistory('update', { key: id, newValue: raceStatus });\n      }\n   }, [raceStatus]);\n\n   const handleStart = () => {\n      setRaceStatus('stopped');\n      setTimeout(() => {\n         setRaceStatus('started');\n         if (selectedCar?.id == id) dispatch(setSelectedCar(undefined));\n         fetchCarEngineMode(id, 'started').then((response) => {\n            if (!response?.isFailed) {\n               const raceTime = response.distance / (response.velocity * 500);\n               setTimeout(\n                  () =>\n                     fetchCarDrive(id).then((response) => {\n                        if (response?.isFailed && response.status == 500) {\n                           setRaceStatus('brokenEngine');\n                        }\n                     }),\n                  4200\n               );\n\n               setTime(raceTime);\n            } else setRaceStatus('stopped');\n         });\n      }, 0);\n   };\n   const handleStop = () => {\n      fetchCarEngineMode(id, 'stopped');\n      setRaceStatus('stopped');\n   };\n   const toggleSelect = () => dispatch(setSelectedCar(selectedCar?.id == id ? undefined : carData));\n   const handleDelete = () => dispatch(deleteCar(id));\n   const handleFinish = () => {\n      if (race && !winner) {\n         const lastWin = winnersList.find((car) => car.id === id);\n         const timeNewValue = Number((time * 5).toFixed(3));\n         if (lastWin)\n            dispatch(\n               updateWinner({\n                  ...lastWin,\n                  time: Math.min(lastWin.time, timeNewValue),\n               })\n            );\n         else dispatch(newWinner({ ...carData, time: timeNewValue }));\n      }\n      setRaceStatus('finished');\n   };\n\n   useEffect(() => {\n      if (race && race != 'finished') race === 'started' ? handleStart() : handleStop();\n   }, [race]);\n\n   return { handleStart, handleStop, toggleSelect, handleDelete, raceStatus, animationStyle, handleFinish };\n}\n\nexport default UseGarageTableRow;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}