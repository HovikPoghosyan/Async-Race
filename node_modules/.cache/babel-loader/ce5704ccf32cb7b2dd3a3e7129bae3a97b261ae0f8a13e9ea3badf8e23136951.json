{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { getRandomCarName, getRandomColor } from 'CONSTANTS/CarData';\nimport { fetchGarageListPage, fetchDeleteCar, fetchUpdateCar } from 'CONSTANTS/Axios';\nimport { deleteWinner, updateWinner } from './winnersListReducer';\nconst initialState = {\n  garageList: [],\n  selectedCar: undefined,\n  loading: true,\n  race: 'stopped',\n  winnerPopup: false,\n  count: 0\n};\nconst generateCars = createAsyncThunk('garageList/generateCars', async (count, {\n  dispatch\n}) => {\n  for (let index = 0; index < count; index++) {\n    dispatch(addNewCar({\n      name: getRandomCarName(),\n      color: getRandomColor()\n    }));\n  }\n});\nconst addNewCar = createAsyncThunk('garageList/addNewCar', async (carData, {\n  rejectWithValue\n}) => {\n  // const response = await fetchNewCar(carData);\n  const response = carData;\n  // if (response?.isFailed) return rejectWithValue({ isFailed: true });\n\n  return response;\n});\nconst updateCar = createAsyncThunk('list/updateCar', async (carData, {\n  rejectWithValue,\n  dispatch,\n  getState\n}) => {\n  const response = await fetchUpdateCar(carData);\n  const {\n    winnersList\n  } = getState().winnersList;\n  const carInWinnersList = winnersList.find(winner => winner.id === carData.id);\n  if (response !== null && response !== void 0 && response.isFailed) return rejectWithValue({\n    isFailed: true\n  });\n  if (carInWinnersList) dispatch(updateWinner({\n    ...carInWinnersList,\n    ...carData\n  })).unwrap();\n  return response;\n});\nconst deleteCar = createAsyncThunk('garageList/deleteCar', async (id, {\n  rejectWithValue,\n  getState,\n  dispatch\n}) => {\n  const response = await fetchDeleteCar(id);\n  const {\n    winnersList\n  } = getState().winnersList;\n  const carIsWinner = winnersList.some(winner => winner.id === id);\n  if (carIsWinner) {\n    dispatch(deleteWinner(id));\n  }\n  if (response.isFailed) return rejectWithValue({\n    isFailed: true\n  });\n  return response;\n});\nconst getGarageListPage = createAsyncThunk('garageList/getGarageList', async (pageNo, {\n  rejectWithValue\n}) => {\n  const response = await fetchGarageListPage(pageNo);\n  if (response.isFailed) return rejectWithValue({\n    isFailed: true,\n    errorMessage: response.errors.message\n  });\n  return response;\n});\nconst garageListReducer = createSlice({\n  name: 'garageList',\n  initialState,\n  reducers: {\n    setSelectedCar(state, {\n      payload\n    }) {\n      state.selectedCar = payload;\n    },\n    setRace(state, {\n      payload\n    }) {\n      state.race = payload;\n    },\n    closeWinnerPopup(state) {\n      state.winnerPopup = false;\n    },\n    openWinnerPopup(state) {\n      state.winnerPopup = true;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(addNewCar.fulfilled, (state, {\n      meta\n    }) => {\n      state.garageList.push({\n        ...meta.arg,\n        id: state.garageList.length ? state.garageList[state.garageList.length - 1].id + 1 : 1\n      });\n      state.count = Number(state.count) + 1;\n    }).addCase(updateCar.fulfilled, (state, {\n      meta\n    }) => {\n      state.garageList = state.garageList.map(car => car.id === meta.arg.id ? {\n        ...car,\n        ...meta.arg\n      } : car);\n    }).addCase(deleteCar.fulfilled, (state, {\n      meta\n    }) => {\n      var _state$selectedCar;\n      state.garageList = state.garageList.filter(car => car.id !== meta.arg);\n      state.selectedCar = ((_state$selectedCar = state.selectedCar) === null || _state$selectedCar === void 0 ? void 0 : _state$selectedCar.id) == meta.arg ? undefined : state.selectedCar;\n      state.count = Number(state.count) - 1;\n    }).addCase(getGarageListPage.pending, state => {\n      state.loading = true;\n    }).addCase(getGarageListPage.fulfilled, (state, {\n      payload\n    }) => {\n      const list = [...state.garageList, ...payload.data].sort((carOne, carSecond) => carOne.id - carSecond.id);\n      state.garageList = Array.from(new Map(list.map(item => [item.id, item])).values());\n      state.count = payload.headers['x-total-count'];\n      state.loading = false;\n    }).addCase(getGarageListPage.rejected, state => {\n      state.loading = false;\n    });\n  }\n});\nexport const {\n  setSelectedCar,\n  closeWinnerPopup,\n  setRace,\n  openWinnerPopup\n} = garageListReducer.actions;\nexport { generateCars, addNewCar, updateCar, deleteCar, getGarageListPage };\nexport default garageListReducer.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","getRandomCarName","getRandomColor","fetchGarageListPage","fetchDeleteCar","fetchUpdateCar","deleteWinner","updateWinner","initialState","garageList","selectedCar","undefined","loading","race","winnerPopup","count","generateCars","dispatch","index","addNewCar","name","color","carData","rejectWithValue","response","updateCar","getState","winnersList","carInWinnersList","find","winner","id","isFailed","unwrap","deleteCar","carIsWinner","some","getGarageListPage","pageNo","errorMessage","errors","message","garageListReducer","reducers","setSelectedCar","state","payload","setRace","closeWinnerPopup","openWinnerPopup","extraReducers","builder","addCase","fulfilled","meta","push","arg","length","Number","map","car","_state$selectedCar","filter","pending","list","data","sort","carOne","carSecond","Array","from","Map","item","values","headers","rejected","actions","reducer"],"sources":["C:/Users/Admin/Documents/GitHub/Async-Race/src/store/modules/garageListReducer.ts"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\r\nimport { getRandomCarName, getRandomColor } from 'CONSTANTS/CarData';\r\nimport { fetchGarageListPage, fetchNewCar, fetchDeleteCar, fetchUpdateCar } from 'CONSTANTS/Axios';\r\nimport type { RootState } from 'store/configureReduxStore';\r\nimport { deleteWinner, Winner, updateWinner } from './winnersListReducer';\r\n\r\nexport interface Car {\r\n   id: number;\r\n   name: string;\r\n   color: string;\r\n}\r\n\r\nexport interface CarData {\r\n   name: string;\r\n   color: string;\r\n}\r\n\r\ninterface GarageListState {\r\n   garageList: Car[];\r\n   selectedCar?: Car;\r\n   loading: boolean;\r\n   race: string;\r\n   winnerPopup: boolean;\r\n   count: number;\r\n}\r\n\r\nconst initialState: GarageListState = {\r\n   garageList: [],\r\n   selectedCar: undefined,\r\n   loading: true,\r\n   race: 'stopped',\r\n   winnerPopup: false,\r\n   count: 0,\r\n};\r\n\r\nconst generateCars = createAsyncThunk<void, number, { state: RootState; rejectValue: { isFailed: boolean } }>(\r\n   'garageList/generateCars',\r\n   async (count, { dispatch }) => {\r\n      for (let index = 0; index < count; index++) {\r\n         dispatch(\r\n            addNewCar({\r\n               name: getRandomCarName(),\r\n               color: getRandomColor(),\r\n            })\r\n         );\r\n      }\r\n   }\r\n);\r\n\r\nconst addNewCar = createAsyncThunk<CarData, CarData, { state: RootState; rejectValue: { isFailed: boolean } }>(\r\n   'garageList/addNewCar',\r\n   async (carData, { rejectWithValue }) => {\r\n      // const response = await fetchNewCar(carData);\r\n      const response = carData\r\n      // if (response?.isFailed) return rejectWithValue({ isFailed: true });\r\n\r\n      return response;\r\n   }\r\n);\r\n\r\nconst updateCar = createAsyncThunk<Car, Car, { state: RootState; rejectValue: { isFailed: boolean } }>(\r\n   'list/updateCar',\r\n   async (carData, { rejectWithValue, dispatch, getState }) => {\r\n      const response = await fetchUpdateCar(carData);\r\n      const { winnersList } = getState().winnersList;\r\n      const carInWinnersList = winnersList.find((winner: Winner) => winner.id === carData.id);\r\n      if (response?.isFailed) return rejectWithValue({ isFailed: true });\r\n      if (carInWinnersList) dispatch(updateWinner({ ...carInWinnersList, ...carData })).unwrap();\r\n\r\n      return response;\r\n   }\r\n);\r\n\r\nconst deleteCar = createAsyncThunk<number, number, { state: RootState; rejectValue: { isFailed: boolean } }>(\r\n   'garageList/deleteCar',\r\n   async (id, { rejectWithValue, getState, dispatch }) => {\r\n      const response = await fetchDeleteCar(id);\r\n      const { winnersList } = getState().winnersList;\r\n      const carIsWinner = winnersList.some((winner: Winner) => winner.id === id);\r\n      if (carIsWinner) {\r\n         dispatch(deleteWinner(id));\r\n      }\r\n      if (response.isFailed) return rejectWithValue({ isFailed: true });\r\n\r\n      return response;\r\n   }\r\n);\r\n\r\nconst getGarageListPage = createAsyncThunk<any, number, { state: RootState; rejectValue: { isFailed: boolean; errorMessage: string } }>(\r\n   'garageList/getGarageList',\r\n   async ( pageNo, { rejectWithValue }) => {\r\n      const response = await fetchGarageListPage(pageNo);\r\n      if (response.isFailed) return rejectWithValue({ isFailed: true, errorMessage: response.errors.message });\r\n\r\n      return response;\r\n   }\r\n);\r\n\r\nconst garageListReducer = createSlice({\r\n   name: 'garageList',\r\n   initialState,\r\n   reducers: {\r\n      setSelectedCar(state, { payload }) {\r\n         state.selectedCar = payload;\r\n      },\r\n      setRace(state, { payload }) {\r\n         state.race = payload;\r\n      },\r\n      closeWinnerPopup(state) {\r\n         state.winnerPopup = false;\r\n      },\r\n      openWinnerPopup(state) {\r\n         state.winnerPopup = true;\r\n      },\r\n   },\r\n   extraReducers: (builder) => {\r\n      builder\r\n         .addCase(addNewCar.fulfilled, (state, { meta }) => {\r\n            state.garageList.push({\r\n               ...meta.arg,\r\n               id: state.garageList.length ? state.garageList[state.garageList.length - 1].id + 1 : 1,\r\n            });\r\n            state.count = Number( state.count ) + 1;\r\n         })\r\n         .addCase(updateCar.fulfilled, (state, { meta }) => {\r\n            state.garageList = state.garageList.map((car) => (car.id === meta.arg.id ? { ...car, ...meta.arg } : car));\r\n         })\r\n         .addCase(deleteCar.fulfilled, (state, { meta }) => {\r\n            state.garageList = state.garageList.filter((car) => car.id !== meta.arg);\r\n            state.selectedCar = state.selectedCar?.id == meta.arg ? undefined : state.selectedCar;\r\n            state.count = Number( state.count ) - 1;\r\n         })\r\n         .addCase(getGarageListPage.pending, (state) => {\r\n            state.loading = true;\r\n         })\r\n         .addCase(getGarageListPage.fulfilled, (state, { payload }) => {\r\n            const list = [\r\n               ...state.garageList,\r\n               ...payload.data,\r\n            ].sort(( carOne, carSecond) => carOne.id - carSecond.id);\r\n            state.garageList = Array.from(\r\n               new Map(list.map(item => [item.id, item])).values()\r\n            )\r\n            state.count = payload.headers['x-total-count'];\r\n            state.loading = false;\r\n         })\r\n         .addCase(getGarageListPage.rejected, (state) => {\r\n            state.loading = false;\r\n         });\r\n   },\r\n});\r\n\r\nexport const { setSelectedCar, closeWinnerPopup, setRace, openWinnerPopup } = garageListReducer.actions;\r\nexport { generateCars, addNewCar, updateCar, deleteCar, getGarageListPage };\r\nexport default garageListReducer.reducer;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}