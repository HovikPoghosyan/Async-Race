{"ast":null,"code":"import axios from 'axios';\nconst API_BASE = 'http://localhost:3000';\nconst URLS = {\n  garage: `${API_BASE}/garage`,\n  winners: `${API_BASE}/winners`,\n  engine: `${API_BASE}/engine`\n};\nconst ajax = async (url, {\n  method = 'get',\n  headers = {},\n  data = {}\n}) => {\n  try {\n    const response = await axios({\n      url,\n      method,\n      data,\n      headers\n    });\n    return response;\n  } catch (axiosError) {\n    var _axiosError$response, _axiosError$response$, _axiosError$response2, _axiosError$response3;\n    return {\n      isFailed: true,\n      status: axiosError === null || axiosError === void 0 ? void 0 : axiosError.status,\n      errors: {\n        message: (axiosError === null || axiosError === void 0 ? void 0 : (_axiosError$response = axiosError.response) === null || _axiosError$response === void 0 ? void 0 : (_axiosError$response$ = _axiosError$response.data) === null || _axiosError$response$ === void 0 ? void 0 : _axiosError$response$.message) || axiosError.message || 'Unknown Error',\n        list: axiosError !== null && axiosError !== void 0 && (_axiosError$response2 = axiosError.response) !== null && _axiosError$response2 !== void 0 && (_axiosError$response3 = _axiosError$response2.data) !== null && _axiosError$response3 !== void 0 && _axiosError$response3.errors ? {\n          ...axiosError.response.data.errors\n        } : null\n      }\n    };\n  }\n};\nconst fetchGarageListPage = async pageNo => {\n  const queryParams = new URLSearchParams({\n    _page: pageNo,\n    _limit: '7'\n  });\n  const response = await ajax(`${URLS.garage}?${queryParams.toString()}`, {\n    method: 'GET',\n    headers: {},\n    data: {}\n  });\n  return response.data;\n};\nconst fetchWinnersListPage = async pageNo => {\n  const queryParams = new URLSearchParams({\n    _page: pageNo,\n    _limit: '10'\n  });\n  const response = await ajax(URLS.garage, {\n    method: 'GET',\n    headers: {},\n    data: {}\n  });\n  return response.data;\n};\nconst fetchWinnersList = async pageNo => {\n  const response = await ajax(URLS.winners, {\n    method: 'GET',\n    headers: {},\n    data: {}\n  });\n  return response.data;\n};\nconst fetchGarageListCount = async () => {\n  const queryParams = new URLSearchParams({\n    _limit: '7'\n  });\n  const response = await ajax(URLS.garage, {\n    method: 'GET',\n    headers: {},\n    data: {}\n  });\n  return response.headers[X - Total - Count];\n};\nconst fetchWinnersListCount = async () => {\n  const queryParams = new URLSearchParams({\n    _limit: '10'\n  });\n  const response = await ajax(URLS.winners, {\n    method: 'GET',\n    headers: {},\n    data: {}\n  });\n  return response.headers[X - Total - Count];\n};\nconst fetchNewCar = async carData => {\n  const response = await ajax(URLS.garage, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    data: {\n      ...carData\n    }\n  });\n  return response.data;\n};\nconst fetchDeleteCar = async id => {\n  const response = await ajax(`${URLS.garage}/${id}`, {\n    method: 'DELETE',\n    headers: {},\n    data: {}\n  });\n  return response.data;\n};\nconst fetchUpdateCar = async carData => {\n  const response = await ajax(`${URLS.garage}/${carData.id}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    data: {\n      ...carData\n    }\n  });\n  return response.data;\n};\nconst fetchCarEngineMode = async (id, status) => {\n  const queryParams = new URLSearchParams({\n    id,\n    status\n  });\n  const response = await ajax(`${URLS.engine}?${queryParams.toString()}`, {\n    method: 'PATCH',\n    headers: {},\n    data: {}\n  });\n  return response.data;\n};\nconst fetchNewWinner = async carData => {\n  const response = await ajax(URLS.winners, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    data: {\n      id: carData.id,\n      wins: 1,\n      time: carData.time\n    }\n  });\n  return response.data;\n};\nconst fetchDeleteWinner = async id => {\n  const response = await ajax(`${URLS.winners}/${id}`, {\n    method: 'DELETE',\n    headers: {},\n    data: {}\n  });\n  return response.data;\n};\nconst fetchUpdateWinner = async carData => {\n  const response = await ajax(`${URLS.winners}/${carData.id}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    data: {\n      wins: carData.wins,\n      time: carData.time\n    }\n  });\n  return response.data;\n};\nconst fetchCarDrive = async id => {\n  const queryParams = new URLSearchParams({\n    id,\n    status: 'drive'\n  });\n  const response = await ajax(`${URLS.engine}?${queryParams.toString()}`, {\n    method: 'PATCH',\n    headers: {},\n    data: {}\n  });\n  return response.data;\n};\nexport { fetchDeleteWinner, fetchGarageListCount, fetchWinnersListCount, fetchUpdateCar, fetchDeleteCar, fetchNewCar, fetchCarEngineMode, fetchNewWinner, fetchUpdateWinner, fetchCarDrive, fetchGarageListPage, fetchWinnersListPage, fetchWinnersList };\nexport default ajax;","map":{"version":3,"names":["axios","API_BASE","URLS","garage","winners","engine","ajax","url","method","headers","data","response","axiosError","_axiosError$response","_axiosError$response$","_axiosError$response2","_axiosError$response3","isFailed","status","errors","message","list","fetchGarageListPage","pageNo","queryParams","URLSearchParams","_page","_limit","toString","fetchWinnersListPage","fetchWinnersList","fetchGarageListCount","X","Total","Count","fetchWinnersListCount","fetchNewCar","carData","fetchDeleteCar","id","fetchUpdateCar","fetchCarEngineMode","fetchNewWinner","wins","time","fetchDeleteWinner","fetchUpdateWinner","fetchCarDrive"],"sources":["C:/Users/Admin/Documents/GitHub/Async-Race/src/CONSTANTS/Axios.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_BASE = 'http://localhost:3000';\r\nconst URLS = {\r\n   garage: `${API_BASE}/garage`,\r\n   winners: `${API_BASE}/winners`,\r\n   engine: `${API_BASE}/engine`,\r\n};\r\n\r\nconst ajax = async (url, { method = 'get', headers = {}, data = {} }) => {\r\n   try {\r\n      const response = await axios({\r\n         url,\r\n         method,\r\n         data,\r\n         headers,\r\n      });\r\n      return response;\r\n   } catch (axiosError) {\r\n      return {\r\n         isFailed: true,\r\n         status: axiosError?.status,\r\n         errors: {\r\n            message: axiosError?.response?.data?.message || axiosError.message || 'Unknown Error',\r\n            list: axiosError?.response?.data?.errors ? { ...axiosError.response.data.errors } : null,\r\n         },\r\n      };\r\n   }\r\n};\r\n\r\nconst fetchGarageListPage = async ( pageNo ) => {\r\n   const queryParams = new URLSearchParams({ _page: pageNo, _limit: '7' });\r\n   const response = await ajax( `${URLS.garage}?${queryParams.toString()}`, {\r\n      method: 'GET',\r\n      headers: {},\r\n      data: {},\r\n   });\r\n\r\n   return response.data;\r\n};\r\n\r\nconst fetchWinnersListPage = async ( pageNo ) => {\r\n   const queryParams = new URLSearchParams({ _page: pageNo, _limit: '10' });\r\n   const response = await ajax(URLS.garage, {\r\n      method: 'GET',\r\n      headers: {},\r\n      data: {},\r\n   });\r\n\r\n   return response.data;\r\n};\r\n\r\nconst fetchWinnersList = async ( pageNo ) => {\r\n   const response = await ajax(URLS.winners, {\r\n      method: 'GET',\r\n      headers: {},\r\n      data: {},\r\n   });\r\n\r\n   return response.data;\r\n};\r\n\r\nconst fetchGarageListCount = async () => {\r\n   const queryParams = new URLSearchParams({ _limit: '7' });\r\n   const response = await ajax(URLS.garage, {\r\n      method: 'GET',\r\n      headers: {},\r\n      data: {},\r\n   });\r\n\r\n   return response.headers[X-Total-Count];\r\n};\r\n\r\nconst fetchWinnersListCount = async () => {\r\n   const queryParams = new URLSearchParams({ _limit: '10' });\r\n   const response = await ajax(URLS.winners, {\r\n      method: 'GET',\r\n      headers: {},\r\n      data: {},\r\n   });\r\n\r\n   return response.headers[X-Total-Count];\r\n};\r\n\r\nconst fetchNewCar = async (carData) => {\r\n   const response = await ajax(URLS.garage, {\r\n      method: 'POST',\r\n      headers: {\r\n         'Content-Type': 'application/json',\r\n      },\r\n      data: { ...carData },\r\n   });\r\n\r\n   return response.data;\r\n};\r\n\r\nconst fetchDeleteCar = async (id) => {\r\n   const response = await ajax(`${URLS.garage}/${id}`, {\r\n      method: 'DELETE',\r\n      headers: {},\r\n      data: {},\r\n   });\r\n\r\n   return response.data;\r\n};\r\n\r\nconst fetchUpdateCar = async (carData) => {\r\n   const response = await ajax(`${URLS.garage}/${carData.id}`, {\r\n      method: 'PUT',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      data: { ...carData },\r\n   });\r\n\r\n   return response.data;\r\n};\r\n\r\nconst fetchCarEngineMode = async (id, status) => {\r\n   const queryParams = new URLSearchParams({ id, status });\r\n   const response = await ajax(`${URLS.engine}?${queryParams.toString()}`, {\r\n      method: 'PATCH',\r\n      headers: {},\r\n      data: {},\r\n   });\r\n\r\n   return response.data;\r\n};\r\n\r\nconst fetchNewWinner = async (carData) => {\r\n   const response = await ajax(URLS.winners, {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      data: {\r\n         id: carData.id,\r\n         wins: 1,\r\n         time: carData.time,\r\n      },\r\n   });\r\n\r\n   return response.data;\r\n};\r\n\r\nconst fetchDeleteWinner = async (id) => {\r\n   const response = await ajax(`${URLS.winners}/${id}`, {\r\n      method: 'DELETE',\r\n      headers: {},\r\n      data: {},\r\n   });\r\n\r\n   return response.data;\r\n};\r\n\r\nconst fetchUpdateWinner = async (carData) => {\r\n   const response = await ajax(`${URLS.winners}/${carData.id}`, {\r\n      method: 'PUT',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      data: {\r\n         wins: carData.wins,\r\n         time: carData.time,\r\n      },\r\n   });\r\n\r\n   return response.data;\r\n};\r\n\r\nconst fetchCarDrive = async (id) => {\r\n   const queryParams = new URLSearchParams({ id, status: 'drive' });\r\n   const response = await ajax(`${URLS.engine}?${queryParams.toString()}`, {\r\n      method: 'PATCH',\r\n      headers: {},\r\n      data: {},\r\n   });\r\n\r\n   return response.data;\r\n};\r\n\r\nexport {\r\n   fetchDeleteWinner,\r\n   fetchGarageListCount,\r\n   fetchWinnersListCount,\r\n   fetchUpdateCar,\r\n   fetchDeleteCar,\r\n   fetchNewCar,\r\n   fetchCarEngineMode,\r\n   fetchNewWinner,\r\n   fetchUpdateWinner,\r\n   fetchCarDrive,\r\n   fetchGarageListPage,\r\n   fetchWinnersListPage,\r\n   fetchWinnersList,\r\n};\r\nexport default ajax;\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,QAAQ,GAAG,uBAAuB;AACxC,MAAMC,IAAI,GAAG;EACVC,MAAM,EAAE,GAAGF,QAAQ,SAAS;EAC5BG,OAAO,EAAE,GAAGH,QAAQ,UAAU;EAC9BI,MAAM,EAAE,GAAGJ,QAAQ;AACtB,CAAC;AAED,MAAMK,IAAI,GAAG,MAAAA,CAAOC,GAAG,EAAE;EAAEC,MAAM,GAAG,KAAK;EAAEC,OAAO,GAAG,CAAC,CAAC;EAAEC,IAAI,GAAG,CAAC;AAAE,CAAC,KAAK;EACtE,IAAI;IACD,MAAMC,QAAQ,GAAG,MAAMX,KAAK,CAAC;MAC1BO,GAAG;MACHC,MAAM;MACNE,IAAI;MACJD;IACH,CAAC,CAAC;IACF,OAAOE,QAAQ;EAClB,CAAC,CAAC,OAAOC,UAAU,EAAE;IAAA,IAAAC,oBAAA,EAAAC,qBAAA,EAAAC,qBAAA,EAAAC,qBAAA;IAClB,OAAO;MACJC,QAAQ,EAAE,IAAI;MACdC,MAAM,EAAEN,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAEM,MAAM;MAC1BC,MAAM,EAAE;QACLC,OAAO,EAAE,CAAAR,UAAU,aAAVA,UAAU,wBAAAC,oBAAA,GAAVD,UAAU,CAAED,QAAQ,cAAAE,oBAAA,wBAAAC,qBAAA,GAApBD,oBAAA,CAAsBH,IAAI,cAAAI,qBAAA,uBAA1BA,qBAAA,CAA4BM,OAAO,KAAIR,UAAU,CAACQ,OAAO,IAAI,eAAe;QACrFC,IAAI,EAAET,UAAU,aAAVA,UAAU,gBAAAG,qBAAA,GAAVH,UAAU,CAAED,QAAQ,cAAAI,qBAAA,gBAAAC,qBAAA,GAApBD,qBAAA,CAAsBL,IAAI,cAAAM,qBAAA,eAA1BA,qBAAA,CAA4BG,MAAM,GAAG;UAAE,GAAGP,UAAU,CAACD,QAAQ,CAACD,IAAI,CAACS;QAAO,CAAC,GAAG;MACvF;IACH,CAAC;EACJ;AACH,CAAC;AAED,MAAMG,mBAAmB,GAAG,MAAQC,MAAM,IAAM;EAC7C,MAAMC,WAAW,GAAG,IAAIC,eAAe,CAAC;IAAEC,KAAK,EAAEH,MAAM;IAAEI,MAAM,EAAE;EAAI,CAAC,CAAC;EACvE,MAAMhB,QAAQ,GAAG,MAAML,IAAI,CAAE,GAAGJ,IAAI,CAACC,MAAM,IAAIqB,WAAW,CAACI,QAAQ,CAAC,CAAC,EAAE,EAAE;IACtEpB,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE,CAAC,CAAC;IACXC,IAAI,EAAE,CAAC;EACV,CAAC,CAAC;EAEF,OAAOC,QAAQ,CAACD,IAAI;AACvB,CAAC;AAED,MAAMmB,oBAAoB,GAAG,MAAQN,MAAM,IAAM;EAC9C,MAAMC,WAAW,GAAG,IAAIC,eAAe,CAAC;IAAEC,KAAK,EAAEH,MAAM;IAAEI,MAAM,EAAE;EAAK,CAAC,CAAC;EACxE,MAAMhB,QAAQ,GAAG,MAAML,IAAI,CAACJ,IAAI,CAACC,MAAM,EAAE;IACtCK,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE,CAAC,CAAC;IACXC,IAAI,EAAE,CAAC;EACV,CAAC,CAAC;EAEF,OAAOC,QAAQ,CAACD,IAAI;AACvB,CAAC;AAED,MAAMoB,gBAAgB,GAAG,MAAQP,MAAM,IAAM;EAC1C,MAAMZ,QAAQ,GAAG,MAAML,IAAI,CAACJ,IAAI,CAACE,OAAO,EAAE;IACvCI,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE,CAAC,CAAC;IACXC,IAAI,EAAE,CAAC;EACV,CAAC,CAAC;EAEF,OAAOC,QAAQ,CAACD,IAAI;AACvB,CAAC;AAED,MAAMqB,oBAAoB,GAAG,MAAAA,CAAA,KAAY;EACtC,MAAMP,WAAW,GAAG,IAAIC,eAAe,CAAC;IAAEE,MAAM,EAAE;EAAI,CAAC,CAAC;EACxD,MAAMhB,QAAQ,GAAG,MAAML,IAAI,CAACJ,IAAI,CAACC,MAAM,EAAE;IACtCK,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE,CAAC,CAAC;IACXC,IAAI,EAAE,CAAC;EACV,CAAC,CAAC;EAEF,OAAOC,QAAQ,CAACF,OAAO,CAACuB,CAAC,GAACC,KAAK,GAACC,KAAK,CAAC;AACzC,CAAC;AAED,MAAMC,qBAAqB,GAAG,MAAAA,CAAA,KAAY;EACvC,MAAMX,WAAW,GAAG,IAAIC,eAAe,CAAC;IAAEE,MAAM,EAAE;EAAK,CAAC,CAAC;EACzD,MAAMhB,QAAQ,GAAG,MAAML,IAAI,CAACJ,IAAI,CAACE,OAAO,EAAE;IACvCI,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE,CAAC,CAAC;IACXC,IAAI,EAAE,CAAC;EACV,CAAC,CAAC;EAEF,OAAOC,QAAQ,CAACF,OAAO,CAACuB,CAAC,GAACC,KAAK,GAACC,KAAK,CAAC;AACzC,CAAC;AAED,MAAME,WAAW,GAAG,MAAOC,OAAO,IAAK;EACpC,MAAM1B,QAAQ,GAAG,MAAML,IAAI,CAACJ,IAAI,CAACC,MAAM,EAAE;IACtCK,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACN,cAAc,EAAE;IACnB,CAAC;IACDC,IAAI,EAAE;MAAE,GAAG2B;IAAQ;EACtB,CAAC,CAAC;EAEF,OAAO1B,QAAQ,CAACD,IAAI;AACvB,CAAC;AAED,MAAM4B,cAAc,GAAG,MAAOC,EAAE,IAAK;EAClC,MAAM5B,QAAQ,GAAG,MAAML,IAAI,CAAC,GAAGJ,IAAI,CAACC,MAAM,IAAIoC,EAAE,EAAE,EAAE;IACjD/B,MAAM,EAAE,QAAQ;IAChBC,OAAO,EAAE,CAAC,CAAC;IACXC,IAAI,EAAE,CAAC;EACV,CAAC,CAAC;EAEF,OAAOC,QAAQ,CAACD,IAAI;AACvB,CAAC;AAED,MAAM8B,cAAc,GAAG,MAAOH,OAAO,IAAK;EACvC,MAAM1B,QAAQ,GAAG,MAAML,IAAI,CAAC,GAAGJ,IAAI,CAACC,MAAM,IAAIkC,OAAO,CAACE,EAAE,EAAE,EAAE;IACzD/B,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/CC,IAAI,EAAE;MAAE,GAAG2B;IAAQ;EACtB,CAAC,CAAC;EAEF,OAAO1B,QAAQ,CAACD,IAAI;AACvB,CAAC;AAED,MAAM+B,kBAAkB,GAAG,MAAAA,CAAOF,EAAE,EAAErB,MAAM,KAAK;EAC9C,MAAMM,WAAW,GAAG,IAAIC,eAAe,CAAC;IAAEc,EAAE;IAAErB;EAAO,CAAC,CAAC;EACvD,MAAMP,QAAQ,GAAG,MAAML,IAAI,CAAC,GAAGJ,IAAI,CAACG,MAAM,IAAImB,WAAW,CAACI,QAAQ,CAAC,CAAC,EAAE,EAAE;IACrEpB,MAAM,EAAE,OAAO;IACfC,OAAO,EAAE,CAAC,CAAC;IACXC,IAAI,EAAE,CAAC;EACV,CAAC,CAAC;EAEF,OAAOC,QAAQ,CAACD,IAAI;AACvB,CAAC;AAED,MAAMgC,cAAc,GAAG,MAAOL,OAAO,IAAK;EACvC,MAAM1B,QAAQ,GAAG,MAAML,IAAI,CAACJ,IAAI,CAACE,OAAO,EAAE;IACvCI,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/CC,IAAI,EAAE;MACH6B,EAAE,EAAEF,OAAO,CAACE,EAAE;MACdI,IAAI,EAAE,CAAC;MACPC,IAAI,EAAEP,OAAO,CAACO;IACjB;EACH,CAAC,CAAC;EAEF,OAAOjC,QAAQ,CAACD,IAAI;AACvB,CAAC;AAED,MAAMmC,iBAAiB,GAAG,MAAON,EAAE,IAAK;EACrC,MAAM5B,QAAQ,GAAG,MAAML,IAAI,CAAC,GAAGJ,IAAI,CAACE,OAAO,IAAImC,EAAE,EAAE,EAAE;IAClD/B,MAAM,EAAE,QAAQ;IAChBC,OAAO,EAAE,CAAC,CAAC;IACXC,IAAI,EAAE,CAAC;EACV,CAAC,CAAC;EAEF,OAAOC,QAAQ,CAACD,IAAI;AACvB,CAAC;AAED,MAAMoC,iBAAiB,GAAG,MAAOT,OAAO,IAAK;EAC1C,MAAM1B,QAAQ,GAAG,MAAML,IAAI,CAAC,GAAGJ,IAAI,CAACE,OAAO,IAAIiC,OAAO,CAACE,EAAE,EAAE,EAAE;IAC1D/B,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/CC,IAAI,EAAE;MACHiC,IAAI,EAAEN,OAAO,CAACM,IAAI;MAClBC,IAAI,EAAEP,OAAO,CAACO;IACjB;EACH,CAAC,CAAC;EAEF,OAAOjC,QAAQ,CAACD,IAAI;AACvB,CAAC;AAED,MAAMqC,aAAa,GAAG,MAAOR,EAAE,IAAK;EACjC,MAAMf,WAAW,GAAG,IAAIC,eAAe,CAAC;IAAEc,EAAE;IAAErB,MAAM,EAAE;EAAQ,CAAC,CAAC;EAChE,MAAMP,QAAQ,GAAG,MAAML,IAAI,CAAC,GAAGJ,IAAI,CAACG,MAAM,IAAImB,WAAW,CAACI,QAAQ,CAAC,CAAC,EAAE,EAAE;IACrEpB,MAAM,EAAE,OAAO;IACfC,OAAO,EAAE,CAAC,CAAC;IACXC,IAAI,EAAE,CAAC;EACV,CAAC,CAAC;EAEF,OAAOC,QAAQ,CAACD,IAAI;AACvB,CAAC;AAED,SACGmC,iBAAiB,EACjBd,oBAAoB,EACpBI,qBAAqB,EACrBK,cAAc,EACdF,cAAc,EACdF,WAAW,EACXK,kBAAkB,EAClBC,cAAc,EACdI,iBAAiB,EACjBC,aAAa,EACbzB,mBAAmB,EACnBO,oBAAoB,EACpBC,gBAAgB;AAEnB,eAAexB,IAAI","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}