{"ast":null,"code":"import _objectSpread from\"C:/Users/Admin/Documents/GitHub/Async-Race/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import{createSlice,createAsyncThunk}from'@reduxjs/toolkit';import{getRandomCarName,getRandomColor}from'CONSTANTS/CarData';import{fetchGarageList,fetchNewCar,fetchDeleteCar,fetchUpdateCar}from'CONSTANTS/Axios';import{deleteWinner,updateWinner}from'./winnersListReducer';const initialState={garageList:[],selectedCar:undefined,loading:false,race:'stopped',winnerPopup:false};const generateCars=createAsyncThunk('garageList/generateCars',async(count,_ref)=>{let{dispatch}=_ref;for(let index=0;index<count;index++){dispatch(addNewCar({name:getRandomCarName(),color:getRandomColor()}));}});const addNewCar=createAsyncThunk('garageList/addNewCar',async(carData,_ref2)=>{let{rejectWithValue}=_ref2;const data=await fetchNewCar(carData);if(data.isFailed)return rejectWithValue({isFailed:true});return data;});const updateCar=createAsyncThunk('list/updateCar',async(carData,_ref3)=>{let{rejectWithValue,dispatch,getState}=_ref3;const data=await fetchUpdateCar(carData);const{winnersList}=getState().winnersList;const carInWinnersList=winnersList.find(winner=>winner.id===carData.id);if(data!==null&&data!==void 0&&data.isFailed)return rejectWithValue({isFailed:true});if(carInWinnersList)dispatch(updateWinner(_objectSpread(_objectSpread({},carInWinnersList),carData))).unwrap();return data;});const deleteCar=createAsyncThunk('garageList/deleteCar',async(id,_ref4)=>{let{rejectWithValue,getState,dispatch}=_ref4;const data=await fetchDeleteCar(id);const{winnersList}=getState().winnersList;const carIsWinner=winnersList.some(winner=>winner.id===id);console.log('carIsWinner: ',carIsWinner);if(carIsWinner){dispatch(deleteWinner(id));}if(data.isFailed)return rejectWithValue({isFailed:true});return data;});const getGarageLists=createAsyncThunk('garageList/getGarageLists',async(props,_ref5)=>{let{rejectWithValue}=_ref5;const data=await fetchGarageList();if(data.isFailed)return rejectWithValue({isFailed:true,errorMessage:data.errors.message});return data;});const garageListReducer=createSlice({name:'garageList',initialState,reducers:{setSelectedCar(state,_ref6){let{payload}=_ref6;state.selectedCar=payload;},setRace(state,_ref7){let{payload}=_ref7;state.race=payload;},closeWinnerPopup(state){state.winnerPopup=false;},openWinnerPopup(state){state.winnerPopup=true;}},extraReducers:builder=>{builder.addCase(addNewCar.fulfilled,(state,_ref8)=>{let{meta}=_ref8;state.garageList.push(_objectSpread(_objectSpread({},meta.arg),{},{id:state.garageList.length?state.garageList[state.garageList.length-1].id+1:1}));}).addCase(updateCar.fulfilled,(state,_ref9)=>{let{meta}=_ref9;state.garageList=state.garageList.map(car=>car.id===meta.arg.id?_objectSpread(_objectSpread({},car),meta.arg):car);}).addCase(deleteCar.fulfilled,(state,_ref0)=>{let{meta}=_ref0;state.garageList=state.garageList.filter(car=>car.id!==meta.arg);}).addCase(getGarageLists.pending,state=>{state.loading=true;}).addCase(getGarageLists.fulfilled,(state,_ref1)=>{let{payload}=_ref1;state.garageList=payload;state.loading=false;}).addCase(getGarageLists.rejected,state=>{state.loading=false;});}});export const{setSelectedCar,closeWinnerPopup,setRace,openWinnerPopup}=garageListReducer.actions;export{generateCars,addNewCar,updateCar,deleteCar,getGarageLists};export default garageListReducer.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","getRandomCarName","getRandomColor","fetchGarageList","fetchNewCar","fetchDeleteCar","fetchUpdateCar","deleteWinner","updateWinner","initialState","garageList","selectedCar","undefined","loading","race","winnerPopup","generateCars","count","_ref","dispatch","index","addNewCar","name","color","carData","_ref2","rejectWithValue","data","isFailed","updateCar","_ref3","getState","winnersList","carInWinnersList","find","winner","id","_objectSpread","unwrap","deleteCar","_ref4","carIsWinner","some","console","log","getGarageLists","props","_ref5","errorMessage","errors","message","garageListReducer","reducers","setSelectedCar","state","_ref6","payload","setRace","_ref7","closeWinnerPopup","openWinnerPopup","extraReducers","builder","addCase","fulfilled","_ref8","meta","push","arg","length","_ref9","map","car","_ref0","filter","pending","_ref1","rejected","actions","reducer"],"sources":["C:/Users/Admin/Documents/GitHub/Async-Race/src/store/modules/garageListReducer.ts"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\r\nimport { getRandomCarName, getRandomColor } from 'CONSTANTS/CarData';\r\nimport { fetchGarageList, fetchNewCar, fetchDeleteCar, fetchUpdateCar } from 'CONSTANTS/Axios';\r\nimport type { RootState } from 'store/configureReduxStore';\r\nimport { deleteWinner, Winner, updateWinner } from './winnersListReducer';\r\n\r\nexport interface Car {\r\n   id: number;\r\n   name: string;\r\n   color: string;\r\n}\r\n\r\nexport interface CarData {\r\n   name: string;\r\n   color: string;\r\n}\r\n\r\ninterface GarageListState {\r\n   garageList: Car[];\r\n   selectedCar?: Car;\r\n   loading: boolean;\r\n   race: string;\r\n   winnerPopup: boolean;\r\n}\r\n\r\nconst initialState: GarageListState = {\r\n   garageList: [],\r\n   selectedCar: undefined,\r\n   loading: false,\r\n   race: 'stopped',\r\n   winnerPopup: false,\r\n};\r\n\r\nconst generateCars = createAsyncThunk<void, number, { state: RootState; rejectValue: { isFailed: boolean } }>(\r\n   'garageList/generateCars',\r\n   async (count, { dispatch }) => {\r\n      for (let index = 0; index < count; index++) {\r\n         dispatch(\r\n            addNewCar({\r\n               name: getRandomCarName(),\r\n               color: getRandomColor(),\r\n            })\r\n         );\r\n      }\r\n   }\r\n);\r\n\r\nconst addNewCar = createAsyncThunk<CarData, CarData, { state: RootState; rejectValue: { isFailed: boolean } }>(\r\n   'garageList/addNewCar',\r\n   async (carData, { rejectWithValue }) => {\r\n      const data = await fetchNewCar(carData);\r\n      if (data.isFailed) return rejectWithValue({ isFailed: true });\r\n\r\n      return data;\r\n   }\r\n);\r\n\r\nconst updateCar = createAsyncThunk<Car, Car, { state: RootState; rejectValue: { isFailed: boolean } }>(\r\n   'list/updateCar',\r\n   async (carData, { rejectWithValue, dispatch, getState }) => {\r\n      const data = await fetchUpdateCar(carData);\r\n      const { winnersList } = getState().winnersList;\r\n      const carInWinnersList = winnersList.find((winner: Winner) => winner.id === carData.id);\r\n      if (data?.isFailed) return rejectWithValue({ isFailed: true });\r\n      if (carInWinnersList) dispatch(updateWinner({ ...carInWinnersList, ...carData })).unwrap();\r\n\r\n      return data;\r\n   }\r\n);\r\n\r\nconst deleteCar = createAsyncThunk<number, number, { state: RootState; rejectValue: { isFailed: boolean } }>(\r\n   'garageList/deleteCar',\r\n   async (id, { rejectWithValue, getState, dispatch }) => {\r\n      const data = await fetchDeleteCar(id);\r\n      const { winnersList } = getState().winnersList;\r\n      const carIsWinner = winnersList.some((winner: Winner) => winner.id === id);\r\n      console.log('carIsWinner: ', carIsWinner);\r\n      if (carIsWinner) {\r\n         dispatch(deleteWinner(id));\r\n      }\r\n      if (data.isFailed) return rejectWithValue({ isFailed: true });\r\n\r\n      return data;\r\n   }\r\n);\r\n\r\nconst getGarageLists = createAsyncThunk<Car[], void, { state: RootState; rejectValue: { isFailed: boolean; errorMessage: string } }>(\r\n   'garageList/getGarageLists',\r\n   async (props, { rejectWithValue }) => {\r\n      const data = await fetchGarageList();\r\n      if (data.isFailed) return rejectWithValue({ isFailed: true, errorMessage: data.errors.message });\r\n\r\n      return data;\r\n   }\r\n);\r\n\r\nconst garageListReducer = createSlice({\r\n   name: 'garageList',\r\n   initialState,\r\n   reducers: {\r\n      setSelectedCar(state, { payload }) {\r\n         state.selectedCar = payload;\r\n      },\r\n      setRace(state, { payload }) {\r\n         state.race = payload;\r\n      },\r\n      closeWinnerPopup(state) {\r\n         state.winnerPopup = false;\r\n      },\r\n      openWinnerPopup(state) {\r\n         state.winnerPopup = true;\r\n      },\r\n   },\r\n   extraReducers: (builder) => {\r\n      builder\r\n         .addCase(addNewCar.fulfilled, (state, { meta }) => {\r\n            state.garageList.push({\r\n               ...meta.arg,\r\n               id: state.garageList.length ? state.garageList[state.garageList.length - 1].id + 1 : 1,\r\n            });\r\n         })\r\n         .addCase(updateCar.fulfilled, (state, { meta }) => {\r\n            state.garageList = state.garageList.map((car) => (car.id === meta.arg.id ? { ...car, ...meta.arg } : car));\r\n         })\r\n         .addCase(deleteCar.fulfilled, (state, { meta }) => {\r\n            state.garageList = state.garageList.filter((car) => car.id !== meta.arg);\r\n         })\r\n         .addCase(getGarageLists.pending, (state) => {\r\n            state.loading = true;\r\n         })\r\n         .addCase(getGarageLists.fulfilled, (state, { payload }) => {\r\n            state.garageList = payload;\r\n            state.loading = false;\r\n         })\r\n         .addCase(getGarageLists.rejected, (state) => {\r\n            state.loading = false;\r\n         });\r\n   },\r\n});\r\n\r\nexport const { setSelectedCar, closeWinnerPopup, setRace, openWinnerPopup } = garageListReducer.actions;\r\nexport { generateCars, addNewCar, updateCar, deleteCar, getGarageLists };\r\nexport default garageListReducer.reducer;\r\n"],"mappings":"+HAAA,OAASA,WAAW,CAAEC,gBAAgB,KAAQ,kBAAkB,CAChE,OAASC,gBAAgB,CAAEC,cAAc,KAAQ,mBAAmB,CACpE,OAASC,eAAe,CAAEC,WAAW,CAAEC,cAAc,CAAEC,cAAc,KAAQ,iBAAiB,CAE9F,OAASC,YAAY,CAAUC,YAAY,KAAQ,sBAAsB,CAqBzE,KAAM,CAAAC,YAA6B,CAAG,CACnCC,UAAU,CAAE,EAAE,CACdC,WAAW,CAAEC,SAAS,CACtBC,OAAO,CAAE,KAAK,CACdC,IAAI,CAAE,SAAS,CACfC,WAAW,CAAE,KAChB,CAAC,CAED,KAAM,CAAAC,YAAY,CAAGhB,gBAAgB,CAClC,yBAAyB,CACzB,MAAOiB,KAAK,CAAAC,IAAA,GAAmB,IAAjB,CAAEC,QAAS,CAAC,CAAAD,IAAA,CACvB,IAAK,GAAI,CAAAE,KAAK,CAAG,CAAC,CAAEA,KAAK,CAAGH,KAAK,CAAEG,KAAK,EAAE,CAAE,CACzCD,QAAQ,CACLE,SAAS,CAAC,CACPC,IAAI,CAAErB,gBAAgB,CAAC,CAAC,CACxBsB,KAAK,CAAErB,cAAc,CAAC,CACzB,CAAC,CACJ,CAAC,CACJ,CACH,CACH,CAAC,CAED,KAAM,CAAAmB,SAAS,CAAGrB,gBAAgB,CAC/B,sBAAsB,CACtB,MAAOwB,OAAO,CAAAC,KAAA,GAA0B,IAAxB,CAAEC,eAAgB,CAAC,CAAAD,KAAA,CAChC,KAAM,CAAAE,IAAI,CAAG,KAAM,CAAAvB,WAAW,CAACoB,OAAO,CAAC,CACvC,GAAIG,IAAI,CAACC,QAAQ,CAAE,MAAO,CAAAF,eAAe,CAAC,CAAEE,QAAQ,CAAE,IAAK,CAAC,CAAC,CAE7D,MAAO,CAAAD,IAAI,CACd,CACH,CAAC,CAED,KAAM,CAAAE,SAAS,CAAG7B,gBAAgB,CAC/B,gBAAgB,CAChB,MAAOwB,OAAO,CAAAM,KAAA,GAA8C,IAA5C,CAAEJ,eAAe,CAAEP,QAAQ,CAAEY,QAAS,CAAC,CAAAD,KAAA,CACpD,KAAM,CAAAH,IAAI,CAAG,KAAM,CAAArB,cAAc,CAACkB,OAAO,CAAC,CAC1C,KAAM,CAAEQ,WAAY,CAAC,CAAGD,QAAQ,CAAC,CAAC,CAACC,WAAW,CAC9C,KAAM,CAAAC,gBAAgB,CAAGD,WAAW,CAACE,IAAI,CAAEC,MAAc,EAAKA,MAAM,CAACC,EAAE,GAAKZ,OAAO,CAACY,EAAE,CAAC,CACvF,GAAIT,IAAI,SAAJA,IAAI,WAAJA,IAAI,CAAEC,QAAQ,CAAE,MAAO,CAAAF,eAAe,CAAC,CAAEE,QAAQ,CAAE,IAAK,CAAC,CAAC,CAC9D,GAAIK,gBAAgB,CAAEd,QAAQ,CAACX,YAAY,CAAA6B,aAAA,CAAAA,aAAA,IAAMJ,gBAAgB,EAAKT,OAAO,CAAE,CAAC,CAAC,CAACc,MAAM,CAAC,CAAC,CAE1F,MAAO,CAAAX,IAAI,CACd,CACH,CAAC,CAED,KAAM,CAAAY,SAAS,CAAGvC,gBAAgB,CAC/B,sBAAsB,CACtB,MAAOoC,EAAE,CAAAI,KAAA,GAA8C,IAA5C,CAAEd,eAAe,CAAEK,QAAQ,CAAEZ,QAAS,CAAC,CAAAqB,KAAA,CAC/C,KAAM,CAAAb,IAAI,CAAG,KAAM,CAAAtB,cAAc,CAAC+B,EAAE,CAAC,CACrC,KAAM,CAAEJ,WAAY,CAAC,CAAGD,QAAQ,CAAC,CAAC,CAACC,WAAW,CAC9C,KAAM,CAAAS,WAAW,CAAGT,WAAW,CAACU,IAAI,CAAEP,MAAc,EAAKA,MAAM,CAACC,EAAE,GAAKA,EAAE,CAAC,CAC1EO,OAAO,CAACC,GAAG,CAAC,eAAe,CAAEH,WAAW,CAAC,CACzC,GAAIA,WAAW,CAAE,CACdtB,QAAQ,CAACZ,YAAY,CAAC6B,EAAE,CAAC,CAAC,CAC7B,CACA,GAAIT,IAAI,CAACC,QAAQ,CAAE,MAAO,CAAAF,eAAe,CAAC,CAAEE,QAAQ,CAAE,IAAK,CAAC,CAAC,CAE7D,MAAO,CAAAD,IAAI,CACd,CACH,CAAC,CAED,KAAM,CAAAkB,cAAc,CAAG7C,gBAAgB,CACpC,2BAA2B,CAC3B,MAAO8C,KAAK,CAAAC,KAAA,GAA0B,IAAxB,CAAErB,eAAgB,CAAC,CAAAqB,KAAA,CAC9B,KAAM,CAAApB,IAAI,CAAG,KAAM,CAAAxB,eAAe,CAAC,CAAC,CACpC,GAAIwB,IAAI,CAACC,QAAQ,CAAE,MAAO,CAAAF,eAAe,CAAC,CAAEE,QAAQ,CAAE,IAAI,CAAEoB,YAAY,CAAErB,IAAI,CAACsB,MAAM,CAACC,OAAQ,CAAC,CAAC,CAEhG,MAAO,CAAAvB,IAAI,CACd,CACH,CAAC,CAED,KAAM,CAAAwB,iBAAiB,CAAGpD,WAAW,CAAC,CACnCuB,IAAI,CAAE,YAAY,CAClBb,YAAY,CACZ2C,QAAQ,CAAE,CACPC,cAAcA,CAACC,KAAK,CAAAC,KAAA,CAAe,IAAb,CAAEC,OAAQ,CAAC,CAAAD,KAAA,CAC9BD,KAAK,CAAC3C,WAAW,CAAG6C,OAAO,CAC9B,CAAC,CACDC,OAAOA,CAACH,KAAK,CAAAI,KAAA,CAAe,IAAb,CAAEF,OAAQ,CAAC,CAAAE,KAAA,CACvBJ,KAAK,CAACxC,IAAI,CAAG0C,OAAO,CACvB,CAAC,CACDG,gBAAgBA,CAACL,KAAK,CAAE,CACrBA,KAAK,CAACvC,WAAW,CAAG,KAAK,CAC5B,CAAC,CACD6C,eAAeA,CAACN,KAAK,CAAE,CACpBA,KAAK,CAACvC,WAAW,CAAG,IAAI,CAC3B,CACH,CAAC,CACD8C,aAAa,CAAGC,OAAO,EAAK,CACzBA,OAAO,CACHC,OAAO,CAAC1C,SAAS,CAAC2C,SAAS,CAAE,CAACV,KAAK,CAAAW,KAAA,GAAe,IAAb,CAAEC,IAAK,CAAC,CAAAD,KAAA,CAC3CX,KAAK,CAAC5C,UAAU,CAACyD,IAAI,CAAA9B,aAAA,CAAAA,aAAA,IACf6B,IAAI,CAACE,GAAG,MACXhC,EAAE,CAAEkB,KAAK,CAAC5C,UAAU,CAAC2D,MAAM,CAAGf,KAAK,CAAC5C,UAAU,CAAC4C,KAAK,CAAC5C,UAAU,CAAC2D,MAAM,CAAG,CAAC,CAAC,CAACjC,EAAE,CAAG,CAAC,CAAG,CAAC,EACxF,CAAC,CACL,CAAC,CAAC,CACD2B,OAAO,CAAClC,SAAS,CAACmC,SAAS,CAAE,CAACV,KAAK,CAAAgB,KAAA,GAAe,IAAb,CAAEJ,IAAK,CAAC,CAAAI,KAAA,CAC3ChB,KAAK,CAAC5C,UAAU,CAAG4C,KAAK,CAAC5C,UAAU,CAAC6D,GAAG,CAAEC,GAAG,EAAMA,GAAG,CAACpC,EAAE,GAAK8B,IAAI,CAACE,GAAG,CAAChC,EAAE,CAAAC,aAAA,CAAAA,aAAA,IAAQmC,GAAG,EAAKN,IAAI,CAACE,GAAG,EAAKI,GAAI,CAAC,CAC7G,CAAC,CAAC,CACDT,OAAO,CAACxB,SAAS,CAACyB,SAAS,CAAE,CAACV,KAAK,CAAAmB,KAAA,GAAe,IAAb,CAAEP,IAAK,CAAC,CAAAO,KAAA,CAC3CnB,KAAK,CAAC5C,UAAU,CAAG4C,KAAK,CAAC5C,UAAU,CAACgE,MAAM,CAAEF,GAAG,EAAKA,GAAG,CAACpC,EAAE,GAAK8B,IAAI,CAACE,GAAG,CAAC,CAC3E,CAAC,CAAC,CACDL,OAAO,CAAClB,cAAc,CAAC8B,OAAO,CAAGrB,KAAK,EAAK,CACzCA,KAAK,CAACzC,OAAO,CAAG,IAAI,CACvB,CAAC,CAAC,CACDkD,OAAO,CAAClB,cAAc,CAACmB,SAAS,CAAE,CAACV,KAAK,CAAAsB,KAAA,GAAkB,IAAhB,CAAEpB,OAAQ,CAAC,CAAAoB,KAAA,CACnDtB,KAAK,CAAC5C,UAAU,CAAG8C,OAAO,CAC1BF,KAAK,CAACzC,OAAO,CAAG,KAAK,CACxB,CAAC,CAAC,CACDkD,OAAO,CAAClB,cAAc,CAACgC,QAAQ,CAAGvB,KAAK,EAAK,CAC1CA,KAAK,CAACzC,OAAO,CAAG,KAAK,CACxB,CAAC,CAAC,CACR,CACH,CAAC,CAAC,CAEF,MAAO,MAAM,CAAEwC,cAAc,CAAEM,gBAAgB,CAAEF,OAAO,CAAEG,eAAgB,CAAC,CAAGT,iBAAiB,CAAC2B,OAAO,CACvG,OAAS9D,YAAY,CAAEK,SAAS,CAAEQ,SAAS,CAAEU,SAAS,CAAEM,cAAc,EACtE,cAAe,CAAAM,iBAAiB,CAAC4B,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}