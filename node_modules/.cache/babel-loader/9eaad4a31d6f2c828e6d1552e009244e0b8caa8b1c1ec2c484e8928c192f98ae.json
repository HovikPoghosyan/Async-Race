{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { fetchWinnersListPage, fetchNewWinner, fetchUpdateWinner, fetchDeleteWinner, fetchCarData } from 'CONSTANTS/Axios';\nimport { openWinnerPopup, setRace } from './garageListReducer';\nconst initialState = {\n  winnersList: [],\n  winner: undefined,\n  loading: false,\n  count: 0\n};\nconst newWinner = createAsyncThunk('winnersList/newWinner', async (carData, {\n  rejectWithValue,\n  dispatch\n}) => {\n  const response = await fetchNewWinner(carData);\n  if (response.isFailed) return rejectWithValue({\n    isFailed: true\n  });\n  dispatch(setRace('finished'));\n  dispatch(openWinnerPopup());\n  return response;\n});\nconst updateWinner = createAsyncThunk('winnersList/updateWinner', async (carData, {\n  rejectWithValue\n}) => {\n  const response = await fetchUpdateWinner(carData);\n  if (response.isFailed) return rejectWithValue({\n    isFailed: true\n  });\n  return response;\n});\nconst deleteWinner = createAsyncThunk('winnersList/deleteWinner', async (id, {\n  rejectWithValue\n}) => {\n  const response = await fetchDeleteWinner(id);\n  if (response.isFailed) return rejectWithValue({\n    isFailed: true\n  });\n  return response;\n});\nconst getWinnersListPage = createAsyncThunk('winnersList/getWinnersListPage', async (props, {\n  rejectWithValue,\n  getState\n}) => {\n  var _response$errors;\n  const response = await fetchWinnersListPage();\n  if (response.isFailed) return rejectWithValue({\n    isFailed: true,\n    errorMessage: response === null || response === void 0 ? void 0 : (_response$errors = response.errors) === null || _response$errors === void 0 ? void 0 : _response$errors.message\n  });\n  const {\n    garageList\n  } = getState().garageList;\n  const data = await Promise.all(response.data.map(async winner => {\n    var _fetchedCar, _fetchedCar2;\n    const car = garageList.find(car => car.id === winner.id);\n    let fetchedCar = {};\n    if (car) return {\n      ...winner,\n      name: (car === null || car === void 0 ? void 0 : car.name) || 'unknown',\n      color: (car === null || car === void 0 ? void 0 : car.color) || '#ccc'\n    };\n    fetchedCar = await fetchCarData(winner.id);\n    return {\n      ...winner,\n      name: ((_fetchedCar = fetchedCar) === null || _fetchedCar === void 0 ? void 0 : _fetchedCar.name) || 'unknown',\n      color: ((_fetchedCar2 = fetchedCar) === null || _fetchedCar2 === void 0 ? void 0 : _fetchedCar2.color) || '#ccc'\n    };\n  }));\n  return {\n    data,\n    headers: response.headers\n  };\n});\nconst winnersListReducer = createSlice({\n  name: 'winnersList',\n  initialState,\n  reducers: {\n    setWinnersList(state, {\n      payload\n    }) {\n      state.winnersList = payload;\n    },\n    setWinner(state, {\n      payload\n    }) {\n      state.winner = payload;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(newWinner.pending, (state, {\n      meta\n    }) => {\n      state.winner = meta.arg;\n    }).addCase(newWinner.fulfilled, (state, {\n      meta\n    }) => {\n      state.winnersList.push({\n        id: meta.arg.id,\n        time: meta.arg.time,\n        wins: 1,\n        name: meta.arg.name || 'car',\n        color: meta.arg.color || '#ccc'\n      });\n    }).addCase(updateWinner.fulfilled, (state, {\n      meta\n    }) => {\n      state.winnersList = state.winnersList.map(winner => winner.id === meta.arg.id ? {\n        ...winner,\n        ...meta.arg\n      } : winner);\n    }).addCase(deleteWinner.fulfilled, (state, {\n      meta\n    }) => {\n      console.log('meta delet arg winner: ', meta.arg);\n      state.winnersList = state.winnersList.filter(winner => winner.id !== meta.arg);\n    }).addCase(getWinnersListPage.pending, state => {\n      state.loading = true;\n    }).addCase(getWinnersListPage.fulfilled, (state, {\n      payload\n    }) => {\n      console.log('addWinnerList payload: ', payload.data);\n      state.winnersList = [...state.winnersList, ...payload.data].sort((carOne, carSecond) => carOne.id - carSecond.id);\n      state.count = payload.headers['x-total-count'];\n      state.loading = false;\n    }).addCase(getWinnersListPage.rejected, state => {\n      state.loading = false;\n    });\n  }\n});\nexport const {\n  setWinnersList,\n  setWinner\n} = winnersListReducer.actions;\nexport { updateWinner, getWinnersListPage, deleteWinner, newWinner };\nexport default winnersListReducer.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","fetchWinnersListPage","fetchNewWinner","fetchUpdateWinner","fetchDeleteWinner","fetchCarData","openWinnerPopup","setRace","initialState","winnersList","winner","undefined","loading","count","newWinner","carData","rejectWithValue","dispatch","response","isFailed","updateWinner","deleteWinner","id","getWinnersListPage","props","getState","_response$errors","errorMessage","errors","message","garageList","data","Promise","all","map","_fetchedCar","_fetchedCar2","car","find","fetchedCar","name","color","headers","winnersListReducer","reducers","setWinnersList","state","payload","setWinner","extraReducers","builder","addCase","pending","meta","arg","fulfilled","push","time","wins","console","log","filter","sort","carOne","carSecond","rejected","actions","reducer"],"sources":["C:/Users/Admin/Documents/GitHub/Async-Race/src/store/modules/winnersListReducer.ts"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\r\nimport { fetchWinnersListPage, fetchNewWinner, fetchUpdateWinner, fetchDeleteWinner, fetchCarData } from 'CONSTANTS/Axios';\r\nimport type { RootState } from 'store/configureReduxStore';\r\nimport { Car, openWinnerPopup, setRace } from './garageListReducer';\r\n\r\nexport interface Winner {\r\n   id: number;\r\n   wins: number;\r\n   time: number;\r\n   name: string;\r\n   color: string;\r\n}\r\n\r\ninterface WinnersState {\r\n   winnersList: Winner[];\r\n   winner?: Partial<Winner>;\r\n   loading: boolean;\r\n   count: number;\r\n}\r\n\r\nconst initialState: WinnersState = {\r\n   winnersList: [],\r\n   winner: undefined,\r\n   loading: false,\r\n   count: 0,\r\n};\r\n\r\nconst newWinner = createAsyncThunk<Winner, Partial<Winner>, { state: RootState; rejectValue: { isFailed: boolean } }>(\r\n   'winnersList/newWinner',\r\n   async (carData, { rejectWithValue, dispatch }) => {\r\n      const response = await fetchNewWinner(carData);\r\n      if (response.isFailed) return rejectWithValue({ isFailed: true });\r\n      dispatch(setRace('finished'));\r\n      dispatch(openWinnerPopup());\r\n\r\n      return response;\r\n   }\r\n);\r\n\r\nconst updateWinner = createAsyncThunk<Winner, Winner, { state: RootState; rejectValue: { isFailed: boolean } }>(\r\n   'winnersList/updateWinner',\r\n   async (carData, { rejectWithValue }) => {\r\n      const response = await fetchUpdateWinner(carData);\r\n      if (response.isFailed) return rejectWithValue({ isFailed: true });\r\n\r\n      return response;\r\n   }\r\n);\r\n\r\nconst deleteWinner = createAsyncThunk<number, number, { state: RootState; rejectValue: { isFailed: boolean } }>(\r\n   'winnersList/deleteWinner',\r\n   async (id, { rejectWithValue }) => {\r\n      const response = await fetchDeleteWinner(id);\r\n      if (response.isFailed) return rejectWithValue({ isFailed: true });\r\n\r\n      return response;\r\n   }\r\n);\r\n\r\nconst getWinnersListPage = createAsyncThunk<any, number, { state: RootState; rejectValue: { isFailed: boolean; errorMessage: string } }>(\r\n   'winnersList/getWinnersListPage',\r\n   async (props, { rejectWithValue, getState }) => {\r\n      const response = await fetchWinnersListPage();\r\n      if (response.isFailed) return rejectWithValue({ isFailed: true, errorMessage: response?.errors?.message });\r\n      const { garageList } = getState().garageList;\r\n      const data = await Promise.all(response.data.map(async (winner: Winner) => {\r\n         const car = garageList.find((car: Car) => car.id === winner.id);\r\n         let fetchedCar = {};\r\n         if( car ) return { ...winner, name: car?.name || 'unknown', color: car?.color || '#ccc' };\r\n         fetchedCar = await fetchCarData( winner.id );\r\n   \r\n         return { ...winner, name: fetchedCar?.name || 'unknown', color: fetchedCar?.color || '#ccc' };\r\n      }));\r\n\r\n      return {\r\n         data,\r\n         headers: response.headers\r\n      };\r\n   }\r\n);\r\n\r\nconst winnersListReducer = createSlice({\r\n   name: 'winnersList',\r\n   initialState,\r\n   reducers: {\r\n      setWinnersList(state, { payload }) {\r\n         state.winnersList = payload;\r\n      },\r\n      setWinner(state, { payload }) {\r\n         state.winner = payload;\r\n      },\r\n   },\r\n   extraReducers: (builder) => {\r\n      builder\r\n         .addCase(newWinner.pending, (state, { meta }) => {\r\n            state.winner = meta.arg;\r\n         })\r\n         .addCase(newWinner.fulfilled, (state, { meta }) => {\r\n            state.winnersList.push({\r\n               id: meta.arg.id!,\r\n               time: meta.arg.time!,\r\n               wins: 1,\r\n               name: meta.arg.name || 'car',\r\n               color: meta.arg.color || '#ccc',\r\n            });\r\n         })\r\n         .addCase(updateWinner.fulfilled, (state, { meta }) => {\r\n            state.winnersList = state.winnersList.map((winner) => (winner.id === meta.arg.id ? { ...winner, ...meta.arg } : winner));\r\n         })\r\n         .addCase(deleteWinner.fulfilled, (state, { meta }) => {\r\n            console.log('meta delet arg winner: ', meta.arg);\r\n            state.winnersList = state.winnersList.filter((winner) => winner.id !== meta.arg);\r\n         })\r\n         .addCase(getWinnersListPage.pending, (state) => {\r\n            state.loading = true;\r\n         })\r\n         .addCase(getWinnersListPage.fulfilled, (state, { payload }) => {\r\n            console.log('addWinnerList payload: ', payload.data)\r\n            state.winnersList = [\r\n               ...state.winnersList,\r\n               ...payload.data,\r\n            ].sort(( carOne, carSecond) => carOne.id - carSecond.id);\r\n            state.count = payload.headers['x-total-count'];\r\n            state.loading = false;\r\n         })\r\n         .addCase(getWinnersListPage.rejected, (state) => {\r\n            state.loading = false;\r\n         });\r\n   },\r\n});\r\n\r\nexport const { setWinnersList, setWinner } = winnersListReducer.actions;\r\nexport { updateWinner, getWinnersListPage, deleteWinner, newWinner };\r\nexport default winnersListReducer.reducer;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}