{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { getRandomCarName, getRandomColor } from 'CONSTANTS/CarData';\nimport { fetchGarageListPage, fetchNewCar, fetchDeleteCar, fetchUpdateCar } from 'CONSTANTS/Axios';\nimport { deleteWinner, updateWinner } from './winnersListReducer';\nconst initialState = {\n  garageList: [],\n  selectedCar: undefined,\n  loading: false,\n  race: 'stopped',\n  winnerPopup: false,\n  count: 0\n};\nconst generateCars = createAsyncThunk('garageList/generateCars', async (count, {\n  dispatch\n}) => {\n  for (let index = 0; index < count; index++) {\n    dispatch(addNewCar({\n      name: getRandomCarName(),\n      color: getRandomColor()\n    }));\n  }\n});\nconst addNewCar = createAsyncThunk('garageList/addNewCar', async (carData, {\n  rejectWithValue\n}) => {\n  const response = await fetchNewCar(carData);\n  if (response.isFailed) return rejectWithValue({\n    isFailed: true\n  });\n  return response;\n});\nconst updateCar = createAsyncThunk('list/updateCar', async (carData, {\n  rejectWithValue,\n  dispatch,\n  getState\n}) => {\n  const response = await fetchUpdateCar(carData);\n  const {\n    winnersList\n  } = getState().winnersList;\n  const carInWinnersList = winnersList.find(winner => winner.id === carData.id);\n  if (response !== null && response !== void 0 && response.isFailed) return rejectWithValue({\n    isFailed: true\n  });\n  if (carInWinnersList) dispatch(updateWinner({\n    ...carInWinnersList,\n    ...carData\n  })).unwrap();\n  return response;\n});\nconst deleteCar = createAsyncThunk('garageList/deleteCar', async (id, {\n  rejectWithValue,\n  getState,\n  dispatch\n}) => {\n  const response = await fetchDeleteCar(id);\n  const {\n    winnersList\n  } = getState().winnersList;\n  const carIsWinner = winnersList.some(winner => winner.id === id);\n  if (carIsWinner) {\n    dispatch(deleteWinner(id));\n  }\n  if (response.isFailed) return rejectWithValue({\n    isFailed: true\n  });\n  return response;\n});\nconst getGarageListPage = createAsyncThunk('garageList/getGarageList', async (pageNo, {\n  rejectWithValue\n}) => {\n  const response = await fetchGarageListPage(pageNo);\n  console.log('data: ', response);\n  if (response.isFailed) return rejectWithValue({\n    isFailed: true,\n    errorMessage: response.errors.message\n  });\n  return response.data;\n});\nconst garageListReducer = createSlice({\n  name: 'garageList',\n  initialState,\n  reducers: {\n    setSelectedCar(state, {\n      payload\n    }) {\n      state.selectedCar = payload;\n    },\n    setRace(state, {\n      payload\n    }) {\n      state.race = payload;\n    },\n    closeWinnerPopup(state) {\n      state.winnerPopup = false;\n    },\n    openWinnerPopup(state) {\n      state.winnerPopup = true;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(addNewCar.fulfilled, (state, {\n      meta\n    }) => {\n      state.garageList.push({\n        ...meta.arg,\n        id: state.garageList.length ? state.garageList[state.garageList.length - 1].id + 1 : 1\n      });\n    }).addCase(updateCar.fulfilled, (state, {\n      meta\n    }) => {\n      state.garageList = state.garageList.map(car => car.id === meta.arg.id ? {\n        ...car,\n        ...meta.arg\n      } : car);\n    }).addCase(deleteCar.fulfilled, (state, {\n      meta\n    }) => {\n      state.garageList = state.garageList.filter(car => car.id !== meta.arg);\n    }).addCase(getGarageListPage.pending, state => {\n      state.loading = true;\n    }).addCase(getGarageListPage.fulfilled, (state, {\n      payload\n    }) => {\n      state.garageList = [...state.garageList, ...payload];\n      state.loading = false;\n    }).addCase(getGarageListPage.rejected, state => {\n      state.loading = false;\n    });\n  }\n});\nexport const {\n  setSelectedCar,\n  closeWinnerPopup,\n  setRace,\n  openWinnerPopup\n} = garageListReducer.actions;\nexport { generateCars, addNewCar, updateCar, deleteCar, getGarageListPage };\nexport default garageListReducer.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","getRandomCarName","getRandomColor","fetchGarageListPage","fetchNewCar","fetchDeleteCar","fetchUpdateCar","deleteWinner","updateWinner","initialState","garageList","selectedCar","undefined","loading","race","winnerPopup","count","generateCars","dispatch","index","addNewCar","name","color","carData","rejectWithValue","response","isFailed","updateCar","getState","winnersList","carInWinnersList","find","winner","id","unwrap","deleteCar","carIsWinner","some","getGarageListPage","pageNo","console","log","errorMessage","errors","message","data","garageListReducer","reducers","setSelectedCar","state","payload","setRace","closeWinnerPopup","openWinnerPopup","extraReducers","builder","addCase","fulfilled","meta","push","arg","length","map","car","filter","pending","rejected","actions","reducer"],"sources":["C:/Users/Admin/Documents/GitHub/Async-Race/src/store/modules/garageListReducer.ts"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\r\nimport { getRandomCarName, getRandomColor } from 'CONSTANTS/CarData';\r\nimport { fetchGarageListPage, fetchNewCar, fetchDeleteCar, fetchUpdateCar } from 'CONSTANTS/Axios';\r\nimport type { RootState } from 'store/configureReduxStore';\r\nimport { deleteWinner, Winner, updateWinner } from './winnersListReducer';\r\n\r\nexport interface Car {\r\n   id: number;\r\n   name: string;\r\n   color: string;\r\n}\r\n\r\nexport interface CarData {\r\n   name: string;\r\n   color: string;\r\n}\r\n\r\ninterface GarageListState {\r\n   garageList: Car[];\r\n   selectedCar?: Car;\r\n   loading: boolean;\r\n   race: string;\r\n   winnerPopup: boolean;\r\n   count: number;\r\n}\r\n\r\nconst initialState: GarageListState = {\r\n   garageList: [],\r\n   selectedCar: undefined,\r\n   loading: false,\r\n   race: 'stopped',\r\n   winnerPopup: false,\r\n   count: 0,\r\n};\r\n\r\nconst generateCars = createAsyncThunk<void, number, { state: RootState; rejectValue: { isFailed: boolean } }>(\r\n   'garageList/generateCars',\r\n   async (count, { dispatch }) => {\r\n      for (let index = 0; index < count; index++) {\r\n         dispatch(\r\n            addNewCar({\r\n               name: getRandomCarName(),\r\n               color: getRandomColor(),\r\n            })\r\n         );\r\n      }\r\n   }\r\n);\r\n\r\nconst addNewCar = createAsyncThunk<CarData, CarData, { state: RootState; rejectValue: { isFailed: boolean } }>(\r\n   'garageList/addNewCar',\r\n   async (carData, { rejectWithValue }) => {\r\n      const response = await fetchNewCar(carData);\r\n      if (response.isFailed) return rejectWithValue({ isFailed: true });\r\n\r\n      return response;\r\n   }\r\n);\r\n\r\nconst updateCar = createAsyncThunk<Car, Car, { state: RootState; rejectValue: { isFailed: boolean } }>(\r\n   'list/updateCar',\r\n   async (carData, { rejectWithValue, dispatch, getState }) => {\r\n      const response = await fetchUpdateCar(carData);\r\n      const { winnersList } = getState().winnersList;\r\n      const carInWinnersList = winnersList.find((winner: Winner) => winner.id === carData.id);\r\n      if (response?.isFailed) return rejectWithValue({ isFailed: true });\r\n      if (carInWinnersList) dispatch(updateWinner({ ...carInWinnersList, ...carData })).unwrap();\r\n\r\n      return response;\r\n   }\r\n);\r\n\r\nconst deleteCar = createAsyncThunk<number, number, { state: RootState; rejectValue: { isFailed: boolean } }>(\r\n   'garageList/deleteCar',\r\n   async (id, { rejectWithValue, getState, dispatch }) => {\r\n      const response = await fetchDeleteCar(id);\r\n      const { winnersList } = getState().winnersList;\r\n      const carIsWinner = winnersList.some((winner: Winner) => winner.id === id);\r\n      if (carIsWinner) {\r\n         dispatch(deleteWinner(id));\r\n      }\r\n      if (response.isFailed) return rejectWithValue({ isFailed: true });\r\n\r\n      return response;\r\n   }\r\n);\r\n\r\nconst getGarageListPage = createAsyncThunk<any, number, { state: RootState; rejectValue: { isFailed: boolean; errorMessage: string } }>(\r\n   'garageList/getGarageList',\r\n   async ( pageNo, { rejectWithValue }) => {\r\n      const response = await fetchGarageListPage(pageNo);\r\n      console.log('data: ', response)\r\n      if (response.isFailed) return rejectWithValue({ isFailed: true, errorMessage: response.errors.message });\r\n\r\n      return response.data;\r\n   }\r\n);\r\n\r\nconst garageListReducer = createSlice({\r\n   name: 'garageList',\r\n   initialState,\r\n   reducers: {\r\n      setSelectedCar(state, { payload }) {\r\n         state.selectedCar = payload;\r\n      },\r\n      setRace(state, { payload }) {\r\n         state.race = payload;\r\n      },\r\n      closeWinnerPopup(state) {\r\n         state.winnerPopup = false;\r\n      },\r\n      openWinnerPopup(state) {\r\n         state.winnerPopup = true;\r\n      },\r\n   },\r\n   extraReducers: (builder) => {\r\n      builder\r\n         .addCase(addNewCar.fulfilled, (state, { meta }) => {\r\n            state.garageList.push({\r\n               ...meta.arg,\r\n               id: state.garageList.length ? state.garageList[state.garageList.length - 1].id + 1 : 1,\r\n            });\r\n         })\r\n         .addCase(updateCar.fulfilled, (state, { meta }) => {\r\n            state.garageList = state.garageList.map((car) => (car.id === meta.arg.id ? { ...car, ...meta.arg } : car));\r\n         })\r\n         .addCase(deleteCar.fulfilled, (state, { meta }) => {\r\n            state.garageList = state.garageList.filter((car) => car.id !== meta.arg);\r\n         })\r\n         .addCase(getGarageListPage.pending, (state) => {\r\n            state.loading = true;\r\n         })\r\n         .addCase(getGarageListPage.fulfilled, (state, { payload }) => {\r\n            state.garageList = [\r\n               ...state.garageList,\r\n               ...payload,\r\n            ];\r\n            state.loading = false;\r\n         })\r\n         .addCase(getGarageListPage.rejected, (state) => {\r\n            state.loading = false;\r\n         });\r\n   },\r\n});\r\n\r\nexport const { setSelectedCar, closeWinnerPopup, setRace, openWinnerPopup } = garageListReducer.actions;\r\nexport { generateCars, addNewCar, updateCar, deleteCar, getGarageListPage };\r\nexport default garageListReducer.reducer;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}