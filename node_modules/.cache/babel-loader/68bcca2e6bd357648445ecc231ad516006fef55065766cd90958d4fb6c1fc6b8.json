{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { getRandomCarName, getRandomColor } from 'CONSTANTS/CarData';\nimport { fetchGarageList, fetchNewCar, fetchDeleteCar, fetchUpdateCar } from 'CONSTANTS/Axios';\nimport { deleteWinner, updateWinner } from './winnersListReducer';\nconst initialState = {\n  garageList: [],\n  selectedCar: undefined,\n  loading: false,\n  race: 'stopped',\n  winnerPopup: false\n};\nconst generateCars = createAsyncThunk('garageList/generateCars', async (count, {\n  dispatch\n}) => {\n  for (let index = 0; index < count; index++) {\n    dispatch(addNewCar({\n      name: getRandomCarName(),\n      color: getRandomColor()\n    }));\n  }\n});\nconst addNewCar = createAsyncThunk('garageList/addNewCar', async (carData, {\n  rejectWithValue\n}) => {\n  const data = await fetchNewCar(carData);\n  if (data.isFailed) return rejectWithValue({\n    isFailed: true\n  });\n  return data;\n});\nconst updateCar = createAsyncThunk('list/updateCar', async (carData, {\n  rejectWithValue,\n  dispatch,\n  getState\n}) => {\n  const data = await fetchUpdateCar(carData);\n  const {\n    winnersList\n  } = getState().winnersList;\n  const carInWinnersList = winnersList.find(winner => winner.id === carData.id);\n  if (data !== null && data !== void 0 && data.isFailed) return rejectWithValue({\n    isFailed: true\n  });\n  if (carInWinnersList) dispatch(updateWinner({\n    ...carInWinnersList,\n    ...carData\n  })).unwrap();\n  return data;\n});\nconst deleteCar = createAsyncThunk('garageList/deleteCar', async (id, {\n  rejectWithValue,\n  getState,\n  dispatch\n}) => {\n  const data = await fetchDeleteCar(id);\n  const {\n    winnersList\n  } = getState().winnersList;\n  const carIsWinner = winnersList.some(winner => winner.id === id);\n  console.log('carIsWinner: ', carIsWinner);\n  if (carIsWinner) {\n    dispatch(deleteWinner(id));\n  }\n  if (data.isFailed) return rejectWithValue({\n    isFailed: true\n  });\n  return data;\n});\nconst getGarageLists = createAsyncThunk('garageList/getGarageLists', async (props, {\n  rejectWithValue\n}) => {\n  const data = await fetchGarageList();\n  if (data.isFailed) return rejectWithValue({\n    isFailed: true\n  });\n  return data;\n});\nconst garageListReducer = createSlice({\n  name: 'garageList',\n  initialState,\n  reducers: {\n    setSelectedCar(state, {\n      payload\n    }) {\n      state.selectedCar = payload;\n    },\n    setRace(state, {\n      payload\n    }) {\n      state.race = payload;\n    },\n    closeWinnerPopup(state) {\n      state.winnerPopup = false;\n    },\n    openWinnerPopup(state) {\n      state.winnerPopup = true;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(addNewCar.fulfilled, (state, {\n      meta\n    }) => {\n      state.garageList.push({\n        ...meta.arg,\n        id: state.garageList.length ? state.garageList[state.garageList.length - 1].id + 1 : 1\n      });\n    }).addCase(updateCar.fulfilled, (state, {\n      meta\n    }) => {\n      state.garageList = state.garageList.map(car => car.id === meta.arg.id ? {\n        ...car,\n        ...meta.arg\n      } : car);\n    }).addCase(deleteCar.fulfilled, (state, {\n      meta\n    }) => {\n      state.garageList = state.garageList.filter(car => car.id !== meta.arg);\n    }).addCase(getGarageLists.pending, state => {\n      state.loading = true;\n    }).addCase(getGarageLists.fulfilled, (state, {\n      payload\n    }) => {\n      state.garageList = payload;\n      state.loading = false;\n    }).addCase(getGarageLists.rejected, state => {\n      state.loading = false;\n    });\n  }\n});\nexport const {\n  setSelectedCar,\n  closeWinnerPopup,\n  setRace,\n  openWinnerPopup\n} = garageListReducer.actions;\nexport { generateCars, addNewCar, updateCar, deleteCar, getGarageLists };\nexport default garageListReducer.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","getRandomCarName","getRandomColor","fetchGarageList","fetchNewCar","fetchDeleteCar","fetchUpdateCar","deleteWinner","updateWinner","initialState","garageList","selectedCar","undefined","loading","race","winnerPopup","generateCars","count","dispatch","index","addNewCar","name","color","carData","rejectWithValue","data","isFailed","updateCar","getState","winnersList","carInWinnersList","find","winner","id","unwrap","deleteCar","carIsWinner","some","console","log","getGarageLists","props","garageListReducer","reducers","setSelectedCar","state","payload","setRace","closeWinnerPopup","openWinnerPopup","extraReducers","builder","addCase","fulfilled","meta","push","arg","length","map","car","filter","pending","rejected","actions","reducer"],"sources":["C:/Users/Admin/Documents/GitHub/Async-Race/src/store/modules/garageListReducer.ts"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { getRandomCarName, getRandomColor } from 'CONSTANTS/CarData';\nimport { fetchGarageList, fetchNewCar, fetchDeleteCar, fetchUpdateCar } from 'CONSTANTS/Axios';\nimport type { RootState } from 'store/configureReduxStore';\nimport { deleteWinner, Winner, updateWinner } from './winnersListReducer';\n\nexport interface Car {\n   id: number;\n   name: string;\n   color: string;\n}\n\nexport interface CarData {\n   name: string;\n   color: string;\n}\n\ninterface GarageListState {\n   garageList: Car[];\n   selectedCar?: Car;\n   loading: boolean;\n   race: string;\n   winnerPopup: boolean;\n}\n\nconst initialState: GarageListState = {\n   garageList: [],\n   selectedCar: undefined,\n   loading: false,\n   race: 'stopped',\n   winnerPopup: false,\n};\n\nconst generateCars = createAsyncThunk<void, number, { state: RootState; rejectValue: { isFailed: boolean } }>(\n   'garageList/generateCars',\n   async (count, { dispatch }) => {\n      for (let index = 0; index < count; index++) {\n         dispatch(\n            addNewCar({\n               name: getRandomCarName(),\n               color: getRandomColor(),\n            })\n         );\n      }\n   }\n);\n\nconst addNewCar = createAsyncThunk<CarData, CarData, { state: RootState; rejectValue: { isFailed: boolean } }>(\n   'garageList/addNewCar',\n   async (carData, { rejectWithValue }) => {\n      const data = await fetchNewCar(carData);\n      if (data.isFailed) return rejectWithValue({ isFailed: true });\n\n      return data;\n   }\n);\n\nconst updateCar = createAsyncThunk<Car, Car, { state: RootState; rejectValue: { isFailed: boolean } }>(\n   'list/updateCar',\n   async (carData, { rejectWithValue, dispatch, getState }) => {\n      const data = await fetchUpdateCar(carData);\n      const { winnersList } = getState().winnersList;\n      const carInWinnersList = winnersList.find((winner: Winner) => winner.id === carData.id);\n      if (data?.isFailed) return rejectWithValue({ isFailed: true });\n      if (carInWinnersList) dispatch(updateWinner({ ...carInWinnersList, ...carData })).unwrap();\n\n      return data;\n   }\n);\n\nconst deleteCar = createAsyncThunk<number, number, { state: RootState; rejectValue: { isFailed: boolean } }>(\n   'garageList/deleteCar',\n   async (id, { rejectWithValue, getState, dispatch }) => {\n      const data = await fetchDeleteCar(id);\n      const { winnersList } = getState().winnersList;\n      const carIsWinner = winnersList.some((winner: Winner) => winner.id === id);\n      console.log('carIsWinner: ', carIsWinner);\n      if (carIsWinner) {\n         dispatch(deleteWinner(id));\n      }\n      if (data.isFailed) return rejectWithValue({ isFailed: true });\n\n      return data;\n   }\n);\n\nconst getGarageLists = createAsyncThunk<Car[], void, { state: RootState; rejectValue: { isFailed: boolean } }>(\n   'garageList/getGarageLists',\n   async (props, { rejectWithValue }) => {\n      const data = await fetchGarageList();\n      if (data.isFailed) return rejectWithValue({ isFailed: true,  });\n\n      return data;\n   }\n);\n\nconst garageListReducer = createSlice({\n   name: 'garageList',\n   initialState,\n   reducers: {\n      setSelectedCar(state, { payload }) {\n         state.selectedCar = payload;\n      },\n      setRace(state, { payload }) {\n         state.race = payload;\n      },\n      closeWinnerPopup(state) {\n         state.winnerPopup = false;\n      },\n      openWinnerPopup(state) {\n         state.winnerPopup = true;\n      },\n   },\n   extraReducers: (builder) => {\n      builder\n         .addCase(addNewCar.fulfilled, (state, { meta }) => {\n            state.garageList.push({\n               ...meta.arg,\n               id: state.garageList.length ? state.garageList[state.garageList.length - 1].id + 1 : 1,\n            });\n         })\n         .addCase(updateCar.fulfilled, (state, { meta }) => {\n            state.garageList = state.garageList.map((car) => (car.id === meta.arg.id ? { ...car, ...meta.arg } : car));\n         })\n         .addCase(deleteCar.fulfilled, (state, { meta }) => {\n            state.garageList = state.garageList.filter((car) => car.id !== meta.arg);\n         })\n         .addCase(getGarageLists.pending, (state) => {\n            state.loading = true;\n         })\n         .addCase(getGarageLists.fulfilled, (state, { payload }) => {\n            state.garageList = payload;\n            state.loading = false;\n         })\n         .addCase(getGarageLists.rejected, (state) => {\n            state.loading = false;\n         });\n   },\n});\n\nexport const { setSelectedCar, closeWinnerPopup, setRace, openWinnerPopup } = garageListReducer.actions;\nexport { generateCars, addNewCar, updateCar, deleteCar, getGarageLists };\nexport default garageListReducer.reducer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}