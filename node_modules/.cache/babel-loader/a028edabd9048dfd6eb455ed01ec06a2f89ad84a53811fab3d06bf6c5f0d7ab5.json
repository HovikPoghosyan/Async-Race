{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { getRandomCarName, getRandomColor } from 'CONSTANTS/CarData';\nimport { fetchGarageList, fetchWinnersList, fetchNewCar, fetchDeleteCar, fetchUpdateCar } from 'CONSTANTS/Axios';\nconst generateCars = createAsyncThunk('list/generateCars', async (count, {\n  rejectWithValue,\n  dispatch\n}) => {\n  for (let index = 0; index < count; index++) {\n    const data = await fetchNewCar({\n      name: getRandomCarName(),\n      color: getRandomColor()\n    });\n    if (data.isFailed) return rejectWithValue();\n  }\n  dispatch(getGarageLists()).unwrap();\n  return;\n});\nconst addNewCar = createAsyncThunk('list/addNewCar', async (carData, {\n  rejectWithValue,\n  dispatch\n}) => {\n  const data = await fetchNewCar(carData);\n  if (data.isFailed) return rejectWithValue();\n  dispatch(getGarageLists()).unwrap();\n  return data;\n});\nconst updateCar = createAsyncThunk('list/updateCar', async (carData, {\n  rejectWithValue,\n  dispatch\n}) => {\n  const data = await fetchUpdateCar(carData);\n  if (data !== null && data !== void 0 && data.isFailed) return rejectWithValue();\n  dispatch(getGarageLists()).unwrap();\n  return null;\n});\nconst deleteCar = createAsyncThunk('list/deleteCar', async (id, {\n  rejectWithValue,\n  dispatch\n}) => {\n  const data = await fetchDeleteCar(id);\n  if (data.isFailed) return rejectWithValue();\n  dispatch(getGarageLists()).unwrap();\n  return data;\n});\nconst getGarageLists = createAsyncThunk('list/getGarageLists', async (props, {\n  rejectWithValue,\n  dispatch\n}) => {\n  const data = await fetchGarageList();\n  if (data.isFailed) return rejectWithValue();\n  dispatch(getWinnersLists()).unwrap();\n  return data;\n});\nconst getWinnersLists = createAsyncThunk('list/getWinnersLists', async (props, {\n  rejectWithValue\n}) => {\n  const data = await fetchWinnersList();\n  if (data.isFailed) return rejectWithValue();\n  return data;\n});\nconst initialState = {\n  garageList: [],\n  winnersList: [],\n  selectedCar: undefined,\n  loading: false,\n  race: 'stopped',\n  winner: undefined\n};\nconst appSlice = createSlice({\n  name: 'list',\n  initialState,\n  reducers: {\n    setSelectedCar(state, {\n      payload\n    }) {\n      state.selectedCar = payload;\n    },\n    setRace(state, {\n      payload\n    }) {\n      if (payload != 'finished') state.winner = undefined;\n      state.race = payload;\n    },\n    setWinner(state, {\n      payload\n    }) {\n      state.race = undefined;\n      state.winner = payload;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(deleteCar.pending, (state, {\n      meta\n    }) => {\n      var _state$selectedCar;\n      if (meta.arg == (state === null || state === void 0 ? void 0 : (_state$selectedCar = state.selectedCar) === null || _state$selectedCar === void 0 ? void 0 : _state$selectedCar.id)) {\n        state.selectedCar = undefined;\n      }\n      state.loading = true;\n    }).addCase(generateCars.pending, state => {\n      state.loading = true;\n    }).addCase(addNewCar.pending, state => {\n      state.loading = true;\n    }).addCase(updateCar.pending, state => {\n      state.loading = true;\n    }).addCase(getGarageLists.pending, state => {\n      state.loading = true;\n    }).addCase(getGarageLists.fulfilled, (state, {\n      payload\n    }) => {\n      state.garageList = payload;\n    }).addCase(getWinnersLists.pending, state => {\n      state.loading = true;\n    }).addCase(getWinnersLists.fulfilled, (state, {\n      payload\n    }) => {\n      state.winnersList = payload.map(winner => {\n        var _car$name, _car$color;\n        const car = state.garageList.find(current => current.id === winner.id);\n        if (car !== null && car !== void 0 && car.name && car !== null && car !== void 0 && car.color) return {\n          ...winner,\n          name: (_car$name = car === null || car === void 0 ? void 0 : car.name) !== null && _car$name !== void 0 ? _car$name : 'Unknown',\n          color: (_car$color = car === null || car === void 0 ? void 0 : car.color) !== null && _car$color !== void 0 ? _car$color : '#000'\n        };\n      });\n      state.loading = false;\n    }).addCase(getWinnersLists.rejected, state => {\n      state.loading = false;\n    });\n  }\n});\nexport const {\n  setRace,\n  setWinner,\n  setSelectedCar\n} = appSlice.actions;\nexport { getGarageLists, getWinnersLists, generateCars, addNewCar, updateCar, deleteCar };\nexport default appSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","getRandomCarName","getRandomColor","fetchGarageList","fetchWinnersList","fetchNewCar","fetchDeleteCar","fetchUpdateCar","generateCars","count","rejectWithValue","dispatch","index","data","name","color","isFailed","getGarageLists","unwrap","addNewCar","carData","updateCar","deleteCar","id","props","getWinnersLists","initialState","garageList","winnersList","selectedCar","undefined","loading","race","winner","appSlice","reducers","setSelectedCar","state","payload","setRace","setWinner","extraReducers","builder","addCase","pending","meta","_state$selectedCar","arg","fulfilled","map","_car$name","_car$color","car","find","current","rejected","actions","reducer"],"sources":["C:/Users/Admin/Documents/GitHub/Async-Race/src/store/modules/listReducer.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n\nimport { getRandomCarName, getRandomColor } from 'CONSTANTS/CarData'\n\nimport { fetchGarageList, fetchWinnersList, fetchNewCar, fetchDeleteCar, fetchUpdateCar } from 'CONSTANTS/Axios';\n\nconst generateCars = createAsyncThunk(\n   'list/generateCars',\n   async ( count, { rejectWithValue, dispatch }) => {\n      for ( let index = 0; index < count; index++ ) {\n         const data = await fetchNewCar({\n            name: getRandomCarName(),\n            color: getRandomColor(),\n         });\n\n         if ( data.isFailed ) return rejectWithValue();\n      }\n      \n      dispatch( getGarageLists() ).unwrap();\n\n      return;\n   }\n);\n\nconst addNewCar = createAsyncThunk(\n   'list/addNewCar',\n   async ( carData, { rejectWithValue, dispatch }) => {\n      const data = await fetchNewCar( carData );\n      if ( data.isFailed ) return rejectWithValue();\n      \n      dispatch( getGarageLists() ).unwrap();\n\n      return data;\n   }\n);\n\nconst updateCar = createAsyncThunk(\n   'list/updateCar',\n   async ( carData, { rejectWithValue, dispatch }) => {\n      const data = await fetchUpdateCar( carData );\n      if ( data?.isFailed ) return rejectWithValue();\n\n      dispatch( getGarageLists() ).unwrap();\n\n      return null;\n   }\n);\n\nconst deleteCar = createAsyncThunk(\n   'list/deleteCar',\n   async ( id, { rejectWithValue, dispatch }) => {\n      const data = await fetchDeleteCar( id );\n      if ( data.isFailed ) return rejectWithValue();\n      \n      dispatch( getGarageLists() ).unwrap();\n\n      return data;\n   }\n);\n\nconst getGarageLists = createAsyncThunk(\n   'list/getGarageLists',\n   async ( props, { rejectWithValue, dispatch }) => {\n      const data = await fetchGarageList();\n      if ( data.isFailed ) return rejectWithValue();\n         \n      dispatch( getWinnersLists() ).unwrap();\n\n      return data;\n   }\n);\n\nconst getWinnersLists = createAsyncThunk(\n   'list/getWinnersLists',\n   async ( props, { rejectWithValue }) => {\n      const data = await fetchWinnersList();\n      if ( data.isFailed ) return rejectWithValue();\n\n      return data;\n   }\n);\n\n\nconst initialState = {\n   garageList: [],\n   winnersList: [],\n   selectedCar: undefined,\n   loading: false,\n   race: 'stopped',\n   winner: undefined,\n};\n   \nconst appSlice = createSlice({\n   name: 'list',\n   initialState,\n   reducers: {\n      setSelectedCar( state, { payload } ) {\n         state.selectedCar = payload;\n      },\n      setRace( state, { payload } ) {\n         if ( payload != 'finished' ) state.winner = undefined;\n         state.race = payload\n      },\n      setWinner( state, { payload } ) {\n         state.race = undefined;\n         state.winner = payload;\n      }\n   },\n   extraReducers: ( builder ) => {\n      builder\n      .addCase( deleteCar.pending, ( state, { meta } ) => {\n         if ( meta.arg == state?.selectedCar?.id ) {\n            state.selectedCar = undefined;\n         } \n         state.loading = true;\n      })\n      .addCase( generateCars.pending, ( state ) => {\n         state.loading = true;\n      })\n      .addCase( addNewCar.pending, ( state ) => {\n         state.loading = true;\n      })\n      .addCase( updateCar.pending, ( state ) => {\n         state.loading = true;\n      })\n      .addCase( getGarageLists.pending, ( state ) => {\n         state.loading = true;\n      })\n      .addCase( getGarageLists.fulfilled, ( state, { payload } ) => {\n         state.garageList = payload;\n      })\n      .addCase( getWinnersLists.pending, ( state ) => {\n         state.loading = true;\n      })\n      .addCase( getWinnersLists.fulfilled, ( state, { payload } ) => {\n         state.winnersList = payload.map( winner => {\n            const car = state.garageList.find( current => current.id === winner.id );\n            if ( car?.name && car?.color ) return {\n               ...winner,\n               name: car?.name ?? 'Unknown',\n               color: car?.color ?? '#000',\n            };\n         }) ;\n         state.loading = false;\n      })\n      .addCase( getWinnersLists.rejected, ( state ) => {\n         state.loading = false;\n      })\n   }\n});\n\nexport const { \n   setRace,\n   setWinner,\n   setSelectedCar,\n} = appSlice.actions;\nexport { \n   getGarageLists,\n   getWinnersLists,\n   generateCars,\n   addNewCar,\n   updateCar,\n   deleteCar,\n};\nexport default appSlice.reducer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}