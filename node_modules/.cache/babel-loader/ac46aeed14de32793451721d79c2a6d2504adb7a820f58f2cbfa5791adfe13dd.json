{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { useAppDispatch, useAppSelector } from 'store/hooks/hooks';\nimport { handleGarageRaceStatusesHistory } from 'Storages/SessionStorage';\nimport { fetchCarEngineMode, fetchCarDrive } from 'CONSTANTS/Axios';\nimport { deleteCar, newWinner, setSelectedCar, updateWinner } from 'store/modules/listReducer';\nimport styles from './GarageTableRow.module.scss';\nfunction UseGarageTableRow(carData) {\n  _s();\n  const dispatch = useAppDispatch();\n  const {\n    id\n  } = carData;\n  const {\n    selectedCar,\n    race,\n    winner,\n    winnersList\n  } = useAppSelector(store => store.list);\n  const [time, setTime] = useState(0);\n  const [raceStatus, setRaceStatus] = useState(handleGarageRaceStatusesHistory('getItem', {\n    key: id\n  }) || 'stopped');\n  const animationStyle = {\n    animationName: styles.moveToEnd,\n    animationDuration: `${time}s`,\n    animationTimingFunction: 'linear',\n    animationDelay: '4.2s',\n    animationFillMode: 'forwards',\n    animationPlayState: raceStatus === 'brokenEngine' ? 'paused' : 'running'\n  };\n  useEffect(() => {\n    if (raceStatus !== 'started') {\n      handleGarageRaceStatusesHistory('update', {\n        key: id,\n        newValue: raceStatus\n      });\n    }\n  }, [raceStatus]);\n  const handleStart = () => {\n    setRaceStatus('stopped');\n    setTimeout(() => {\n      setRaceStatus('started');\n      if ((selectedCar === null || selectedCar === void 0 ? void 0 : selectedCar.id) == id) dispatch(setSelectedCar(undefined));\n      fetchCarEngineMode(id, 'started').then(response => {\n        if (!(response !== null && response !== void 0 && response.isFailed)) {\n          const raceTime = response.distance / (response.velocity * 500);\n          setTimeout(() => fetchCarDrive(id).then(response => {\n            if (response !== null && response !== void 0 && response.isFailed && response.status == 500) {\n              setRaceStatus('brokenEngine');\n            }\n          }), 4200);\n          setTime(raceTime);\n        } else setRaceStatus('stopped');\n      });\n    }, 0);\n  };\n  const handleStop = () => {\n    fetchCarEngineMode(id, 'stopped');\n    setRaceStatus('stopped');\n  };\n  const toggleSelect = () => dispatch(setSelectedCar((selectedCar === null || selectedCar === void 0 ? void 0 : selectedCar.id) == id ? undefined : carData));\n  const handleDelete = () => dispatch(deleteCar(id));\n  const handleFinish = () => {\n    if (race && !winner) {\n      const lastWin = winnersList.find(car => car.id === id);\n      const timeNewValue = Number((time * 5).toFixed(3));\n      if (lastWin) dispatch(updateWinner({\n        ...lastWin,\n        time: Math.min(lastWin.time, timeNewValue)\n      }));else dispatch(newWinner({\n        ...carData,\n        time: timeNewValue\n      }));\n    }\n    setRaceStatus('finished');\n  };\n  useEffect(() => {\n    if (race && race != 'finished') race === 'started' ? handleStart() : handleStop();\n  }, [race]);\n  return {\n    handleStart,\n    handleStop,\n    toggleSelect,\n    handleDelete,\n    raceStatus,\n    animationStyle,\n    handleFinish\n  };\n}\n_s(UseGarageTableRow, \"c2QvHm2/IfCx7keZkEdrG5QwOtM=\", false, function () {\n  return [useAppDispatch, useAppSelector];\n});\n_c = UseGarageTableRow;\nexport default UseGarageTableRow;\nvar _c;\n$RefreshReg$(_c, \"UseGarageTableRow\");","map":{"version":3,"names":["useState","useEffect","useAppDispatch","useAppSelector","handleGarageRaceStatusesHistory","fetchCarEngineMode","fetchCarDrive","deleteCar","newWinner","setSelectedCar","updateWinner","styles","UseGarageTableRow","carData","_s","dispatch","id","selectedCar","race","winner","winnersList","store","list","time","setTime","raceStatus","setRaceStatus","key","animationStyle","animationName","moveToEnd","animationDuration","animationTimingFunction","animationDelay","animationFillMode","animationPlayState","newValue","handleStart","setTimeout","undefined","then","response","isFailed","raceTime","distance","velocity","status","handleStop","toggleSelect","handleDelete","handleFinish","lastWin","find","car","timeNewValue","Number","toFixed","Math","min","_c","$RefreshReg$"],"sources":["C:/Users/Admin/Documents/GitHub/Async-Race/src/components/commons/GarageTableRow/UseGarageTableRow.ts"],"sourcesContent":["import React, { FC, useState, useEffect, CSSProperties } from 'react';\nimport { useAppDispatch, useAppSelector } from 'store/hooks/hooks';\n\nimport { handleGarageRaceStatusesHistory } from 'Storages/SessionStorage';\nimport { fetchCarEngineMode, fetchCarDrive } from 'CONSTANTS/Axios';\nimport {\n   deleteCar,\n   newWinner,\n   setSelectedCar,\n   updateWinner,\n} from 'store/modules/listReducer';\n\nimport styles from './GarageTableRow.module.scss';\n\ninterface CarData {\n   id: number;\n   name: string;\n   color: string;\n}\n\ntype RaceStatus = 'stopped' | 'started' | 'finished' | 'brokenEngine';\n\ninterface UseGarageTableRowReturn {\n   handleStart: () => void;\n   handleStop: () => void;\n   toggleSelect: () => void;\n   handleDelete: () => void;\n   raceStatus: RaceStatus;\n   animationStyle: CSSProperties;\n   handleFinish: () => void;\n}\n\nfunction UseGarageTableRow(carData: CarData): UseGarageTableRowReturn {\n   const dispatch = useAppDispatch();\n   const { id } = carData;\n   const { selectedCar, race, winner, winnersList } = useAppSelector(\n      (store) => store.list\n   );\n   const [time, setTime] = useState<number>(0);\n   const [raceStatus, setRaceStatus] = useState<RaceStatus>(\n      (handleGarageRaceStatusesHistory('getItem', { key: id }) as RaceStatus) ||\n         'stopped'\n   );\n   const animationStyle: CSSProperties = {\n      animationName: styles.moveToEnd,\n      animationDuration: `${time}s`,\n      animationTimingFunction: 'linear',\n      animationDelay: '4.2s',\n      animationFillMode: 'forwards',\n      animationPlayState: raceStatus === 'brokenEngine' ? 'paused' : 'running',\n   };\n   useEffect(() => {\n      if (raceStatus !== 'started') {\n         handleGarageRaceStatusesHistory('update', {\n            key: id,\n            newValue: raceStatus,\n         });\n      }\n   }, [raceStatus]);\n\n   const handleStart = () => {\n      setRaceStatus('stopped');\n      setTimeout(() => {\n         setRaceStatus('started');\n         if (selectedCar?.id == id) dispatch(setSelectedCar(undefined));\n         fetchCarEngineMode(id, 'started').then((response) => {\n            if (!response?.isFailed) {\n               const raceTime = response.distance / (response.velocity * 500);\n               setTimeout(\n                  () =>\n                     fetchCarDrive(id).then((response) => {\n                        if (response?.isFailed && response.status == 500) {\n                           setRaceStatus('brokenEngine');\n                        }\n                     }),\n                  4200\n               );\n\n               setTime(raceTime);\n            } else setRaceStatus('stopped');\n         });\n      }, 0);\n   };\n   const handleStop = () => {\n      fetchCarEngineMode(id, 'stopped');\n      setRaceStatus('stopped');\n   };\n   const toggleSelect = () =>\n      dispatch(setSelectedCar(selectedCar?.id == id ? undefined : carData));\n   const handleDelete = () => dispatch(deleteCar(id));\n   const handleFinish = () => {\n      if (race && !winner) {\n         const lastWin = winnersList.find((car) => car.id === id);\n         const timeNewValue = Number((time * 5).toFixed(3));\n         if (lastWin)\n            dispatch(\n               updateWinner({\n                  ...lastWin,\n                  time: Math.min(lastWin.time, timeNewValue),\n               })\n            );\n         else dispatch(newWinner({ ...carData, time: timeNewValue }));\n      }\n      setRaceStatus('finished');\n   };\n\n   useEffect(() => {\n      if (race && race != 'finished')\n         race === 'started' ? handleStart() : handleStop();\n   }, [race]);\n\n   return {\n      handleStart,\n      handleStop,\n      toggleSelect,\n      handleDelete,\n      raceStatus,\n      animationStyle,\n      handleFinish,\n   };\n}\n\nexport default UseGarageTableRow;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}