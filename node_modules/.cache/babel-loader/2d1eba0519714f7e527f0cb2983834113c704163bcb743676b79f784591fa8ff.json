{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { handleGarageRaceStatusesHistory } from 'Storages/SessionStorage';\nimport { fetchCarEngineMode, fetchCarDrive } from 'CONSTANTS/Axios';\nimport { deleteCar, newWinner, setSelectedCar, updateWinner } from 'store/modules/listReducer';\nimport styles from './GarageTableRow.module.scss';\nfunction UseGarageTableRow(carData) {\n  _s();\n  const dispatch = useDispatch();\n  const {\n    id\n  } = carData;\n  const {\n    selectedCar,\n    race,\n    winner,\n    winnersList\n  } = useSelector(store => store.list);\n  const [time, setTime] = useState(0);\n  const [raceStatus, setRaceStatus] = useState(handleGarageRaceStatusesHistory('getItem', {\n    key: id\n  }) || 'stopped');\n  const animationStyle = {\n    animationName: styles.moveToEnd,\n    animationDuration: `${time}s`,\n    animationTimingFunction: 'linear',\n    animationDelay: '4.2s',\n    animationFillMode: 'forwards',\n    animationPlayState: raceStatus === 'brokenEngine' ? 'paused' : 'running'\n  };\n  useEffect(() => {\n    handleGarageRaceStatusesHistory('update', {\n      key: id,\n      newValue: raceStatus != 'stopped' ? 'finished' : 'stopped'\n    });\n  }, [raceStatus]);\n  const handleStart = () => {\n    setRaceStatus('stopped');\n    setTimeout(() => {\n      setRaceStatus('started');\n      if ((selectedCar === null || selectedCar === void 0 ? void 0 : selectedCar.id) == id) dispatch(setSelectedCar(undefined));\n      fetchCarEngineMode(id, 'started').then(response => {\n        if (!(response !== null && response !== void 0 && response.isFailed)) {\n          const raceTime = response.distance / (response.velocity * 500);\n          setTimeout(() => fetchCarDrive(id).then(response => {\n            if (response !== null && response !== void 0 && response.isFailed && response.status == 500) {\n              setRaceStatus('brokenEngine');\n            }\n          }), 4200);\n          setTime(raceTime);\n        } else setRaceStatus('stopped');\n      });\n    }, 0);\n  };\n  const handleStop = () => {\n    fetchCarEngineMode(id, 'stopped');\n    setRaceStatus('stopped');\n  };\n  const toggleSelect = () => dispatch(setSelectedCar((selectedCar === null || selectedCar === void 0 ? void 0 : selectedCar.id) == id ? undefined : carData));\n  const handleDelete = () => dispatch(deleteCar(id));\n  const handleFinish = () => {\n    if (race && !winner) {\n      const lastWin = winnersList.find(car => car.id === id);\n      if (lastWin) dispatch(updateWinner({\n        ...lastWin,\n        time: Math.min(lastWin.time, (time * 5).toFixed(3))\n      }));else dispatch(newWinner({\n        ...carData,\n        time: (time * 5).toFixed(3)\n      }));\n    }\n    setRaceStatus('finished');\n  };\n  useEffect(() => {\n    if (race != 'finished') race ? handleStart() : handleStop();\n  }, [race]);\n  return {\n    handleStart,\n    handleStop,\n    toggleSelect,\n    handleDelete,\n    raceStatus,\n    animationStyle,\n    handleFinish\n  };\n}\n_s(UseGarageTableRow, \"r5MBpmtpCSNyMAhOmYobRJ5r3e0=\", false, function () {\n  return [useDispatch, useSelector];\n});\n_c = UseGarageTableRow;\nexport default UseGarageTableRow;\nvar _c;\n$RefreshReg$(_c, \"UseGarageTableRow\");","map":{"version":3,"names":["React","useState","useEffect","useDispatch","useSelector","handleGarageRaceStatusesHistory","fetchCarEngineMode","fetchCarDrive","deleteCar","newWinner","setSelectedCar","updateWinner","styles","UseGarageTableRow","carData","_s","dispatch","id","selectedCar","race","winner","winnersList","store","list","time","setTime","raceStatus","setRaceStatus","key","animationStyle","animationName","moveToEnd","animationDuration","animationTimingFunction","animationDelay","animationFillMode","animationPlayState","newValue","handleStart","setTimeout","undefined","then","response","isFailed","raceTime","distance","velocity","status","handleStop","toggleSelect","handleDelete","handleFinish","lastWin","find","car","Math","min","toFixed","_c","$RefreshReg$"],"sources":["C:/Users/Admin/Desktop/async-race-async-race/src/components/commons/GarageTableRow/UseGarageTableRow.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport { handleGarageRaceStatusesHistory } from 'Storages/SessionStorage';\r\nimport { fetchCarEngineMode, fetchCarDrive } from 'CONSTANTS/Axios';\r\nimport {\r\n   deleteCar,\r\n   newWinner,\r\n   setSelectedCar,\r\n   updateWinner,\r\n} from 'store/modules/listReducer';\r\n\r\nimport styles from './GarageTableRow.module.scss';\r\n\r\nfunction UseGarageTableRow(carData) {\r\n   const dispatch = useDispatch();\r\n   const { id } = carData;\r\n   const { selectedCar, race, winner, winnersList } = useSelector(\r\n      (store) => store.list\r\n   );\r\n   const [time, setTime] = useState(0);\r\n   const [raceStatus, setRaceStatus] = useState(\r\n      handleGarageRaceStatusesHistory('getItem', { key: id }) || 'stopped'\r\n   );\r\n   const animationStyle = {\r\n      animationName: styles.moveToEnd,\r\n      animationDuration: `${time}s`,\r\n      animationTimingFunction: 'linear',\r\n      animationDelay: '4.2s',\r\n      animationFillMode: 'forwards',\r\n      animationPlayState: raceStatus === 'brokenEngine' ? 'paused' : 'running',\r\n   };\r\n   useEffect(() => {\r\n      handleGarageRaceStatusesHistory('update', {\r\n         key: id,\r\n         newValue: raceStatus != 'stopped' ? 'finished' : 'stopped',\r\n      });\r\n   }, [raceStatus]);\r\n\r\n   const handleStart = () => {\r\n      setRaceStatus('stopped');\r\n      setTimeout(() => {\r\n         setRaceStatus('started');\r\n         if (selectedCar?.id == id) dispatch(setSelectedCar(undefined));\r\n         fetchCarEngineMode(id, 'started').then((response) => {\r\n            if (!response?.isFailed) {\r\n               const raceTime = response.distance / (response.velocity * 500);\r\n               setTimeout(\r\n                  () =>\r\n                     fetchCarDrive(id).then((response) => {\r\n                        if (response?.isFailed && response.status == 500) {\r\n                           setRaceStatus('brokenEngine');\r\n                        }\r\n                     }),\r\n                  4200\r\n               );\r\n\r\n               setTime(raceTime);\r\n            } else setRaceStatus('stopped');\r\n         });\r\n      }, 0);\r\n   };\r\n   const handleStop = () => {\r\n      fetchCarEngineMode(id, 'stopped');\r\n      setRaceStatus('stopped');\r\n   };\r\n   const toggleSelect = () =>\r\n      dispatch(setSelectedCar(selectedCar?.id == id ? undefined : carData));\r\n   const handleDelete = () => dispatch(deleteCar(id));\r\n   const handleFinish = () => {\r\n      if (race && !winner) {\r\n         const lastWin = winnersList.find((car) => car.id === id);\r\n         if (lastWin)\r\n            dispatch(\r\n               updateWinner({\r\n                  ...lastWin,\r\n                  time: Math.min(lastWin.time, (time * 5).toFixed(3)),\r\n               })\r\n            );\r\n         else dispatch(newWinner({ ...carData, time: (time * 5).toFixed(3) }));\r\n      }\r\n      setRaceStatus('finished');\r\n   };\r\n\r\n   useEffect(() => {\r\n      if (race != 'finished') race ? handleStart() : handleStop();\r\n   }, [race]);\r\n\r\n   return {\r\n      handleStart,\r\n      handleStop,\r\n      toggleSelect,\r\n      handleDelete,\r\n      raceStatus,\r\n      animationStyle,\r\n      handleFinish,\r\n   };\r\n}\r\n\r\nexport default UseGarageTableRow;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}