{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { getRandomCarName, getRandomColor } from 'CONSTANTS/CarData';\nimport { fetchGarageList, fetchWinnersList, fetchNewCar, fetchDeleteCar, fetchUpdateCar, fetchNewWinner, fetchUpdateWinner, fetchDeleteWinner } from 'CONSTANTS/Axios';\nconst generateCars = createAsyncThunk('list/generateCars', async (count, {\n  rejectWithValue,\n  dispatch\n}) => {\n  for (let index = 0; index < count; index++) {\n    const data = await fetchNewCar({\n      name: getRandomCarName(),\n      color: getRandomColor()\n    });\n    if (data.isFailed) return rejectWithValue();\n  }\n  dispatch(getGarageLists()).unwrap();\n});\nconst addNewCar = createAsyncThunk('list/addNewCar', async (carData, {\n  rejectWithValue,\n  dispatch\n}) => {\n  const data = await fetchNewCar(carData);\n  if (data.isFailed) return rejectWithValue();\n  dispatch(getGarageLists()).unwrap();\n  return data;\n});\nconst newWinner = createAsyncThunk('list/newWinner', async (carData, {\n  rejectWithValue,\n  dispatch\n}) => {\n  const data = await fetchNewWinner(carData);\n  if (data.isFailed) return rejectWithValue();\n  dispatch(getWinnersLists()).unwrap();\n  return data;\n});\nconst updateWinner = createAsyncThunk('list/updateWinner', async (carData, {\n  rejectWithValue,\n  dispatch\n}) => {\n  const data = await fetchUpdateWinner(carData);\n  if (data.isFailed) return rejectWithValue();\n  dispatch(getWinnersLists()).unwrap();\n  return data;\n});\nconst updateCar = createAsyncThunk('list/updateCar', async (carData, {\n  rejectWithValue,\n  dispatch\n}) => {\n  const data = await fetchUpdateCar(carData);\n  if (data !== null && data !== void 0 && data.isFailed) return rejectWithValue();\n  dispatch(getGarageLists()).unwrap();\n  return null;\n});\nconst deleteCar = createAsyncThunk('list/deleteCar', async (id, {\n  rejectWithValue,\n  dispatch\n}) => {\n  const data = await fetchDeleteCar(id);\n  fetchDeleteWinner(id);\n  if (data.isFailed) return rejectWithValue();\n  dispatch(getGarageLists()).unwrap();\n  return data;\n});\nconst getGarageLists = createAsyncThunk('list/getGarageLists', async (props, {\n  rejectWithValue,\n  dispatch\n}) => {\n  const data = await fetchGarageList();\n  if (data.isFailed) return rejectWithValue();\n  dispatch(getWinnersLists()).unwrap();\n  return data;\n});\nconst getWinnersLists = createAsyncThunk('list/getWinnersLists', async (props, {\n  rejectWithValue\n}) => {\n  const data = await fetchWinnersList();\n  if (data.isFailed) return rejectWithValue();\n  return data;\n});\nconst initialState = {\n  garageList: [],\n  winnersList: [],\n  selectedCar: undefined,\n  loading: false,\n  race: false,\n  winner: undefined\n};\nconst appSlice = createSlice({\n  name: 'list',\n  initialState,\n  reducers: {\n    setSelectedCar(state, {\n      payload\n    }) {\n      state.selectedCar = payload;\n    },\n    setRace(state, {\n      payload\n    }) {\n      if (payload != 'finished') state.winner = undefined;\n      state.race = payload;\n    },\n    setWinner(state, {\n      payload\n    }) {\n      state.race = 'finished';\n      state.winner = payload;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(deleteCar.pending, (state, {\n      meta\n    }) => {\n      var _state$selectedCar;\n      if (meta.arg == (state === null || state === void 0 ? void 0 : (_state$selectedCar = state.selectedCar) === null || _state$selectedCar === void 0 ? void 0 : _state$selectedCar.id)) {\n        state.selectedCar = undefined;\n      }\n      state.loading = true;\n    }).addCase(generateCars.pending, state => {\n      state.loading = true;\n    }).addCase(newWinner.pending, (state, {\n      meta\n    }) => {\n      state.race = 'finished';\n      state.winner = meta.arg;\n    }).addCase(updateWinner.pending, (state, {\n      meta\n    }) => {\n      state.race = 'finished';\n      state.winner = meta.arg;\n    }).addCase(addNewCar.pending, state => {\n      state.loading = true;\n    }).addCase(updateCar.pending, state => {\n      state.loading = true;\n    }).addCase(getGarageLists.pending, state => {\n      state.loading = true;\n    }).addCase(getGarageLists.fulfilled, (state, {\n      payload\n    }) => {\n      state.garageList = payload;\n    }).addCase(getGarageLists.rejected, (state, {\n      payload\n    }) => {\n      state.loading = false;\n    }).addCase(getWinnersLists.fulfilled, (state, {\n      payload\n    }) => {\n      const restyleList = payload.map(winner => {\n        var _car$name, _car$color;\n        const car = state.garageList.find(current => current.id === winner.id);\n        if (car !== null && car !== void 0 && car.name && car !== null && car !== void 0 && car.color) return {\n          ...winner,\n          name: (_car$name = car === null || car === void 0 ? void 0 : car.name) !== null && _car$name !== void 0 ? _car$name : 'Unknown',\n          color: (_car$color = car === null || car === void 0 ? void 0 : car.color) !== null && _car$color !== void 0 ? _car$color : '#000'\n        };\n      });\n      state.winnersList = restyleList.filter(item => item);\n      state.loading = false;\n    }).addCase(getWinnersLists.rejected, state => {\n      state.loading = false;\n    });\n  }\n});\nexport const {\n  setRace,\n  setSelectedCar\n} = appSlice.actions;\nexport { getGarageLists, getWinnersLists, generateCars, addNewCar, updateCar, deleteCar, newWinner, updateWinner };\nexport default appSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","getRandomCarName","getRandomColor","fetchGarageList","fetchWinnersList","fetchNewCar","fetchDeleteCar","fetchUpdateCar","fetchNewWinner","fetchUpdateWinner","fetchDeleteWinner","generateCars","count","rejectWithValue","dispatch","index","data","name","color","isFailed","getGarageLists","unwrap","addNewCar","carData","newWinner","getWinnersLists","updateWinner","updateCar","deleteCar","id","props","initialState","garageList","winnersList","selectedCar","undefined","loading","race","winner","appSlice","reducers","setSelectedCar","state","payload","setRace","setWinner","extraReducers","builder","addCase","pending","meta","_state$selectedCar","arg","fulfilled","rejected","restyleList","map","_car$name","_car$color","car","find","current","filter","item","actions","reducer"],"sources":["C:/Users/Admin/Desktop/async-race-async-race/src/store/modules/listReducer.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\r\n\r\nimport { getRandomCarName, getRandomColor } from 'CONSTANTS/CarData';\r\n\r\nimport {\r\n   fetchGarageList,\r\n   fetchWinnersList,\r\n   fetchNewCar,\r\n   fetchDeleteCar,\r\n   fetchUpdateCar,\r\n   fetchNewWinner,\r\n   fetchUpdateWinner,\r\n   fetchDeleteWinner,\r\n} from 'CONSTANTS/Axios';\r\n\r\nconst generateCars = createAsyncThunk(\r\n   'list/generateCars',\r\n   async (count, { rejectWithValue, dispatch }) => {\r\n      for (let index = 0; index < count; index++) {\r\n         const data = await fetchNewCar({\r\n            name: getRandomCarName(),\r\n            color: getRandomColor(),\r\n         });\r\n\r\n         if (data.isFailed) return rejectWithValue();\r\n      }\r\n\r\n      dispatch(getGarageLists()).unwrap();\r\n   }\r\n);\r\n\r\nconst addNewCar = createAsyncThunk(\r\n   'list/addNewCar',\r\n   async (carData, { rejectWithValue, dispatch }) => {\r\n      const data = await fetchNewCar(carData);\r\n      if (data.isFailed) return rejectWithValue();\r\n\r\n      dispatch(getGarageLists()).unwrap();\r\n\r\n      return data;\r\n   }\r\n);\r\n\r\nconst newWinner = createAsyncThunk(\r\n   'list/newWinner',\r\n   async (carData, { rejectWithValue, dispatch }) => {\r\n      const data = await fetchNewWinner(carData);\r\n      if (data.isFailed) return rejectWithValue();\r\n\r\n      dispatch(getWinnersLists()).unwrap();\r\n\r\n      return data;\r\n   }\r\n);\r\n\r\nconst updateWinner = createAsyncThunk(\r\n   'list/updateWinner',\r\n   async (carData, { rejectWithValue, dispatch }) => {\r\n      const data = await fetchUpdateWinner(carData);\r\n      if (data.isFailed) return rejectWithValue();\r\n\r\n      dispatch(getWinnersLists()).unwrap();\r\n\r\n      return data;\r\n   }\r\n);\r\n\r\nconst updateCar = createAsyncThunk(\r\n   'list/updateCar',\r\n   async (carData, { rejectWithValue, dispatch }) => {\r\n      const data = await fetchUpdateCar(carData);\r\n      if (data?.isFailed) return rejectWithValue();\r\n\r\n      dispatch(getGarageLists()).unwrap();\r\n\r\n      return null;\r\n   }\r\n);\r\n\r\nconst deleteCar = createAsyncThunk(\r\n   'list/deleteCar',\r\n   async (id, { rejectWithValue, dispatch }) => {\r\n      const data = await fetchDeleteCar(id);\r\n      fetchDeleteWinner(id);\r\n      if (data.isFailed) return rejectWithValue();\r\n\r\n      dispatch(getGarageLists()).unwrap();\r\n\r\n      return data;\r\n   }\r\n);\r\n\r\nconst getGarageLists = createAsyncThunk(\r\n   'list/getGarageLists',\r\n   async (props, { rejectWithValue, dispatch }) => {\r\n      const data = await fetchGarageList();\r\n      if (data.isFailed) return rejectWithValue();\r\n\r\n      dispatch(getWinnersLists()).unwrap();\r\n\r\n      return data;\r\n   }\r\n);\r\n\r\nconst getWinnersLists = createAsyncThunk(\r\n   'list/getWinnersLists',\r\n   async (props, { rejectWithValue }) => {\r\n      const data = await fetchWinnersList();\r\n      if (data.isFailed) return rejectWithValue();\r\n\r\n      return data;\r\n   }\r\n);\r\n\r\nconst initialState = {\r\n   garageList: [],\r\n   winnersList: [],\r\n   selectedCar: undefined,\r\n   loading: false,\r\n   race: false,\r\n   winner: undefined,\r\n};\r\n\r\nconst appSlice = createSlice({\r\n   name: 'list',\r\n   initialState,\r\n   reducers: {\r\n      setSelectedCar(state, { payload }) {\r\n         state.selectedCar = payload;\r\n      },\r\n      setRace(state, { payload }) {\r\n         if (payload != 'finished') state.winner = undefined;\r\n         state.race = payload;\r\n      },\r\n      setWinner(state, { payload }) {\r\n         state.race = 'finished';\r\n         state.winner = payload;\r\n      },\r\n   },\r\n   extraReducers: (builder) => {\r\n      builder\r\n         .addCase(deleteCar.pending, (state, { meta }) => {\r\n            if (meta.arg == state?.selectedCar?.id) {\r\n               state.selectedCar = undefined;\r\n            }\r\n            state.loading = true;\r\n         })\r\n         .addCase(generateCars.pending, (state) => {\r\n            state.loading = true;\r\n         })\r\n         .addCase(newWinner.pending, (state, { meta }) => {\r\n            state.race = 'finished';\r\n            state.winner = meta.arg;\r\n         })\r\n         .addCase(updateWinner.pending, (state, { meta }) => {\r\n            state.race = 'finished';\r\n            state.winner = meta.arg;\r\n         })\r\n         .addCase(addNewCar.pending, (state) => {\r\n            state.loading = true;\r\n         })\r\n         .addCase(updateCar.pending, (state) => {\r\n            state.loading = true;\r\n         })\r\n         .addCase(getGarageLists.pending, (state) => {\r\n            state.loading = true;\r\n         })\r\n         .addCase(getGarageLists.fulfilled, (state, { payload }) => {\r\n            state.garageList = payload;\r\n         })\r\n         .addCase(getGarageLists.rejected, (state, { payload }) => {\r\n            state.loading = false;\r\n         })\r\n         .addCase(getWinnersLists.fulfilled, (state, { payload }) => {\r\n            const restyleList = payload.map((winner) => {\r\n               const car = state.garageList.find(\r\n                  (current) => current.id === winner.id\r\n               );\r\n               if (car?.name && car?.color)\r\n                  return {\r\n                     ...winner,\r\n                     name: car?.name ?? 'Unknown',\r\n                     color: car?.color ?? '#000',\r\n                  };\r\n            });\r\n            state.winnersList = restyleList.filter((item) => item);\r\n            state.loading = false;\r\n         })\r\n         .addCase(getWinnersLists.rejected, (state) => {\r\n            state.loading = false;\r\n         });\r\n   },\r\n});\r\n\r\nexport const { setRace, setSelectedCar } = appSlice.actions;\r\nexport {\r\n   getGarageLists,\r\n   getWinnersLists,\r\n   generateCars,\r\n   addNewCar,\r\n   updateCar,\r\n   deleteCar,\r\n   newWinner,\r\n   updateWinner,\r\n};\r\nexport default appSlice.reducer;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}