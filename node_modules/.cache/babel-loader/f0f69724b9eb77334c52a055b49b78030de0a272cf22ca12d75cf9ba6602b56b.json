{"ast":null,"code":"// /* eslint-disable */\n// /* prettier-ignore */\n// import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n\n// import { getRandomCarName, getRandomColor } from 'CONSTANTS/CarData';\n\n// import {\n//    fetchGarageList,\n//    fetchWinnersList,\n//    fetchNewCar,\n//    fetchDeleteCar,\n//    fetchUpdateCar,\n//    fetchNewWinner,\n//    fetchUpdateWinner,\n//    fetchDeleteWinner,\n// } from 'CONSTANTS/Axios';\n\n// import type { RootState } from 'store/configureReduxStore';\n\n// export interface Car {\n//    id: number;\n//    name: string;\n//    color: string;\n// }\n\n// export interface CarData {\n//    name: string;\n//    color: string;\n// }\n\n// export interface Winner {\n//    id: number;\n//    wins: number;\n//    time: number;\n//    name: string;\n//    color: string;\n// }\n\n// interface ListState {\n//    garageList: Car[];\n//    winnersList: Winner[];\n//    selectedCar?: Car;\n//    loading: boolean;\n//    race?: string;\n//    winner?: Partial<Winner>;\n//    winnerPopup: boolean;\n//    winnersSortBy?: string;\n//    winnersSortDirection?: string;\n// }\n\n// const generateCars = createAsyncThunk<void, number, { state: RootState; rejectValue: { isFailed: boolean } }>(\n//    'list/generateCars',\n//    async (count, { dispatch }) => {\n//       for (let index = 0; index < count; index++) {\n//          dispatch(\n//             addNewCar({\n//                name: getRandomCarName(),\n//                color: getRandomColor(),\n//             })\n//          );\n//       }\n//    }\n// );\n\n// const addNewCar = createAsyncThunk<CarData, CarData, { state: RootState; rejectValue: { isFailed: boolean } }>(\n//    'list/addNewCar',\n//    async (carData, { rejectWithValue }) => {\n//       const data = await fetchNewCar(carData);\n//       if (data.isFailed) return rejectWithValue({ isFailed: true });\n\n//       return data;\n//    }\n// );\n\n// const newWinner = createAsyncThunk<Winner, Partial<Winner>, { state: RootState; rejectValue: { isFailed: boolean } }>(\n//    'list/newWinner',\n//    async (carData, { rejectWithValue }) => {\n//       const data = await fetchNewWinner(carData);\n//       if (data.isFailed) return rejectWithValue({ isFailed: true });\n\n//       return data;\n//    }\n// );\n\n// const updateWinner = createAsyncThunk<Winner, Winner, { state: RootState; rejectValue: { isFailed: boolean } }>(\n//    'list/updateWinner',\n//    async (carData, { rejectWithValue }) => {\n//       const data = await fetchUpdateWinner(carData);\n//       if (data.isFailed) return rejectWithValue({ isFailed: true });\n\n//       return data;\n//    }\n// );\n\n// const updateCar = createAsyncThunk<Car, Car, { state: RootState; rejectValue: { isFailed: boolean } }>(\n//    'list/updateCar',\n//    async (carData, { rejectWithValue, dispatch, getState }) => {\n//       const data = await fetchUpdateCar(carData);\n//       const { winnersList } = getState().list;\n//       const carInWinnersList = winnersList.find((w) => w.id === carData.id);\n//       if (data?.isFailed) return rejectWithValue({ isFailed: true });\n//       if (!!carInWinnersList) dispatch(updateWinner(carInWinnersList)).unwrap();\n\n//       return data;\n//    }\n// );\n\n// const deleteCar = createAsyncThunk<number, number, { state: RootState; rejectValue: { isFailed: boolean } }>(\n//    'list/deleteCar',\n//    async (id, { rejectWithValue, getState }) => {\n//       const data = await fetchDeleteCar(id);\n//       const { winnersList } = getState().list;\n//       const carIsWinner = winnersList.some((winner) => winner.id === id);\n//       if (carIsWinner) fetchDeleteWinner(id);\n//       if (data.isFailed) return rejectWithValue({ isFailed: true });\n\n//       return data;\n//    }\n// );\n\n// const getGarageLists = createAsyncThunk<Car[], void, { state: RootState; rejectValue: { isFailed: boolean } }>(\n//    'list/getGarageLists',\n//    async (props, { rejectWithValue }) => {\n//       const data = await fetchGarageList();\n//       if (data.isFailed) return rejectWithValue({ isFailed: true });\n\n//       return data;\n//    }\n// );\n\n// const getWinnersLists = createAsyncThunk<Winner[], void, { state: RootState; rejectValue: { isFailed: boolean } }>(\n//    'list/getWinnersLists',\n//    async (props, { rejectWithValue }) => {\n//       const data = await fetchWinnersList();\n//       if (data.isFailed) return rejectWithValue({ isFailed: true });\n\n//       return data;\n//    }\n// );\n\n// const initialState: ListState = {\n//    garageList: [],\n//    winnersList: [],\n//    selectedCar: undefined,\n//    loading: false,\n//    race: undefined,\n//    winner: undefined,\n//    winnerPopup: false,\n//    winnersSortBy: undefined,\n//    winnersSortDirection: undefined,\n// };\n\n// const appSlice = createSlice({\n//    name: 'list',\n//    initialState,\n//    reducers: {\n//       setSelectedCar(state, { payload }) {\n//          state.selectedCar = payload;\n//       },\n//       setRace(state, { payload }) {\n//          if (payload != 'finished') state.winner = undefined;\n//          state.race = payload;\n//       },\n//       closeWinnerPopup(state) {\n//          state.winnerPopup = false;\n//       },\n//       setWinnersList(state, { payload }) {\n//          state.winnersList = payload;\n//       },\n//    },\n//    extraReducers: (builder) => {\n//       builder\n//          .addCase(deleteCar.pending, (state, { meta }) => {\n//             const selectedId = state.selectedCar?.id;\n//             const deletingId = meta.arg;\n//             if (selectedId !== undefined && selectedId === deletingId) {\n//                state.selectedCar = undefined;\n//             }\n//          })\n//          .addCase(deleteCar.fulfilled, (state, { meta }) => {\n//             state.garageList = state.garageList.filter((car) => car.id !== meta.arg);\n//             state.winnersList = state.winnersList.filter((car) => car.id !== meta.arg);\n//          })\n//          .addCase(newWinner.pending, (state, { meta }) => {\n//             state.race = 'finished';\n//             state.winner = meta.arg;\n//             state.winnerPopup = true;\n//          })\n//          .addCase(newWinner.fulfilled, (state, { meta }) => {\n//             state.winnersList = [\n//                ...state.winnersList,\n//                {\n//                   name: meta.arg.name || 'name',\n//                   color: meta.arg.color || '#ccc',\n//                   id: meta.arg.id || 3,\n//                   time: meta.arg.time || 33,\n//                   wins: 1,\n//                },\n//             ];\n//          })\n//          .addCase(updateWinner.pending, (state) => {\n//             state.race = 'finished';\n//          })\n//          .addCase(updateWinner.fulfilled, (state, { meta }) => {\n//             state.winnersList = state.winnersList.map((winner) =>\n//                winner.id === meta.arg.id\n//                   ? {\n//                        ...winner,\n//                        wins: meta.arg.wins,\n//                        time: meta.arg.time,\n//                     }\n//                   : winner\n//             );\n//          })\n//          .addCase(addNewCar.fulfilled, (state, { meta }) => {\n//             state.garageList = [\n//                ...state.garageList,\n//                {\n//                   name: meta.arg.name,\n//                   color: meta.arg.color,\n//                   id: state.garageList.length ? state.garageList[state.garageList.length - 1].id + 1 : 1,\n//                },\n//             ];\n//          })\n//          .addCase(updateCar.fulfilled, (state, { meta }) => {\n//             state.garageList = state.garageList.map((car) =>\n//                car.id === meta.arg.id\n//                   ? {\n//                        color: meta.arg.color,\n//                        name: meta.arg.name,\n//                        id: meta.arg.id,\n//                     }\n//                   : car\n//             );\n//          })\n//          .addCase(getGarageLists.pending, (state) => {\n//             state.loading = true;\n//          })\n//          .addCase(getGarageLists.fulfilled, (state, { payload }) => {\n//             state.garageList = payload;\n//             state.loading = false;\n//          })\n//          .addCase(getGarageLists.rejected, (state, { payload }) => {\n//             state.loading = false;\n//          })\n//          .addCase(getWinnersLists.fulfilled, (state, { payload }) => {\n//             const restyleList: Winner[] = payload\n//                .map((winner: Partial<Winner>) => {\n//                   const car = state.garageList.find((current) => current.id === winner.id);\n//                   if (car?.name && car?.color && winner?.id && winner?.time && winner?.wins)\n//                      return {\n//                         ...winner,\n//                         name: car.name,\n//                         color: car.color,\n//                      };\n//                })\n//                .filter((winner): winner is Winner => winner !== undefined);\n//             state.winnersList = restyleList;\n//             state.loading = false;\n//          })\n//          .addCase(getWinnersLists.rejected, (state) => {\n//             state.loading = false;\n//          });\n//    },\n// });\n\n// export const { setRace, setSelectedCar, closeWinnerPopup, setWinnersList } = appSlice.actions;\n// export { getGarageLists, getWinnersLists, generateCars, addNewCar, updateCar, deleteCar, newWinner, updateWinner };\n// export default appSlice.reducer;\n\n/* eslint-disable */\n/* prettier-ignore */\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { fetchWinnersList, fetchNewWinner, fetchUpdateWinner, fetchDeleteWinner } from 'CONSTANTS/Axios';\nimport { openWinnerPopup, setRace } from './garageListReducer';\nconst initialState = {\n  winnersList: [],\n  winner: undefined,\n  loading: false\n};\nconst newWinner = createAsyncThunk('winnersList/newWinner', async (carData, {\n  rejectWithValue,\n  dispatch\n}) => {\n  const data = await fetchNewWinner(carData);\n  if (data.isFailed) return rejectWithValue({\n    isFailed: true\n  });\n  dispatch(setRace('finished'));\n  dispatch(openWinnerPopup());\n  return data;\n});\nconst updateWinner = createAsyncThunk('winnersList/updateWinner', async (carData, {\n  rejectWithValue\n}) => {\n  const data = await fetchUpdateWinner(carData);\n  if (data.isFailed) return rejectWithValue({\n    isFailed: true\n  });\n  return data;\n});\nconst deleteWinner = createAsyncThunk('winnersList/deleteWinner', async (id, {\n  rejectWithValue\n}) => {\n  const data = await fetchDeleteWinner(id);\n  if (data.isFailed) return rejectWithValue({\n    isFailed: true\n  });\n  return data;\n});\nconst getWinnersLists = createAsyncThunk('winnersList/getWinnersLists', async (props, {\n  rejectWithValue,\n  getState\n}) => {\n  const data = await fetchWinnersList();\n  if (data.isFailed) return rejectWithValue({\n    isFailed: true\n  });\n  const {\n    garageList\n  } = getState().garageList;\n  return data.map(winner => {\n    const car = garageList.find(car => car.id === winner.id);\n    return {\n      ...winner,\n      name: (car === null || car === void 0 ? void 0 : car.name) || 'unknown',\n      color: (car === null || car === void 0 ? void 0 : car.color) || '#ccc'\n    };\n  });\n});\nconst winnersListReducer = createSlice({\n  name: 'winnersList',\n  initialState,\n  reducers: {\n    setWinnersList(state, {\n      payload\n    }) {\n      state.winnersList = payload;\n    },\n    setWinner(state, {\n      payload\n    }) {\n      state.winner = payload;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(newWinner.pending, (state, {\n      meta\n    }) => {\n      state.winner = meta.arg;\n    }).addCase(newWinner.fulfilled, (state, {\n      meta\n    }) => {\n      state.winnersList.push({\n        id: meta.arg.id,\n        time: meta.arg.time,\n        wins: 1,\n        name: meta.arg.name || 'car',\n        color: meta.arg.color || '#ccc'\n      });\n    }).addCase(updateWinner.fulfilled, (state, {\n      meta\n    }) => {\n      state.winnersList = state.winnersList.map(winner => winner.id === meta.arg.id ? {\n        ...winner,\n        ...meta.arg\n      } : winner);\n    }).addCase(deleteWinner.fulfilled, (state, {\n      meta\n    }) => {\n      console.log('meta delet arg winner: ', meta.arg);\n      state.winnersList = state.winnersList.filter(winner => winner.id !== meta.arg);\n    }).addCase(getWinnersLists.pending, state => {\n      state.loading = true;\n    }).addCase(getWinnersLists.fulfilled, (state, {\n      payload\n    }) => {\n      state.winnersList = payload;\n      state.loading = false;\n    }).addCase(getWinnersLists.rejected, state => {\n      state.loading = false;\n    });\n  }\n});\nexport const {\n  setWinnersList,\n  setWinner\n} = winnersListReducer.actions;\nexport { updateWinner, getWinnersLists, deleteWinner, newWinner };\nexport default winnersListReducer.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","fetchWinnersList","fetchNewWinner","fetchUpdateWinner","fetchDeleteWinner","openWinnerPopup","setRace","initialState","winnersList","winner","undefined","loading","newWinner","carData","rejectWithValue","dispatch","data","isFailed","updateWinner","deleteWinner","id","getWinnersLists","props","getState","garageList","map","car","find","name","color","winnersListReducer","reducers","setWinnersList","state","payload","setWinner","extraReducers","builder","addCase","pending","meta","arg","fulfilled","push","time","wins","console","log","filter","rejected","actions","reducer"],"sources":["C:/Users/Admin/Documents/GitHub/Async-Race/src/store/modules/winnersListReducer.ts"],"sourcesContent":["// /* eslint-disable */\r\n// /* prettier-ignore */\r\n// import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\r\n\r\n// import { getRandomCarName, getRandomColor } from 'CONSTANTS/CarData';\r\n\r\n// import {\r\n//    fetchGarageList,\r\n//    fetchWinnersList,\r\n//    fetchNewCar,\r\n//    fetchDeleteCar,\r\n//    fetchUpdateCar,\r\n//    fetchNewWinner,\r\n//    fetchUpdateWinner,\r\n//    fetchDeleteWinner,\r\n// } from 'CONSTANTS/Axios';\r\n\r\n// import type { RootState } from 'store/configureReduxStore';\r\n\r\n// export interface Car {\r\n//    id: number;\r\n//    name: string;\r\n//    color: string;\r\n// }\r\n\r\n// export interface CarData {\r\n//    name: string;\r\n//    color: string;\r\n// }\r\n\r\n// export interface Winner {\r\n//    id: number;\r\n//    wins: number;\r\n//    time: number;\r\n//    name: string;\r\n//    color: string;\r\n// }\r\n\r\n// interface ListState {\r\n//    garageList: Car[];\r\n//    winnersList: Winner[];\r\n//    selectedCar?: Car;\r\n//    loading: boolean;\r\n//    race?: string;\r\n//    winner?: Partial<Winner>;\r\n//    winnerPopup: boolean;\r\n//    winnersSortBy?: string;\r\n//    winnersSortDirection?: string;\r\n// }\r\n\r\n// const generateCars = createAsyncThunk<void, number, { state: RootState; rejectValue: { isFailed: boolean } }>(\r\n//    'list/generateCars',\r\n//    async (count, { dispatch }) => {\r\n//       for (let index = 0; index < count; index++) {\r\n//          dispatch(\r\n//             addNewCar({\r\n//                name: getRandomCarName(),\r\n//                color: getRandomColor(),\r\n//             })\r\n//          );\r\n//       }\r\n//    }\r\n// );\r\n\r\n// const addNewCar = createAsyncThunk<CarData, CarData, { state: RootState; rejectValue: { isFailed: boolean } }>(\r\n//    'list/addNewCar',\r\n//    async (carData, { rejectWithValue }) => {\r\n//       const data = await fetchNewCar(carData);\r\n//       if (data.isFailed) return rejectWithValue({ isFailed: true });\r\n\r\n//       return data;\r\n//    }\r\n// );\r\n\r\n// const newWinner = createAsyncThunk<Winner, Partial<Winner>, { state: RootState; rejectValue: { isFailed: boolean } }>(\r\n//    'list/newWinner',\r\n//    async (carData, { rejectWithValue }) => {\r\n//       const data = await fetchNewWinner(carData);\r\n//       if (data.isFailed) return rejectWithValue({ isFailed: true });\r\n\r\n//       return data;\r\n//    }\r\n// );\r\n\r\n// const updateWinner = createAsyncThunk<Winner, Winner, { state: RootState; rejectValue: { isFailed: boolean } }>(\r\n//    'list/updateWinner',\r\n//    async (carData, { rejectWithValue }) => {\r\n//       const data = await fetchUpdateWinner(carData);\r\n//       if (data.isFailed) return rejectWithValue({ isFailed: true });\r\n\r\n//       return data;\r\n//    }\r\n// );\r\n\r\n// const updateCar = createAsyncThunk<Car, Car, { state: RootState; rejectValue: { isFailed: boolean } }>(\r\n//    'list/updateCar',\r\n//    async (carData, { rejectWithValue, dispatch, getState }) => {\r\n//       const data = await fetchUpdateCar(carData);\r\n//       const { winnersList } = getState().list;\r\n//       const carInWinnersList = winnersList.find((w) => w.id === carData.id);\r\n//       if (data?.isFailed) return rejectWithValue({ isFailed: true });\r\n//       if (!!carInWinnersList) dispatch(updateWinner(carInWinnersList)).unwrap();\r\n\r\n//       return data;\r\n//    }\r\n// );\r\n\r\n// const deleteCar = createAsyncThunk<number, number, { state: RootState; rejectValue: { isFailed: boolean } }>(\r\n//    'list/deleteCar',\r\n//    async (id, { rejectWithValue, getState }) => {\r\n//       const data = await fetchDeleteCar(id);\r\n//       const { winnersList } = getState().list;\r\n//       const carIsWinner = winnersList.some((winner) => winner.id === id);\r\n//       if (carIsWinner) fetchDeleteWinner(id);\r\n//       if (data.isFailed) return rejectWithValue({ isFailed: true });\r\n\r\n//       return data;\r\n//    }\r\n// );\r\n\r\n// const getGarageLists = createAsyncThunk<Car[], void, { state: RootState; rejectValue: { isFailed: boolean } }>(\r\n//    'list/getGarageLists',\r\n//    async (props, { rejectWithValue }) => {\r\n//       const data = await fetchGarageList();\r\n//       if (data.isFailed) return rejectWithValue({ isFailed: true });\r\n\r\n//       return data;\r\n//    }\r\n// );\r\n\r\n// const getWinnersLists = createAsyncThunk<Winner[], void, { state: RootState; rejectValue: { isFailed: boolean } }>(\r\n//    'list/getWinnersLists',\r\n//    async (props, { rejectWithValue }) => {\r\n//       const data = await fetchWinnersList();\r\n//       if (data.isFailed) return rejectWithValue({ isFailed: true });\r\n\r\n//       return data;\r\n//    }\r\n// );\r\n\r\n// const initialState: ListState = {\r\n//    garageList: [],\r\n//    winnersList: [],\r\n//    selectedCar: undefined,\r\n//    loading: false,\r\n//    race: undefined,\r\n//    winner: undefined,\r\n//    winnerPopup: false,\r\n//    winnersSortBy: undefined,\r\n//    winnersSortDirection: undefined,\r\n// };\r\n\r\n// const appSlice = createSlice({\r\n//    name: 'list',\r\n//    initialState,\r\n//    reducers: {\r\n//       setSelectedCar(state, { payload }) {\r\n//          state.selectedCar = payload;\r\n//       },\r\n//       setRace(state, { payload }) {\r\n//          if (payload != 'finished') state.winner = undefined;\r\n//          state.race = payload;\r\n//       },\r\n//       closeWinnerPopup(state) {\r\n//          state.winnerPopup = false;\r\n//       },\r\n//       setWinnersList(state, { payload }) {\r\n//          state.winnersList = payload;\r\n//       },\r\n//    },\r\n//    extraReducers: (builder) => {\r\n//       builder\r\n//          .addCase(deleteCar.pending, (state, { meta }) => {\r\n//             const selectedId = state.selectedCar?.id;\r\n//             const deletingId = meta.arg;\r\n//             if (selectedId !== undefined && selectedId === deletingId) {\r\n//                state.selectedCar = undefined;\r\n//             }\r\n//          })\r\n//          .addCase(deleteCar.fulfilled, (state, { meta }) => {\r\n//             state.garageList = state.garageList.filter((car) => car.id !== meta.arg);\r\n//             state.winnersList = state.winnersList.filter((car) => car.id !== meta.arg);\r\n//          })\r\n//          .addCase(newWinner.pending, (state, { meta }) => {\r\n//             state.race = 'finished';\r\n//             state.winner = meta.arg;\r\n//             state.winnerPopup = true;\r\n//          })\r\n//          .addCase(newWinner.fulfilled, (state, { meta }) => {\r\n//             state.winnersList = [\r\n//                ...state.winnersList,\r\n//                {\r\n//                   name: meta.arg.name || 'name',\r\n//                   color: meta.arg.color || '#ccc',\r\n//                   id: meta.arg.id || 3,\r\n//                   time: meta.arg.time || 33,\r\n//                   wins: 1,\r\n//                },\r\n//             ];\r\n//          })\r\n//          .addCase(updateWinner.pending, (state) => {\r\n//             state.race = 'finished';\r\n//          })\r\n//          .addCase(updateWinner.fulfilled, (state, { meta }) => {\r\n//             state.winnersList = state.winnersList.map((winner) =>\r\n//                winner.id === meta.arg.id\r\n//                   ? {\r\n//                        ...winner,\r\n//                        wins: meta.arg.wins,\r\n//                        time: meta.arg.time,\r\n//                     }\r\n//                   : winner\r\n//             );\r\n//          })\r\n//          .addCase(addNewCar.fulfilled, (state, { meta }) => {\r\n//             state.garageList = [\r\n//                ...state.garageList,\r\n//                {\r\n//                   name: meta.arg.name,\r\n//                   color: meta.arg.color,\r\n//                   id: state.garageList.length ? state.garageList[state.garageList.length - 1].id + 1 : 1,\r\n//                },\r\n//             ];\r\n//          })\r\n//          .addCase(updateCar.fulfilled, (state, { meta }) => {\r\n//             state.garageList = state.garageList.map((car) =>\r\n//                car.id === meta.arg.id\r\n//                   ? {\r\n//                        color: meta.arg.color,\r\n//                        name: meta.arg.name,\r\n//                        id: meta.arg.id,\r\n//                     }\r\n//                   : car\r\n//             );\r\n//          })\r\n//          .addCase(getGarageLists.pending, (state) => {\r\n//             state.loading = true;\r\n//          })\r\n//          .addCase(getGarageLists.fulfilled, (state, { payload }) => {\r\n//             state.garageList = payload;\r\n//             state.loading = false;\r\n//          })\r\n//          .addCase(getGarageLists.rejected, (state, { payload }) => {\r\n//             state.loading = false;\r\n//          })\r\n//          .addCase(getWinnersLists.fulfilled, (state, { payload }) => {\r\n//             const restyleList: Winner[] = payload\r\n//                .map((winner: Partial<Winner>) => {\r\n//                   const car = state.garageList.find((current) => current.id === winner.id);\r\n//                   if (car?.name && car?.color && winner?.id && winner?.time && winner?.wins)\r\n//                      return {\r\n//                         ...winner,\r\n//                         name: car.name,\r\n//                         color: car.color,\r\n//                      };\r\n//                })\r\n//                .filter((winner): winner is Winner => winner !== undefined);\r\n//             state.winnersList = restyleList;\r\n//             state.loading = false;\r\n//          })\r\n//          .addCase(getWinnersLists.rejected, (state) => {\r\n//             state.loading = false;\r\n//          });\r\n//    },\r\n// });\r\n\r\n// export const { setRace, setSelectedCar, closeWinnerPopup, setWinnersList } = appSlice.actions;\r\n// export { getGarageLists, getWinnersLists, generateCars, addNewCar, updateCar, deleteCar, newWinner, updateWinner };\r\n// export default appSlice.reducer;\r\n\r\n/* eslint-disable */\r\n/* prettier-ignore */\r\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\r\nimport { fetchWinnersList, fetchNewWinner, fetchUpdateWinner, fetchDeleteWinner } from 'CONSTANTS/Axios';\r\nimport type { RootState } from 'store/configureReduxStore';\r\nimport { Car, openWinnerPopup, setRace } from './garageListReducer';\r\n\r\nexport interface Winner {\r\n   id: number;\r\n   wins: number;\r\n   time: number;\r\n   name: string;\r\n   color: string;\r\n}\r\n\r\ninterface WinnersState {\r\n   winnersList: Winner[];\r\n   winner?: Partial<Winner>;\r\n   loading: boolean;\r\n}\r\n\r\nconst initialState: WinnersState = {\r\n   winnersList: [],\r\n   winner: undefined,\r\n   loading: false,\r\n};\r\n\r\nconst newWinner = createAsyncThunk<Winner, Partial<Winner>, { state: RootState; rejectValue: { isFailed: boolean } }>(\r\n   'winnersList/newWinner',\r\n   async (carData, { rejectWithValue, dispatch }) => {\r\n      const data = await fetchNewWinner(carData);\r\n      if (data.isFailed) return rejectWithValue({ isFailed: true });\r\n      dispatch(setRace('finished'));\r\n      dispatch(openWinnerPopup());\r\n\r\n      return data;\r\n   }\r\n);\r\n\r\nconst updateWinner = createAsyncThunk<Winner, Winner, { state: RootState; rejectValue: { isFailed: boolean } }>(\r\n   'winnersList/updateWinner',\r\n   async (carData, { rejectWithValue }) => {\r\n      const data = await fetchUpdateWinner(carData);\r\n      if (data.isFailed) return rejectWithValue({ isFailed: true });\r\n\r\n      return data;\r\n   }\r\n);\r\n\r\nconst deleteWinner = createAsyncThunk<number, number, { state: RootState; rejectValue: { isFailed: boolean } }>(\r\n   'winnersList/deleteWinner',\r\n   async (id, { rejectWithValue }) => {\r\n      const data = await fetchDeleteWinner(id);\r\n      if (data.isFailed) return rejectWithValue({ isFailed: true });\r\n\r\n      return data;\r\n   }\r\n);\r\n\r\nconst getWinnersLists = createAsyncThunk<Winner[], void, { state: RootState; rejectValue: { isFailed: boolean } }>(\r\n   'winnersList/getWinnersLists',\r\n   async (props, { rejectWithValue, getState }) => {\r\n      const data = await fetchWinnersList();\r\n      if (data.isFailed) return rejectWithValue({ isFailed: true });\r\n      const { garageList } = getState().garageList;\r\n\r\n      return data.map((winner: Winner) => {\r\n         const car = garageList.find((car: Car) => car.id === winner.id);\r\n         return { ...winner, name: car?.name || 'unknown', color: car?.color || '#ccc' };\r\n      });\r\n   }\r\n);\r\n\r\nconst winnersListReducer = createSlice({\r\n   name: 'winnersList',\r\n   initialState,\r\n   reducers: {\r\n      setWinnersList(state, { payload }) {\r\n         state.winnersList = payload;\r\n      },\r\n      setWinner(state, { payload }) {\r\n         state.winner = payload;\r\n      },\r\n   },\r\n   extraReducers: (builder) => {\r\n      builder\r\n         .addCase(newWinner.pending, (state, { meta }) => {\r\n            state.winner = meta.arg;\r\n         })\r\n         .addCase(newWinner.fulfilled, (state, { meta }) => {\r\n            state.winnersList.push({\r\n               id: meta.arg.id!,\r\n               time: meta.arg.time!,\r\n               wins: 1,\r\n               name: meta.arg.name || 'car',\r\n               color: meta.arg.color || '#ccc',\r\n            });\r\n         })\r\n         .addCase(updateWinner.fulfilled, (state, { meta }) => {\r\n            state.winnersList = state.winnersList.map((winner) => (winner.id === meta.arg.id ? { ...winner, ...meta.arg } : winner));\r\n         })\r\n         .addCase(deleteWinner.fulfilled, (state, { meta }) => {\r\n            console.log('meta delet arg winner: ', meta.arg);\r\n            state.winnersList = state.winnersList.filter((winner) => winner.id !== meta.arg);\r\n         })\r\n         .addCase(getWinnersLists.pending, (state) => {\r\n            state.loading = true;\r\n         })\r\n         .addCase(getWinnersLists.fulfilled, (state, { payload }) => {\r\n            state.winnersList = payload;\r\n            state.loading = false;\r\n         })\r\n         .addCase(getWinnersLists.rejected, (state) => {\r\n            state.loading = false;\r\n         });\r\n   },\r\n});\r\n\r\nexport const { setWinnersList, setWinner } = winnersListReducer.actions;\r\nexport { updateWinner, getWinnersLists, deleteWinner, newWinner };\r\nexport default winnersListReducer.reducer;\r\n"],"mappings":"AAAA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}