{"ast":null,"code":"import _objectSpread from\"C:/Users/Admin/Documents/GitHub/Async-Race/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{useState,useEffect}from'react';import{useDispatch,useSelector}from'react-redux';import{handleGarageRaceStatusesHistory}from'Storages/SessionStorage';import{fetchCarEngineMode,fetchCarDrive}from'CONSTANTS/Axios';import{deleteCar,newWinner,setSelectedCar,updateWinner}from'store/modules/listReducer';import styles from'./GarageTableRow.module.scss';function UseGarageTableRow(carData){const dispatch=useDispatch();const{id}=carData;const{selectedCar,race,winner,winnersList}=useSelector(store=>store.list);const[time,setTime]=useState(0);const[raceStatus,setRaceStatus]=useState(handleGarageRaceStatusesHistory('getItem',{key:id})||'stopped');const animationStyle={animationName:styles.moveToEnd,animationDuration:\"\".concat(time,\"s\"),animationTimingFunction:'linear',animationDelay:'4.2s',animationFillMode:'forwards',animationPlayState:raceStatus==='brokenEngine'?'paused':'running'};useEffect(()=>{handleGarageRaceStatusesHistory('update',{key:id,newValue:raceStatus!='stopped'?'finished':'stopped'});},[raceStatus]);const handleStart=()=>{setRaceStatus('stopped');setTimeout(()=>{setRaceStatus('started');if((selectedCar===null||selectedCar===void 0?void 0:selectedCar.id)==id)dispatch(setSelectedCar(undefined));fetchCarEngineMode(id,'started').then(response=>{if(!(response!==null&&response!==void 0&&response.isFailed)){const raceTime=response.distance/(response.velocity*500);setTimeout(()=>fetchCarDrive(id).then(response=>{if(response!==null&&response!==void 0&&response.isFailed&&response.status==500){setRaceStatus('brokenEngine');}}),4200);setTime(raceTime);}else setRaceStatus('stopped');});},0);};const handleStop=()=>{fetchCarEngineMode(id,'stopped');setRaceStatus('stopped');};const toggleSelect=()=>dispatch(setSelectedCar((selectedCar===null||selectedCar===void 0?void 0:selectedCar.id)==id?undefined:carData));const handleDelete=()=>dispatch(deleteCar(id));const handleFinish=()=>{if(race&&!winner){const lastWin=winnersList.find(car=>car.id===id);if(lastWin)dispatch(updateWinner(_objectSpread(_objectSpread({},lastWin),{},{time:Math.min(lastWin.time,(time*5).toFixed(3))})));else dispatch(newWinner(_objectSpread(_objectSpread({},carData),{},{time:(time*5).toFixed(3)})));}setRaceStatus('finished');};useEffect(()=>{if(race!='finished')race?handleStart():handleStop();},[race]);return{handleStart,handleStop,toggleSelect,handleDelete,raceStatus,animationStyle,handleFinish};}export default UseGarageTableRow;","map":{"version":3,"names":["React","useState","useEffect","useDispatch","useSelector","handleGarageRaceStatusesHistory","fetchCarEngineMode","fetchCarDrive","deleteCar","newWinner","setSelectedCar","updateWinner","styles","UseGarageTableRow","carData","dispatch","id","selectedCar","race","winner","winnersList","store","list","time","setTime","raceStatus","setRaceStatus","key","animationStyle","animationName","moveToEnd","animationDuration","concat","animationTimingFunction","animationDelay","animationFillMode","animationPlayState","newValue","handleStart","setTimeout","undefined","then","response","isFailed","raceTime","distance","velocity","status","handleStop","toggleSelect","handleDelete","handleFinish","lastWin","find","car","_objectSpread","Math","min","toFixed"],"sources":["C:/Users/Admin/Documents/GitHub/Async-Race/src/components/commons/GarageTableRow/UseGarageTableRow.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport { handleGarageRaceStatusesHistory } from 'Storages/SessionStorage';\r\nimport { fetchCarEngineMode, fetchCarDrive } from 'CONSTANTS/Axios';\r\nimport {\r\n   deleteCar,\r\n   newWinner,\r\n   setSelectedCar,\r\n   updateWinner,\r\n} from 'store/modules/listReducer';\r\n\r\nimport styles from './GarageTableRow.module.scss';\r\n\r\nfunction UseGarageTableRow(carData) {\r\n   const dispatch = useDispatch();\r\n   const { id } = carData;\r\n   const { selectedCar, race, winner, winnersList } = useSelector(\r\n      (store) => store.list\r\n   );\r\n   const [time, setTime] = useState(0);\r\n   const [raceStatus, setRaceStatus] = useState(\r\n      handleGarageRaceStatusesHistory('getItem', { key: id }) || 'stopped'\r\n   );\r\n   const animationStyle = {\r\n      animationName: styles.moveToEnd,\r\n      animationDuration: `${time}s`,\r\n      animationTimingFunction: 'linear',\r\n      animationDelay: '4.2s',\r\n      animationFillMode: 'forwards',\r\n      animationPlayState: raceStatus === 'brokenEngine' ? 'paused' : 'running',\r\n   };\r\n   useEffect(() => {\r\n      handleGarageRaceStatusesHistory('update', {\r\n         key: id,\r\n         newValue: raceStatus != 'stopped' ? 'finished' : 'stopped',\r\n      });\r\n   }, [raceStatus]);\r\n\r\n   const handleStart = () => {\r\n      setRaceStatus('stopped');\r\n      setTimeout(() => {\r\n         setRaceStatus('started');\r\n         if (selectedCar?.id == id) dispatch(setSelectedCar(undefined));\r\n         fetchCarEngineMode(id, 'started').then((response) => {\r\n            if (!response?.isFailed) {\r\n               const raceTime = response.distance / (response.velocity * 500);\r\n               setTimeout(\r\n                  () =>\r\n                     fetchCarDrive(id).then((response) => {\r\n                        if (response?.isFailed && response.status == 500) {\r\n                           setRaceStatus('brokenEngine');\r\n                        }\r\n                     }),\r\n                  4200\r\n               );\r\n\r\n               setTime(raceTime);\r\n            } else setRaceStatus('stopped');\r\n         });\r\n      }, 0);\r\n   };\r\n   const handleStop = () => {\r\n      fetchCarEngineMode(id, 'stopped');\r\n      setRaceStatus('stopped');\r\n   };\r\n   const toggleSelect = () =>\r\n      dispatch(setSelectedCar(selectedCar?.id == id ? undefined : carData));\r\n   const handleDelete = () => dispatch(deleteCar(id));\r\n   const handleFinish = () => {\r\n      if (race && !winner) {\r\n         const lastWin = winnersList.find((car) => car.id === id);\r\n         if (lastWin)\r\n            dispatch(\r\n               updateWinner({\r\n                  ...lastWin,\r\n                  time: Math.min(lastWin.time, (time * 5).toFixed(3)),\r\n               })\r\n            );\r\n         else dispatch(newWinner({ ...carData, time: (time * 5).toFixed(3) }));\r\n      }\r\n      setRaceStatus('finished');\r\n   };\r\n\r\n   useEffect(() => {\r\n      if (race != 'finished') race ? handleStart() : handleStop();\r\n   }, [race]);\r\n\r\n   return {\r\n      handleStart,\r\n      handleStop,\r\n      toggleSelect,\r\n      handleDelete,\r\n      raceStatus,\r\n      animationStyle,\r\n      handleFinish,\r\n   };\r\n}\r\n\r\nexport default UseGarageTableRow;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}