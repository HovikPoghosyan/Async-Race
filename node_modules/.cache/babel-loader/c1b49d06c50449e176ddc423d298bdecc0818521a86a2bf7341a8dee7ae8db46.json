{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { fetchGarageList, fetchWinnersList } from 'CONSTANTS/Axios';\nconst getGarageAndWinners = createAsyncThunk('list/getGarageAndWinners', async (props, {\n  rejectWithValue,\n  dispatch\n}) => {\n  const garageData = await fetchGarageList();\n  if (garageData.isFailed) return rejectWithValue();\n  const winnersData = await dispatch(getWinnersList()).unwrap();\n  if (winnersData.isFailed) return rejectWithValue();\n\n  // enrich winners with car info\n  const enrichedWinners = winnersData.map(winner => {\n    var _car$name, _car$color;\n    const car = garageData.find(c => c.id === winner.id);\n    return {\n      ...winner,\n      name: (_car$name = car === null || car === void 0 ? void 0 : car.name) !== null && _car$name !== void 0 ? _car$name : 'Unknown',\n      color: (_car$color = car === null || car === void 0 ? void 0 : car.color) !== null && _car$color !== void 0 ? _car$color : '#000'\n    };\n  });\n  return {\n    garageList: garageData,\n    winnersList: enrichedWinners\n  };\n});\nconst initialState = {\n  garageList: [],\n  winnersList: [],\n  loading: false\n};\nconst appSlice = createSlice({\n  name: 'list',\n  initialState,\n  reducers: {\n    setGarageList(state, {\n      payload\n    }) {\n      state.garageList = payload;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(getGarageAndWinners.pending, state => {\n      state.loading = true;\n    }).addCase(getGarageAndWinners.fulfilled, (state, {\n      payload\n    }) => {\n      state.garageList = payload.garageList;\n      state.winnersList = payload.winnersList;\n      state.loading = false;\n    }).addCase(getGarageAndWinners.rejected, state => {\n      state.loading = false;\n    });\n  }\n});\nexport const {\n  setGarageList\n} = appSlice.actions;\nexport { getGarageAndWinners };\nexport default appSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","fetchGarageList","fetchWinnersList","getGarageAndWinners","props","rejectWithValue","dispatch","garageData","isFailed","winnersData","getWinnersList","unwrap","enrichedWinners","map","winner","_car$name","_car$color","car","find","c","id","name","color","garageList","winnersList","initialState","loading","appSlice","reducers","setGarageList","state","payload","extraReducers","builder","addCase","pending","fulfilled","rejected","actions","reducer"],"sources":["C:/Users/Admin/Documents/GitHub/Async-Race/src/store/modules/listReducer.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n\nimport { fetchGarageList, fetchWinnersList } from 'CONSTANTS/Axios';\n\n\nconst getGarageAndWinners = createAsyncThunk(\n  'list/getGarageAndWinners',\n  async ( props, { rejectWithValue, dispatch }) => {\n    const garageData = await fetchGarageList()\n    if ( garageData.isFailed ) return rejectWithValue()\n\n    const winnersData = await dispatch( getWinnersList() ).unwrap()\n    if ( winnersData.isFailed ) return rejectWithValue()\n\n    // enrich winners with car info\n    const enrichedWinners = winnersData.map(winner => {\n      const car = garageData.find(c => c.id === winner.id)\n      return {\n        ...winner,\n        name: car?.name ?? 'Unknown',\n        color: car?.color ?? '#000',\n      }\n    })\n\n    return {\n      garageList: garageData,\n      winnersList: enrichedWinners,\n    }\n  }\n)\n\n\nconst initialState = {\n   garageList: [],\n   winnersList: [],\n   loading: false,\n};\n\nconst appSlice = createSlice({\n   name: 'list',\n   initialState,\n   reducers: {\n      setGarageList( state, { payload } ) {\n         state.garageList = payload;\n      },\n   },\n   extraReducers: ( builder ) => {\n      builder\n      .addCase( getGarageAndWinners.pending, ( state ) => {\n         state.loading = true;\n      })\n      .addCase( getGarageAndWinners.fulfilled, ( state, { payload } ) => {\n         state.garageList = payload.garageList;\n         state.winnersList = payload.winnersList;\n         state.loading = false;\n      })\n      .addCase( getGarageAndWinners.rejected, ( state ) => {\n         state.loading = false;\n      })\n   }\n});\n\nexport const { \n   setGarageList,\n} = appSlice.actions;\nexport { \n   getGarageAndWinners,\n};\nexport default appSlice.reducer;"],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAEhE,SAASC,eAAe,EAAEC,gBAAgB,QAAQ,iBAAiB;AAGnE,MAAMC,mBAAmB,GAAGH,gBAAgB,CAC1C,0BAA0B,EAC1B,OAAQI,KAAK,EAAE;EAAEC,eAAe;EAAEC;AAAS,CAAC,KAAK;EAC/C,MAAMC,UAAU,GAAG,MAAMN,eAAe,CAAC,CAAC;EAC1C,IAAKM,UAAU,CAACC,QAAQ,EAAG,OAAOH,eAAe,CAAC,CAAC;EAEnD,MAAMI,WAAW,GAAG,MAAMH,QAAQ,CAAEI,cAAc,CAAC,CAAE,CAAC,CAACC,MAAM,CAAC,CAAC;EAC/D,IAAKF,WAAW,CAACD,QAAQ,EAAG,OAAOH,eAAe,CAAC,CAAC;;EAEpD;EACA,MAAMO,eAAe,GAAGH,WAAW,CAACI,GAAG,CAACC,MAAM,IAAI;IAAA,IAAAC,SAAA,EAAAC,UAAA;IAChD,MAAMC,GAAG,GAAGV,UAAU,CAACW,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,EAAE,KAAKN,MAAM,CAACM,EAAE,CAAC;IACpD,OAAO;MACL,GAAGN,MAAM;MACTO,IAAI,GAAAN,SAAA,GAAEE,GAAG,aAAHA,GAAG,uBAAHA,GAAG,CAAEI,IAAI,cAAAN,SAAA,cAAAA,SAAA,GAAI,SAAS;MAC5BO,KAAK,GAAAN,UAAA,GAAEC,GAAG,aAAHA,GAAG,uBAAHA,GAAG,CAAEK,KAAK,cAAAN,UAAA,cAAAA,UAAA,GAAI;IACvB,CAAC;EACH,CAAC,CAAC;EAEF,OAAO;IACLO,UAAU,EAAEhB,UAAU;IACtBiB,WAAW,EAAEZ;EACf,CAAC;AACH,CACF,CAAC;AAGD,MAAMa,YAAY,GAAG;EAClBF,UAAU,EAAE,EAAE;EACdC,WAAW,EAAE,EAAE;EACfE,OAAO,EAAE;AACZ,CAAC;AAED,MAAMC,QAAQ,GAAG5B,WAAW,CAAC;EAC1BsB,IAAI,EAAE,MAAM;EACZI,YAAY;EACZG,QAAQ,EAAE;IACPC,aAAaA,CAAEC,KAAK,EAAE;MAAEC;IAAQ,CAAC,EAAG;MACjCD,KAAK,CAACP,UAAU,GAAGQ,OAAO;IAC7B;EACH,CAAC;EACDC,aAAa,EAAIC,OAAO,IAAM;IAC3BA,OAAO,CACNC,OAAO,CAAE/B,mBAAmB,CAACgC,OAAO,EAAIL,KAAK,IAAM;MACjDA,KAAK,CAACJ,OAAO,GAAG,IAAI;IACvB,CAAC,CAAC,CACDQ,OAAO,CAAE/B,mBAAmB,CAACiC,SAAS,EAAE,CAAEN,KAAK,EAAE;MAAEC;IAAQ,CAAC,KAAM;MAChED,KAAK,CAACP,UAAU,GAAGQ,OAAO,CAACR,UAAU;MACrCO,KAAK,CAACN,WAAW,GAAGO,OAAO,CAACP,WAAW;MACvCM,KAAK,CAACJ,OAAO,GAAG,KAAK;IACxB,CAAC,CAAC,CACDQ,OAAO,CAAE/B,mBAAmB,CAACkC,QAAQ,EAAIP,KAAK,IAAM;MAClDA,KAAK,CAACJ,OAAO,GAAG,KAAK;IACxB,CAAC,CAAC;EACL;AACH,CAAC,CAAC;AAEF,OAAO,MAAM;EACVG;AACH,CAAC,GAAGF,QAAQ,CAACW,OAAO;AACpB,SACGnC,mBAAmB;AAEtB,eAAewB,QAAQ,CAACY,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}