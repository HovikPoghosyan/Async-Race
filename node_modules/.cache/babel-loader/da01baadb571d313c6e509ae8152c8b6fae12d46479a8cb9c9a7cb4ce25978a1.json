{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { fetchWinnersListPage, fetchNewWinner, fetchUpdateWinner, fetchDeleteWinner, fetchCarData } from 'CONSTANTS/Axios';\nimport { openWinnerPopup, setRace } from './garageListReducer';\nconst initialState = {\n  winnersList: [],\n  winner: undefined,\n  loading: false,\n  count: 0\n};\nconst newWinner = createAsyncThunk('winnersList/newWinner', async (carData, {\n  rejectWithValue,\n  dispatch\n}) => {\n  const response = await fetchNewWinner(carData);\n  if (response.isFailed) return rejectWithValue({\n    isFailed: true\n  });\n  dispatch(setRace('finished'));\n  dispatch(openWinnerPopup());\n  return response;\n});\nconst updateWinner = createAsyncThunk('winnersList/updateWinner', async (carData, {\n  rejectWithValue\n}) => {\n  const response = await fetchUpdateWinner(carData);\n  if (response.isFailed) return rejectWithValue({\n    isFailed: true\n  });\n  return response;\n});\nconst deleteWinner = createAsyncThunk('winnersList/deleteWinner', async (id, {\n  rejectWithValue\n}) => {\n  const response = await fetchDeleteWinner(id);\n  if (response.isFailed) return rejectWithValue({\n    isFailed: true\n  });\n  return response;\n});\nconst getWinnersListPage = createAsyncThunk('winnersList/getWinnersListPage', async (props, {\n  rejectWithValue,\n  getState\n}) => {\n  const response = await fetchWinnersListPage();\n  if (response.isFailed) {\n    var _response$errors;\n    return rejectWithValue({\n      isFailed: true,\n      errorMessage: (response === null || response === void 0 ? void 0 : (_response$errors = response.errors) === null || _response$errors === void 0 ? void 0 : _response$errors.message) || 'Failed to fetch winners'\n    });\n  }\n  const {\n    garageList\n  } = getState().garageList;\n  console.log('response: ', response);\n  const data = await Promise.all(response.data.map(async winner => {\n    const car = garageList.find(c => c.id === winner.id);\n    if (car) {\n      return {\n        ...winner,\n        name: car.name,\n        color: car.color\n      };\n    }\n    const fetchedCar = await fetchCarData(winner.id);\n    return {\n      ...winner,\n      name: (fetchedCar === null || fetchedCar === void 0 ? void 0 : fetchedCar.name) || 'unknown',\n      color: (fetchedCar === null || fetchedCar === void 0 ? void 0 : fetchedCar.color) || '#ccc'\n    };\n  }));\n  return {\n    data,\n    headers: response.headers\n  };\n});\nconst winnersListReducer = createSlice({\n  name: 'winnersList',\n  initialState,\n  reducers: {\n    setWinnersList(state, {\n      payload\n    }) {\n      state.winnersList = payload;\n    },\n    setWinner(state, {\n      payload\n    }) {\n      state.winner = payload;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(newWinner.pending, (state, {\n      meta\n    }) => {\n      state.winner = meta.arg;\n    }).addCase(newWinner.fulfilled, (state, {\n      meta\n    }) => {\n      state.winnersList.push({\n        id: meta.arg.id,\n        time: meta.arg.time,\n        wins: 1,\n        name: meta.arg.name || 'car',\n        color: meta.arg.color || '#ccc'\n      });\n    }).addCase(updateWinner.fulfilled, (state, {\n      meta\n    }) => {\n      state.winnersList = state.winnersList.map(winner => winner.id === meta.arg.id ? {\n        ...winner,\n        ...meta.arg\n      } : winner);\n    }).addCase(deleteWinner.fulfilled, (state, {\n      meta\n    }) => {\n      console.log('meta delet arg winner: ', meta.arg);\n      state.winnersList = state.winnersList.filter(winner => winner.id !== meta.arg);\n    }).addCase(getWinnersListPage.pending, state => {\n      state.loading = true;\n    }).addCase(getWinnersListPage.fulfilled, (state, {\n      payload\n    }) => {\n      console.log('addWinnerList payload: ', payload.data);\n      state.winnersList = [...state.winnersList, ...payload.data].sort((carOne, carSecond) => carOne.id - carSecond.id);\n      state.count = payload.headers['x-total-count'];\n      state.loading = false;\n    }).addCase(getWinnersListPage.rejected, state => {\n      state.loading = false;\n    });\n  }\n});\nexport const {\n  setWinnersList,\n  setWinner\n} = winnersListReducer.actions;\nexport { updateWinner, getWinnersListPage, deleteWinner, newWinner };\nexport default winnersListReducer.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","fetchWinnersListPage","fetchNewWinner","fetchUpdateWinner","fetchDeleteWinner","fetchCarData","openWinnerPopup","setRace","initialState","winnersList","winner","undefined","loading","count","newWinner","carData","rejectWithValue","dispatch","response","isFailed","updateWinner","deleteWinner","id","getWinnersListPage","props","getState","_response$errors","errorMessage","errors","message","garageList","console","log","data","Promise","all","map","car","find","c","name","color","fetchedCar","headers","winnersListReducer","reducers","setWinnersList","state","payload","setWinner","extraReducers","builder","addCase","pending","meta","arg","fulfilled","push","time","wins","filter","sort","carOne","carSecond","rejected","actions","reducer"],"sources":["C:/Users/Admin/Documents/GitHub/Async-Race/src/store/modules/winnersListReducer.ts"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\r\nimport { fetchWinnersListPage, fetchNewWinner, fetchUpdateWinner, fetchDeleteWinner, fetchCarData } from 'CONSTANTS/Axios';\r\nimport type { RootState } from 'store/configureReduxStore';\r\nimport { Car, openWinnerPopup, setRace } from './garageListReducer';\r\n\r\nexport interface Winner {\r\n   id: number;\r\n   wins: number;\r\n   time: number;\r\n   name: string;\r\n   color: string;\r\n}\r\n\r\ninterface WinnersState {\r\n   winnersList: Winner[];\r\n   winner?: Partial<Winner>;\r\n   loading: boolean;\r\n   count: number;\r\n}\r\n\r\nconst initialState: WinnersState = {\r\n   winnersList: [],\r\n   winner: undefined,\r\n   loading: false,\r\n   count: 0,\r\n};\r\n\r\nconst newWinner = createAsyncThunk<Winner, Partial<Winner>, { state: RootState; rejectValue: { isFailed: boolean } }>(\r\n   'winnersList/newWinner',\r\n   async (carData, { rejectWithValue, dispatch }) => {\r\n      const response = await fetchNewWinner(carData);\r\n      if (response.isFailed) return rejectWithValue({ isFailed: true });\r\n      dispatch(setRace('finished'));\r\n      dispatch(openWinnerPopup());\r\n\r\n      return response;\r\n   }\r\n);\r\n\r\nconst updateWinner = createAsyncThunk<Winner, Winner, { state: RootState; rejectValue: { isFailed: boolean } }>(\r\n   'winnersList/updateWinner',\r\n   async (carData, { rejectWithValue }) => {\r\n      const response = await fetchUpdateWinner(carData);\r\n      if (response.isFailed) return rejectWithValue({ isFailed: true });\r\n\r\n      return response;\r\n   }\r\n);\r\n\r\nconst deleteWinner = createAsyncThunk<number, number, { state: RootState; rejectValue: { isFailed: boolean } }>(\r\n   'winnersList/deleteWinner',\r\n   async (id, { rejectWithValue }) => {\r\n      const response = await fetchDeleteWinner(id);\r\n      if (response.isFailed) return rejectWithValue({ isFailed: true });\r\n\r\n      return response;\r\n   }\r\n);\r\n\r\nconst getWinnersListPage = createAsyncThunk<\r\n  { data: (Winner & { name: string; color: string })[]; headers: Record<string, string> },\r\n  number,\r\n  { state: RootState; rejectValue: { isFailed: boolean; errorMessage: string } }\r\n>(\r\n  'winnersList/getWinnersListPage',\r\n  async (props, { rejectWithValue, getState }) => {\r\n    const response = await fetchWinnersListPage();\r\n\r\n    if (response.isFailed) {\r\n      return rejectWithValue({\r\n        isFailed: true,\r\n        errorMessage: response?.errors?.message || 'Failed to fetch winners',\r\n      });\r\n    }\r\n\r\n    const { garageList } = getState().garageList;\r\n    console.log('response: ', response);\r\n    const data = await Promise.all(\r\n      response.data.map(async (winner: Winner) => {\r\n        const car = garageList.find((c: Car) => c.id === winner.id);\r\n        if (car) {\r\n          return { ...winner, name: car.name, color: car.color };\r\n        }\r\n\r\n        const fetchedCar = await fetchCarData(winner.id);\r\n        return {\r\n          ...winner,\r\n          name: fetchedCar?.name || 'unknown',\r\n          color: fetchedCar?.color || '#ccc',\r\n        };\r\n      })\r\n    );\r\n\r\n    return {\r\n      data,\r\n      headers: response.headers,\r\n    };\r\n  }\r\n);\r\n\r\n\r\nconst winnersListReducer = createSlice({\r\n   name: 'winnersList',\r\n   initialState,\r\n   reducers: {\r\n      setWinnersList(state, { payload }) {\r\n         state.winnersList = payload;\r\n      },\r\n      setWinner(state, { payload }) {\r\n         state.winner = payload;\r\n      },\r\n   },\r\n   extraReducers: (builder) => {\r\n      builder\r\n         .addCase(newWinner.pending, (state, { meta }) => {\r\n            state.winner = meta.arg;\r\n         })\r\n         .addCase(newWinner.fulfilled, (state, { meta }) => {\r\n            state.winnersList.push({\r\n               id: meta.arg.id!,\r\n               time: meta.arg.time!,\r\n               wins: 1,\r\n               name: meta.arg.name || 'car',\r\n               color: meta.arg.color || '#ccc',\r\n            });\r\n         })\r\n         .addCase(updateWinner.fulfilled, (state, { meta }) => {\r\n            state.winnersList = state.winnersList.map((winner) => (winner.id === meta.arg.id ? { ...winner, ...meta.arg } : winner));\r\n         })\r\n         .addCase(deleteWinner.fulfilled, (state, { meta }) => {\r\n            console.log('meta delet arg winner: ', meta.arg);\r\n            state.winnersList = state.winnersList.filter((winner) => winner.id !== meta.arg);\r\n         })\r\n         .addCase(getWinnersListPage.pending, (state) => {\r\n            state.loading = true;\r\n         })\r\n         .addCase(getWinnersListPage.fulfilled, (state, { payload }) => {\r\n            console.log('addWinnerList payload: ', payload.data)\r\n            state.winnersList = [\r\n               ...state.winnersList,\r\n               ...payload.data,\r\n            ].sort(( carOne, carSecond) => carOne.id - carSecond.id);\r\n            state.count = payload.headers['x-total-count'];\r\n            state.loading = false;\r\n         })\r\n         .addCase(getWinnersListPage.rejected, (state) => {\r\n            state.loading = false;\r\n         });\r\n   },\r\n});\r\n\r\nexport const { setWinnersList, setWinner } = winnersListReducer.actions;\r\nexport { updateWinner, getWinnersListPage, deleteWinner, newWinner };\r\nexport default winnersListReducer.reducer;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}