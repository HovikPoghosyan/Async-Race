{"ast":null,"code":"import _objectSpread from\"C:/Users/Admin/Documents/GitHub/Async-Race/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import{useState,useEffect}from'react';import{useAppDispatch,useAppSelector}from'store/hooks/hooks';import{handleGarageRaceStatusesHistory}from'Storages/SessionStorage';import{fetchCarEngineMode,fetchCarDrive}from'CONSTANTS/Axios';import{deleteCar,newWinner,setSelectedCar,updateWinner}from'store/modules/listReducer';import styles from'./GarageTableRow.module.scss';const getAnimationStyle=(raceStatus,time)=>({animationName:styles.moveToEnd,animationDuration:\"\".concat(time,\"s\"),animationTimingFunction:'linear',animationDelay:'4.2s',animationFillMode:'forwards',animationPlayState:raceStatus==='brokenEngine'?'paused':'running'});const startCar=(id,selectedCar,dispatch,setRaceStatus,setTime)=>{setRaceStatus('stopped');setTimeout(()=>{setRaceStatus('started');if((selectedCar===null||selectedCar===void 0?void 0:selectedCar.id)===id)dispatch(setSelectedCar(undefined));fetchCarEngineMode(id,'started').then(response=>{if(!(response!==null&&response!==void 0&&response.isFailed)){const raceTime=response.distance/(response.velocity*500);setTimeout(()=>{fetchCarDrive(id).then(res=>{if(res!==null&&res!==void 0&&res.isFailed&&res.status===500){setRaceStatus('brokenEngine');}});},4200);setTime(raceTime);}else setRaceStatus('stopped');});},0);};const stopCar=(id,setRaceStatus)=>{fetchCarEngineMode(id,'stopped');setRaceStatus('stopped');};function UseGarageTableRow(carData){const dispatch=useAppDispatch();const{id}=carData;const{selectedCar,race,winner,winnersList}=useAppSelector(store=>store.list);const[time,setTime]=useState(0);const[raceStatus,setRaceStatus]=useState(handleGarageRaceStatusesHistory('getItem',{key:id})||'stopped');const animationStyle=getAnimationStyle(raceStatus,time);useEffect(()=>{if(raceStatus!=='started'){handleGarageRaceStatusesHistory('update',{key:id,newValue:raceStatus});}},[raceStatus]);const handleStart=()=>startCar(id,selectedCar,dispatch,setRaceStatus,setTime);const handleStop=()=>stopCar(id,setRaceStatus);const handleFinish=()=>{if(race&&!winner){const lastWin=winnersList.find(car=>car.id===id);const timeNewValue=Number((time*5).toFixed(3));if(lastWin)dispatch(updateWinner(_objectSpread(_objectSpread({},lastWin),{},{time:Math.min(lastWin.time,timeNewValue)})));else dispatch(newWinner(_objectSpread(_objectSpread({},carData),{},{time:timeNewValue})));}setRaceStatus('finished');};const toggleSelect=()=>dispatch(setSelectedCar((selectedCar===null||selectedCar===void 0?void 0:selectedCar.id)==id?undefined:carData));const handleDelete=()=>dispatch(deleteCar(id));useEffect(()=>{if(race&&race!='finished')race==='started'?handleStart():handleStop();},[race]);return{handleStart,handleStop,toggleSelect,handleDelete,raceStatus,animationStyle,handleFinish};}export default UseGarageTableRow;// const handleStart = () => {\n//       setRaceStatus('stopped');\n//       setTimeout(() => {\n//          setRaceStatus('started');\n//          if (selectedCar?.id == id) dispatch(setSelectedCar(undefined));\n//          fetchCarEngineMode(id, 'started').then((response) => {\n//             if (!response?.isFailed) {\n//                const raceTime = response.distance / (response.velocity * 500);\n//                setTimeout(\n//                   () =>\n//                      fetchCarDrive(id).then((response) => {\n//                         if (response?.isFailed && response.status == 500) {\n//                            setRaceStatus('brokenEngine');\n//                         }\n//                      }),\n//                   4200\n//                );\n//                setTime(raceTime);\n//             } else setRaceStatus('stopped');\n//          });\n//       }, 0);\n//    };\n//    const handleStop = () => {\n//       fetchCarEngineMode(id, 'stopped');\n//       setRaceStatus('stopped');\n//    };\n// const handleFinish = () => {\n//       if (race && !winner) {\n//          const lastWin = winnersList.find((car) => car.id === id);\n//          const timeNewValue = Number((time * 5).toFixed(3));\n//          if (lastWin)\n//             dispatch(\n//                updateWinner({\n//                   ...lastWin,\n//                   time: Math.min(lastWin.time, timeNewValue),\n//                })\n//             );\n//          else dispatch(newWinner({ ...carData, time: timeNewValue }));\n//       }\n//       setRaceStatus('finished');\n//    };","map":{"version":3,"names":["useState","useEffect","useAppDispatch","useAppSelector","handleGarageRaceStatusesHistory","fetchCarEngineMode","fetchCarDrive","deleteCar","newWinner","setSelectedCar","updateWinner","styles","getAnimationStyle","raceStatus","time","animationName","moveToEnd","animationDuration","concat","animationTimingFunction","animationDelay","animationFillMode","animationPlayState","startCar","id","selectedCar","dispatch","setRaceStatus","setTime","setTimeout","undefined","then","response","isFailed","raceTime","distance","velocity","res","status","stopCar","UseGarageTableRow","carData","race","winner","winnersList","store","list","key","animationStyle","newValue","handleStart","handleStop","handleFinish","lastWin","find","car","timeNewValue","Number","toFixed","_objectSpread","Math","min","toggleSelect","handleDelete"],"sources":["C:/Users/Admin/Documents/GitHub/Async-Race/src/components/commons/GarageTableRow/UseGarageTableRow.ts"],"sourcesContent":["import React, { FC, useState, useEffect, CSSProperties } from 'react';\nimport { useAppDispatch, useAppSelector } from 'store/hooks/hooks';\n\nimport { handleGarageRaceStatusesHistory } from 'Storages/SessionStorage';\nimport { fetchCarEngineMode, fetchCarDrive } from 'CONSTANTS/Axios';\nimport { deleteCar, newWinner, setSelectedCar, updateWinner } from 'store/modules/listReducer';\nimport { AppDispatch } from 'store/configureReduxStore';\n\nimport styles from './GarageTableRow.module.scss';\n\ninterface CarData {\n   id: number;\n   name: string;\n   color: string;\n}\n\ntype RaceStatus = 'stopped' | 'started' | 'finished' | 'brokenEngine';\n\ninterface UseGarageTableRowReturn {\n   handleStart: () => void;\n   handleStop: () => void;\n   toggleSelect: () => void;\n   handleDelete: () => void;\n   raceStatus: RaceStatus;\n   animationStyle: CSSProperties;\n   handleFinish: () => void;\n}\n\nconst getAnimationStyle = (raceStatus: string, time: number): CSSProperties => ({\n   animationName: styles.moveToEnd,\n   animationDuration: `${time}s`,\n   animationTimingFunction: 'linear',\n   animationDelay: '4.2s',\n   animationFillMode: 'forwards',\n   animationPlayState: raceStatus === 'brokenEngine' ? 'paused' : 'running',\n});\n\nconst startCar = (\n   id: number,\n   selectedCar: CarData | undefined,\n   dispatch: AppDispatch,\n   setRaceStatus: React.Dispatch<React.SetStateAction<RaceStatus>>,\n   setTime: React.Dispatch<React.SetStateAction<number>>\n) => {\n   setRaceStatus('stopped');\n   setTimeout(() => {\n      setRaceStatus('started');\n      if (selectedCar?.id === id) dispatch(setSelectedCar(undefined));\n\n      fetchCarEngineMode(id, 'started').then((response) => {\n         if (!response?.isFailed) {\n            const raceTime = response.distance / (response.velocity * 500);\n            setTimeout(() => {\n               fetchCarDrive(id).then((res) => {\n                  if (res?.isFailed && res.status === 500) {\n                     setRaceStatus('brokenEngine');\n                  }\n               });\n            }, 4200);\n            setTime(raceTime);\n         } else setRaceStatus('stopped');\n      });\n   }, 0);\n};\n\nconst stopCar = (id: number, setRaceStatus: React.Dispatch<React.SetStateAction<RaceStatus>>) => {\n   fetchCarEngineMode(id, 'stopped');\n   setRaceStatus('stopped');\n};\n\n\n\nfunction UseGarageTableRow(carData: CarData): UseGarageTableRowReturn {\n   const dispatch = useAppDispatch();\n   const { id } = carData;\n   const { selectedCar, race, winner, winnersList } = useAppSelector((store) => store.list);\n   const [time, setTime] = useState<number>(0);\n   const [raceStatus, setRaceStatus] = useState<RaceStatus>(\n      (handleGarageRaceStatusesHistory('getItem', { key: id }) as RaceStatus) || 'stopped'\n   );\n   const animationStyle: CSSProperties = getAnimationStyle(raceStatus, time);\n   useEffect(() => {\n      if (raceStatus !== 'started') {\n         handleGarageRaceStatusesHistory('update', { key: id, newValue: raceStatus });\n      }\n   }, [raceStatus]);\n\n   const handleStart = () => startCar(id, selectedCar, dispatch, setRaceStatus, setTime);\n   const handleStop = () => stopCar(id, setRaceStatus);\n   const handleFinish = () => {\n      if (race && !winner) {\n         const lastWin = winnersList.find((car) => car.id === id);\n         const timeNewValue = Number((time * 5).toFixed(3));\n         if (lastWin)\n            dispatch(\n               updateWinner({\n                  ...lastWin,\n                  time: Math.min(lastWin.time, timeNewValue),\n               })\n            );\n         else dispatch(newWinner({ ...carData, time: timeNewValue }));\n      }\n      setRaceStatus('finished');\n   };\n   const toggleSelect = () => dispatch(setSelectedCar(selectedCar?.id == id ? undefined : carData));\n   const handleDelete = () => dispatch(deleteCar(id));\n   useEffect(() => {\n      if (race && race != 'finished') race === 'started' ? handleStart() : handleStop();\n   }, [race]);\n   \n   return { handleStart, handleStop, toggleSelect, handleDelete, raceStatus, animationStyle, handleFinish };\n}\n\nexport default UseGarageTableRow;\n\n\n// const handleStart = () => {\n//       setRaceStatus('stopped');\n//       setTimeout(() => {\n//          setRaceStatus('started');\n//          if (selectedCar?.id == id) dispatch(setSelectedCar(undefined));\n//          fetchCarEngineMode(id, 'started').then((response) => {\n//             if (!response?.isFailed) {\n//                const raceTime = response.distance / (response.velocity * 500);\n//                setTimeout(\n//                   () =>\n//                      fetchCarDrive(id).then((response) => {\n//                         if (response?.isFailed && response.status == 500) {\n//                            setRaceStatus('brokenEngine');\n//                         }\n//                      }),\n//                   4200\n//                );\n\n//                setTime(raceTime);\n//             } else setRaceStatus('stopped');\n//          });\n//       }, 0);\n//    };\n//    const handleStop = () => {\n//       fetchCarEngineMode(id, 'stopped');\n//       setRaceStatus('stopped');\n//    };\n// const handleFinish = () => {\n//       if (race && !winner) {\n//          const lastWin = winnersList.find((car) => car.id === id);\n//          const timeNewValue = Number((time * 5).toFixed(3));\n//          if (lastWin)\n//             dispatch(\n//                updateWinner({\n//                   ...lastWin,\n//                   time: Math.min(lastWin.time, timeNewValue),\n//                })\n//             );\n//          else dispatch(newWinner({ ...carData, time: timeNewValue }));\n//       }\n//       setRaceStatus('finished');\n//    };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}