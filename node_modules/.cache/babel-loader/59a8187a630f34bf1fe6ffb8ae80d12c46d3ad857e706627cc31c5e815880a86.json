{"ast":null,"code":"import _objectSpread from\"C:/Users/Admin/Documents/GitHub/Async-Race/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";// /* eslint-disable */\n// /* prettier-ignore */\n// import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n// import { getRandomCarName, getRandomColor } from 'CONSTANTS/CarData';\n// import {\n//    fetchGarageList,\n//    fetchWinnersList,\n//    fetchNewCar,\n//    fetchDeleteCar,\n//    fetchUpdateCar,\n//    fetchNewWinner,\n//    fetchUpdateWinner,\n//    fetchDeleteWinner,\n// } from 'CONSTANTS/Axios';\n// import type { RootState } from 'store/configureReduxStore';\n// export interface Car {\n//    id: number;\n//    name: string;\n//    color: string;\n// }\n// export interface CarData {\n//    name: string;\n//    color: string;\n// }\n// export interface Winner {\n//    id: number;\n//    wins: number;\n//    time: number;\n//    name: string;\n//    color: string;\n// }\n// interface ListState {\n//    garageList: Car[];\n//    winnersList: Winner[];\n//    selectedCar?: Car;\n//    loading: boolean;\n//    race?: string;\n//    winner?: Partial<Winner>;\n//    winnerPopup: boolean;\n//    winnersSortBy?: string;\n//    winnersSortDirection?: string;\n// }\n// const generateCars = createAsyncThunk<void, number, { state: RootState; rejectValue: { isFailed: boolean } }>(\n//    'list/generateCars',\n//    async (count, { dispatch }) => {\n//       for (let index = 0; index < count; index++) {\n//          dispatch(\n//             addNewCar({\n//                name: getRandomCarName(),\n//                color: getRandomColor(),\n//             })\n//          );\n//       }\n//    }\n// );\n// const addNewCar = createAsyncThunk<CarData, CarData, { state: RootState; rejectValue: { isFailed: boolean } }>(\n//    'list/addNewCar',\n//    async (carData, { rejectWithValue }) => {\n//       const data = await fetchNewCar(carData);\n//       if (data.isFailed) return rejectWithValue({ isFailed: true });\n//       return data;\n//    }\n// );\n// const newWinner = createAsyncThunk<Winner, Partial<Winner>, { state: RootState; rejectValue: { isFailed: boolean } }>(\n//    'list/newWinner',\n//    async (carData, { rejectWithValue }) => {\n//       const data = await fetchNewWinner(carData);\n//       if (data.isFailed) return rejectWithValue({ isFailed: true });\n//       return data;\n//    }\n// );\n// const updateWinner = createAsyncThunk<Winner, Winner, { state: RootState; rejectValue: { isFailed: boolean } }>(\n//    'list/updateWinner',\n//    async (carData, { rejectWithValue }) => {\n//       const data = await fetchUpdateWinner(carData);\n//       if (data.isFailed) return rejectWithValue({ isFailed: true });\n//       return data;\n//    }\n// );\n// const updateCar = createAsyncThunk<Car, Car, { state: RootState; rejectValue: { isFailed: boolean } }>(\n//    'list/updateCar',\n//    async (carData, { rejectWithValue, dispatch, getState }) => {\n//       const data = await fetchUpdateCar(carData);\n//       const { winnersList } = getState().list;\n//       const carInWinnersList = winnersList.find((w) => w.id === carData.id);\n//       if (data?.isFailed) return rejectWithValue({ isFailed: true });\n//       if (!!carInWinnersList) dispatch(updateWinner(carInWinnersList)).unwrap();\n//       return data;\n//    }\n// );\n// const deleteCar = createAsyncThunk<number, number, { state: RootState; rejectValue: { isFailed: boolean } }>(\n//    'list/deleteCar',\n//    async (id, { rejectWithValue, getState }) => {\n//       const data = await fetchDeleteCar(id);\n//       const { winnersList } = getState().list;\n//       const carIsWinner = winnersList.some((winner) => winner.id === id);\n//       if (carIsWinner) fetchDeleteWinner(id);\n//       if (data.isFailed) return rejectWithValue({ isFailed: true });\n//       return data;\n//    }\n// );\n// const getGarageLists = createAsyncThunk<Car[], void, { state: RootState; rejectValue: { isFailed: boolean } }>(\n//    'list/getGarageLists',\n//    async (props, { rejectWithValue }) => {\n//       const data = await fetchGarageList();\n//       if (data.isFailed) return rejectWithValue({ isFailed: true });\n//       return data;\n//    }\n// );\n// const getWinnersLists = createAsyncThunk<Winner[], void, { state: RootState; rejectValue: { isFailed: boolean } }>(\n//    'list/getWinnersLists',\n//    async (props, { rejectWithValue }) => {\n//       const data = await fetchWinnersList();\n//       if (data.isFailed) return rejectWithValue({ isFailed: true });\n//       return data;\n//    }\n// );\n// const initialState: ListState = {\n//    garageList: [],\n//    winnersList: [],\n//    selectedCar: undefined,\n//    loading: false,\n//    race: undefined,\n//    winner: undefined,\n//    winnerPopup: false,\n//    winnersSortBy: undefined,\n//    winnersSortDirection: undefined,\n// };\n// const appSlice = createSlice({\n//    name: 'list',\n//    initialState,\n//    reducers: {\n//       setSelectedCar(state, { payload }) {\n//          state.selectedCar = payload;\n//       },\n//       setRace(state, { payload }) {\n//          if (payload != 'finished') state.winner = undefined;\n//          state.race = payload;\n//       },\n//       closeWinnerPopup(state) {\n//          state.winnerPopup = false;\n//       },\n//       setWinnersList(state, { payload }) {\n//          state.winnersList = payload;\n//       },\n//    },\n//    extraReducers: (builder) => {\n//       builder\n//          .addCase(deleteCar.pending, (state, { meta }) => {\n//             const selectedId = state.selectedCar?.id;\n//             const deletingId = meta.arg;\n//             if (selectedId !== undefined && selectedId === deletingId) {\n//                state.selectedCar = undefined;\n//             }\n//          })\n//          .addCase(deleteCar.fulfilled, (state, { meta }) => {\n//             state.garageList = state.garageList.filter((car) => car.id !== meta.arg);\n//             state.winnersList = state.winnersList.filter((car) => car.id !== meta.arg);\n//          })\n//          .addCase(newWinner.pending, (state, { meta }) => {\n//             state.race = 'finished';\n//             state.winner = meta.arg;\n//             state.winnerPopup = true;\n//          })\n//          .addCase(newWinner.fulfilled, (state, { meta }) => {\n//             state.winnersList = [\n//                ...state.winnersList,\n//                {\n//                   name: meta.arg.name || 'name',\n//                   color: meta.arg.color || '#ccc',\n//                   id: meta.arg.id || 3,\n//                   time: meta.arg.time || 33,\n//                   wins: 1,\n//                },\n//             ];\n//          })\n//          .addCase(updateWinner.pending, (state) => {\n//             state.race = 'finished';\n//          })\n//          .addCase(updateWinner.fulfilled, (state, { meta }) => {\n//             state.winnersList = state.winnersList.map((winner) =>\n//                winner.id === meta.arg.id\n//                   ? {\n//                        ...winner,\n//                        wins: meta.arg.wins,\n//                        time: meta.arg.time,\n//                     }\n//                   : winner\n//             );\n//          })\n//          .addCase(addNewCar.fulfilled, (state, { meta }) => {\n//             state.garageList = [\n//                ...state.garageList,\n//                {\n//                   name: meta.arg.name,\n//                   color: meta.arg.color,\n//                   id: state.garageList.length ? state.garageList[state.garageList.length - 1].id + 1 : 1,\n//                },\n//             ];\n//          })\n//          .addCase(updateCar.fulfilled, (state, { meta }) => {\n//             state.garageList = state.garageList.map((car) =>\n//                car.id === meta.arg.id\n//                   ? {\n//                        color: meta.arg.color,\n//                        name: meta.arg.name,\n//                        id: meta.arg.id,\n//                     }\n//                   : car\n//             );\n//          })\n//          .addCase(getGarageLists.pending, (state) => {\n//             state.loading = true;\n//          })\n//          .addCase(getGarageLists.fulfilled, (state, { payload }) => {\n//             state.garageList = payload;\n//             state.loading = false;\n//          })\n//          .addCase(getGarageLists.rejected, (state, { payload }) => {\n//             state.loading = false;\n//          })\n//          .addCase(getWinnersLists.fulfilled, (state, { payload }) => {\n//             const restyleList: Winner[] = payload\n//                .map((winner: Partial<Winner>) => {\n//                   const car = state.garageList.find((current) => current.id === winner.id);\n//                   if (car?.name && car?.color && winner?.id && winner?.time && winner?.wins)\n//                      return {\n//                         ...winner,\n//                         name: car.name,\n//                         color: car.color,\n//                      };\n//                })\n//                .filter((winner): winner is Winner => winner !== undefined);\n//             state.winnersList = restyleList;\n//             state.loading = false;\n//          })\n//          .addCase(getWinnersLists.rejected, (state) => {\n//             state.loading = false;\n//          });\n//    },\n// });\n// export const { setRace, setSelectedCar, closeWinnerPopup, setWinnersList } = appSlice.actions;\n// export { getGarageLists, getWinnersLists, generateCars, addNewCar, updateCar, deleteCar, newWinner, updateWinner };\n// export default appSlice.reducer;\n/* eslint-disable *//* prettier-ignore */import{createSlice,createAsyncThunk}from'@reduxjs/toolkit';import{fetchWinnersList,fetchNewWinner,fetchUpdateWinner,fetchDeleteWinner}from'CONSTANTS/Axios';import{openWinnerPopup,setRace}from'./garageListReducer';const initialState={winnersList:[],winner:undefined,loading:false};const newWinner=createAsyncThunk('winnersList/newWinner',async(carData,_ref)=>{let{rejectWithValue,dispatch}=_ref;const data=await fetchNewWinner(carData);if(data.isFailed)return rejectWithValue({isFailed:true});dispatch(setRace('finished'));dispatch(openWinnerPopup());return data;});const updateWinner=createAsyncThunk('winnersList/updateWinner',async(carData,_ref2)=>{let{rejectWithValue}=_ref2;const data=await fetchUpdateWinner(carData);if(data.isFailed)return rejectWithValue({isFailed:true});return data;});const deleteWinner=createAsyncThunk('winnersList/deleteWinner',async(id,_ref3)=>{let{rejectWithValue}=_ref3;const data=await fetchDeleteWinner(id);if(data.isFailed)return rejectWithValue({isFailed:true});return data;});const getWinnersLists=createAsyncThunk('winnersList/getWinnersLists',async(props,_ref4)=>{let{rejectWithValue,getState}=_ref4;const data=await fetchWinnersList();if(data.isFailed)return rejectWithValue({isFailed:true});const{garageList}=getState().garageList;return data.map(winner=>{const car=garageList.find(car=>car.id===winner.id);return _objectSpread(_objectSpread({},winner),{},{name:(car===null||car===void 0?void 0:car.name)||'unknown',color:(car===null||car===void 0?void 0:car.color)||'#ccc'});});});const winnersListReducer=createSlice({name:'winnersList',initialState,reducers:{setWinnersList(state,_ref5){let{payload}=_ref5;state.winnersList=payload;},setWinner(state,_ref6){let{payload}=_ref6;state.winner=payload;}},extraReducers:builder=>{builder.addCase(newWinner.pending,(state,_ref7)=>{let{meta}=_ref7;state.winner=meta.arg;}).addCase(newWinner.fulfilled,(state,_ref8)=>{let{meta}=_ref8;state.winnersList.push({id:meta.arg.id,time:meta.arg.time,wins:1,name:meta.arg.name||'car',color:meta.arg.color||'#ccc'});}).addCase(updateWinner.fulfilled,(state,_ref9)=>{let{meta}=_ref9;state.winnersList=state.winnersList.map(winner=>winner.id===meta.arg.id?_objectSpread(_objectSpread({},winner),meta.arg):winner);}).addCase(deleteWinner.fulfilled,(state,_ref0)=>{let{meta}=_ref0;console.log('meta delet arg winner: ',meta.arg);state.winnersList=state.winnersList.filter(winner=>winner.id!==meta.arg);}).addCase(getWinnersLists.pending,state=>{state.loading=true;}).addCase(getWinnersLists.fulfilled,(state,_ref1)=>{let{payload}=_ref1;state.winnersList=payload;state.loading=false;}).addCase(getWinnersLists.rejected,state=>{state.loading=false;});}});export const{setWinnersList,setWinner}=winnersListReducer.actions;export{updateWinner,getWinnersLists,deleteWinner,newWinner};export default winnersListReducer.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","fetchWinnersList","fetchNewWinner","fetchUpdateWinner","fetchDeleteWinner","openWinnerPopup","setRace","initialState","winnersList","winner","undefined","loading","newWinner","carData","_ref","rejectWithValue","dispatch","data","isFailed","updateWinner","_ref2","deleteWinner","id","_ref3","getWinnersLists","props","_ref4","getState","garageList","map","car","find","_objectSpread","name","color","winnersListReducer","reducers","setWinnersList","state","_ref5","payload","setWinner","_ref6","extraReducers","builder","addCase","pending","_ref7","meta","arg","fulfilled","_ref8","push","time","wins","_ref9","_ref0","console","log","filter","_ref1","rejected","actions","reducer"],"sources":["C:/Users/Admin/Documents/GitHub/Async-Race/src/store/modules/winnersListReducer.ts"],"sourcesContent":["// /* eslint-disable */\n// /* prettier-ignore */\n// import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n\n// import { getRandomCarName, getRandomColor } from 'CONSTANTS/CarData';\n\n// import {\n//    fetchGarageList,\n//    fetchWinnersList,\n//    fetchNewCar,\n//    fetchDeleteCar,\n//    fetchUpdateCar,\n//    fetchNewWinner,\n//    fetchUpdateWinner,\n//    fetchDeleteWinner,\n// } from 'CONSTANTS/Axios';\n\n// import type { RootState } from 'store/configureReduxStore';\n\n// export interface Car {\n//    id: number;\n//    name: string;\n//    color: string;\n// }\n\n// export interface CarData {\n//    name: string;\n//    color: string;\n// }\n\n// export interface Winner {\n//    id: number;\n//    wins: number;\n//    time: number;\n//    name: string;\n//    color: string;\n// }\n\n// interface ListState {\n//    garageList: Car[];\n//    winnersList: Winner[];\n//    selectedCar?: Car;\n//    loading: boolean;\n//    race?: string;\n//    winner?: Partial<Winner>;\n//    winnerPopup: boolean;\n//    winnersSortBy?: string;\n//    winnersSortDirection?: string;\n// }\n\n// const generateCars = createAsyncThunk<void, number, { state: RootState; rejectValue: { isFailed: boolean } }>(\n//    'list/generateCars',\n//    async (count, { dispatch }) => {\n//       for (let index = 0; index < count; index++) {\n//          dispatch(\n//             addNewCar({\n//                name: getRandomCarName(),\n//                color: getRandomColor(),\n//             })\n//          );\n//       }\n//    }\n// );\n\n// const addNewCar = createAsyncThunk<CarData, CarData, { state: RootState; rejectValue: { isFailed: boolean } }>(\n//    'list/addNewCar',\n//    async (carData, { rejectWithValue }) => {\n//       const data = await fetchNewCar(carData);\n//       if (data.isFailed) return rejectWithValue({ isFailed: true });\n\n//       return data;\n//    }\n// );\n\n// const newWinner = createAsyncThunk<Winner, Partial<Winner>, { state: RootState; rejectValue: { isFailed: boolean } }>(\n//    'list/newWinner',\n//    async (carData, { rejectWithValue }) => {\n//       const data = await fetchNewWinner(carData);\n//       if (data.isFailed) return rejectWithValue({ isFailed: true });\n\n//       return data;\n//    }\n// );\n\n// const updateWinner = createAsyncThunk<Winner, Winner, { state: RootState; rejectValue: { isFailed: boolean } }>(\n//    'list/updateWinner',\n//    async (carData, { rejectWithValue }) => {\n//       const data = await fetchUpdateWinner(carData);\n//       if (data.isFailed) return rejectWithValue({ isFailed: true });\n\n//       return data;\n//    }\n// );\n\n// const updateCar = createAsyncThunk<Car, Car, { state: RootState; rejectValue: { isFailed: boolean } }>(\n//    'list/updateCar',\n//    async (carData, { rejectWithValue, dispatch, getState }) => {\n//       const data = await fetchUpdateCar(carData);\n//       const { winnersList } = getState().list;\n//       const carInWinnersList = winnersList.find((w) => w.id === carData.id);\n//       if (data?.isFailed) return rejectWithValue({ isFailed: true });\n//       if (!!carInWinnersList) dispatch(updateWinner(carInWinnersList)).unwrap();\n\n//       return data;\n//    }\n// );\n\n// const deleteCar = createAsyncThunk<number, number, { state: RootState; rejectValue: { isFailed: boolean } }>(\n//    'list/deleteCar',\n//    async (id, { rejectWithValue, getState }) => {\n//       const data = await fetchDeleteCar(id);\n//       const { winnersList } = getState().list;\n//       const carIsWinner = winnersList.some((winner) => winner.id === id);\n//       if (carIsWinner) fetchDeleteWinner(id);\n//       if (data.isFailed) return rejectWithValue({ isFailed: true });\n\n//       return data;\n//    }\n// );\n\n// const getGarageLists = createAsyncThunk<Car[], void, { state: RootState; rejectValue: { isFailed: boolean } }>(\n//    'list/getGarageLists',\n//    async (props, { rejectWithValue }) => {\n//       const data = await fetchGarageList();\n//       if (data.isFailed) return rejectWithValue({ isFailed: true });\n\n//       return data;\n//    }\n// );\n\n// const getWinnersLists = createAsyncThunk<Winner[], void, { state: RootState; rejectValue: { isFailed: boolean } }>(\n//    'list/getWinnersLists',\n//    async (props, { rejectWithValue }) => {\n//       const data = await fetchWinnersList();\n//       if (data.isFailed) return rejectWithValue({ isFailed: true });\n\n//       return data;\n//    }\n// );\n\n// const initialState: ListState = {\n//    garageList: [],\n//    winnersList: [],\n//    selectedCar: undefined,\n//    loading: false,\n//    race: undefined,\n//    winner: undefined,\n//    winnerPopup: false,\n//    winnersSortBy: undefined,\n//    winnersSortDirection: undefined,\n// };\n\n// const appSlice = createSlice({\n//    name: 'list',\n//    initialState,\n//    reducers: {\n//       setSelectedCar(state, { payload }) {\n//          state.selectedCar = payload;\n//       },\n//       setRace(state, { payload }) {\n//          if (payload != 'finished') state.winner = undefined;\n//          state.race = payload;\n//       },\n//       closeWinnerPopup(state) {\n//          state.winnerPopup = false;\n//       },\n//       setWinnersList(state, { payload }) {\n//          state.winnersList = payload;\n//       },\n//    },\n//    extraReducers: (builder) => {\n//       builder\n//          .addCase(deleteCar.pending, (state, { meta }) => {\n//             const selectedId = state.selectedCar?.id;\n//             const deletingId = meta.arg;\n//             if (selectedId !== undefined && selectedId === deletingId) {\n//                state.selectedCar = undefined;\n//             }\n//          })\n//          .addCase(deleteCar.fulfilled, (state, { meta }) => {\n//             state.garageList = state.garageList.filter((car) => car.id !== meta.arg);\n//             state.winnersList = state.winnersList.filter((car) => car.id !== meta.arg);\n//          })\n//          .addCase(newWinner.pending, (state, { meta }) => {\n//             state.race = 'finished';\n//             state.winner = meta.arg;\n//             state.winnerPopup = true;\n//          })\n//          .addCase(newWinner.fulfilled, (state, { meta }) => {\n//             state.winnersList = [\n//                ...state.winnersList,\n//                {\n//                   name: meta.arg.name || 'name',\n//                   color: meta.arg.color || '#ccc',\n//                   id: meta.arg.id || 3,\n//                   time: meta.arg.time || 33,\n//                   wins: 1,\n//                },\n//             ];\n//          })\n//          .addCase(updateWinner.pending, (state) => {\n//             state.race = 'finished';\n//          })\n//          .addCase(updateWinner.fulfilled, (state, { meta }) => {\n//             state.winnersList = state.winnersList.map((winner) =>\n//                winner.id === meta.arg.id\n//                   ? {\n//                        ...winner,\n//                        wins: meta.arg.wins,\n//                        time: meta.arg.time,\n//                     }\n//                   : winner\n//             );\n//          })\n//          .addCase(addNewCar.fulfilled, (state, { meta }) => {\n//             state.garageList = [\n//                ...state.garageList,\n//                {\n//                   name: meta.arg.name,\n//                   color: meta.arg.color,\n//                   id: state.garageList.length ? state.garageList[state.garageList.length - 1].id + 1 : 1,\n//                },\n//             ];\n//          })\n//          .addCase(updateCar.fulfilled, (state, { meta }) => {\n//             state.garageList = state.garageList.map((car) =>\n//                car.id === meta.arg.id\n//                   ? {\n//                        color: meta.arg.color,\n//                        name: meta.arg.name,\n//                        id: meta.arg.id,\n//                     }\n//                   : car\n//             );\n//          })\n//          .addCase(getGarageLists.pending, (state) => {\n//             state.loading = true;\n//          })\n//          .addCase(getGarageLists.fulfilled, (state, { payload }) => {\n//             state.garageList = payload;\n//             state.loading = false;\n//          })\n//          .addCase(getGarageLists.rejected, (state, { payload }) => {\n//             state.loading = false;\n//          })\n//          .addCase(getWinnersLists.fulfilled, (state, { payload }) => {\n//             const restyleList: Winner[] = payload\n//                .map((winner: Partial<Winner>) => {\n//                   const car = state.garageList.find((current) => current.id === winner.id);\n//                   if (car?.name && car?.color && winner?.id && winner?.time && winner?.wins)\n//                      return {\n//                         ...winner,\n//                         name: car.name,\n//                         color: car.color,\n//                      };\n//                })\n//                .filter((winner): winner is Winner => winner !== undefined);\n//             state.winnersList = restyleList;\n//             state.loading = false;\n//          })\n//          .addCase(getWinnersLists.rejected, (state) => {\n//             state.loading = false;\n//          });\n//    },\n// });\n\n// export const { setRace, setSelectedCar, closeWinnerPopup, setWinnersList } = appSlice.actions;\n// export { getGarageLists, getWinnersLists, generateCars, addNewCar, updateCar, deleteCar, newWinner, updateWinner };\n// export default appSlice.reducer;\n\n/* eslint-disable */\n/* prettier-ignore */\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { fetchWinnersList, fetchNewWinner, fetchUpdateWinner, fetchDeleteWinner } from 'CONSTANTS/Axios';\nimport type { RootState } from 'store/configureReduxStore';\nimport { Car, openWinnerPopup, setRace } from './garageListReducer';\n\nexport interface Winner {\n   id: number;\n   wins: number;\n   time: number;\n   name: string;\n   color: string;\n}\n\ninterface WinnersState {\n   winnersList: Winner[];\n   winner?: Partial<Winner>;\n   loading: boolean;\n}\n\nconst initialState: WinnersState = {\n   winnersList: [],\n   winner: undefined,\n   loading: false,\n};\n\nconst newWinner = createAsyncThunk<Winner, Partial<Winner>, { state: RootState; rejectValue: { isFailed: boolean } }>(\n   'winnersList/newWinner',\n   async (carData, { rejectWithValue, dispatch }) => {\n      const data = await fetchNewWinner(carData);\n      if (data.isFailed) return rejectWithValue({ isFailed: true });\n      dispatch(setRace('finished'));\n      dispatch(openWinnerPopup());\n\n      return data;\n   }\n);\n\nconst updateWinner = createAsyncThunk<Winner, Winner, { state: RootState; rejectValue: { isFailed: boolean } }>(\n   'winnersList/updateWinner',\n   async (carData, { rejectWithValue }) => {\n      const data = await fetchUpdateWinner(carData);\n      if (data.isFailed) return rejectWithValue({ isFailed: true });\n\n      return data;\n   }\n);\n\nconst deleteWinner = createAsyncThunk<number, number, { state: RootState; rejectValue: { isFailed: boolean } }>(\n   'winnersList/deleteWinner',\n   async (id, { rejectWithValue }) => {\n      const data = await fetchDeleteWinner(id);\n      if (data.isFailed) return rejectWithValue({ isFailed: true });\n\n      return data;\n   }\n);\n\nconst getWinnersLists = createAsyncThunk<Winner[], void, { state: RootState; rejectValue: { isFailed: boolean } }>(\n   'winnersList/getWinnersLists',\n   async (props, { rejectWithValue, getState }) => {\n      const data = await fetchWinnersList();\n      if (data.isFailed) return rejectWithValue({ isFailed: true });\n      const { garageList } = getState().garageList;\n\n      return data.map((winner: Winner) => {\n         const car = garageList.find((car: Car) => car.id === winner.id);\n         return { ...winner, name: car?.name || 'unknown', color: car?.color || '#ccc' };\n      });\n   }\n);\n\nconst winnersListReducer = createSlice({\n   name: 'winnersList',\n   initialState,\n   reducers: {\n      setWinnersList(state, { payload }) {\n         state.winnersList = payload;\n      },\n      setWinner(state, { payload }) {\n         state.winner = payload;\n      },\n   },\n   extraReducers: (builder) => {\n      builder\n         .addCase(newWinner.pending, (state, { meta }) => {\n            state.winner = meta.arg;\n         })\n         .addCase(newWinner.fulfilled, (state, { meta }) => {\n            state.winnersList.push({\n               id: meta.arg.id!,\n               time: meta.arg.time!,\n               wins: 1,\n               name: meta.arg.name || 'car',\n               color: meta.arg.color || '#ccc',\n            });\n         })\n         .addCase(updateWinner.fulfilled, (state, { meta }) => {\n            state.winnersList = state.winnersList.map((winner) => (winner.id === meta.arg.id ? { ...winner, ...meta.arg } : winner));\n         })\n         .addCase(deleteWinner.fulfilled, (state, { meta }) => {\n            console.log('meta delet arg winner: ', meta.arg);\n            state.winnersList = state.winnersList.filter((winner) => winner.id !== meta.arg);\n         })\n         .addCase(getWinnersLists.pending, (state) => {\n            state.loading = true;\n         })\n         .addCase(getWinnersLists.fulfilled, (state, { payload }) => {\n            state.winnersList = payload;\n            state.loading = false;\n         })\n         .addCase(getWinnersLists.rejected, (state) => {\n            state.loading = false;\n         });\n   },\n});\n\nexport const { setWinnersList, setWinner } = winnersListReducer.actions;\nexport { updateWinner, getWinnersLists, deleteWinner, newWinner };\nexport default winnersListReducer.reducer;\n"],"mappingsoBACA,qBACA,OAASA,WAAW,CAAEC,gBAAgB,KAAQ,kBAAkB,CAChE,OAASC,gBAAgB,CAAEC,cAAc,CAAEC,iBAAiB,CAAEC,iBAAiB,KAAQ,iBAAiB,CAExG,OAAcC,eAAe,CAAEC,OAAO,KAAQ,qBAAqB,CAgBnE,KAAM,CAAAC,YAA0B,CAAG,CAChCC,WAAW,CAAE,EAAE,CACfC,MAAM,CAAEC,SAAS,CACjBC,OAAO,CAAE,KACZ,CAAC,CAED,KAAM,CAAAC,SAAS,CAAGZ,gBAAgB,CAC/B,uBAAuB,CACvB,MAAOa,OAAO,CAAAC,IAAA,GAAoC,IAAlC,CAAEC,eAAe,CAAEC,QAAS,CAAC,CAAAF,IAAA,CAC1C,KAAM,CAAAG,IAAI,CAAG,KAAM,CAAAf,cAAc,CAACW,OAAO,CAAC,CAC1C,GAAII,IAAI,CAACC,QAAQ,CAAE,MAAO,CAAAH,eAAe,CAAC,CAAEG,QAAQ,CAAE,IAAK,CAAC,CAAC,CAC7DF,QAAQ,CAACV,OAAO,CAAC,UAAU,CAAC,CAAC,CAC7BU,QAAQ,CAACX,eAAe,CAAC,CAAC,CAAC,CAE3B,MAAO,CAAAY,IAAI,CACd,CACH,CAAC,CAED,KAAM,CAAAE,YAAY,CAAGnB,gBAAgB,CAClC,0BAA0B,CAC1B,MAAOa,OAAO,CAAAO,KAAA,GAA0B,IAAxB,CAAEL,eAAgB,CAAC,CAAAK,KAAA,CAChC,KAAM,CAAAH,IAAI,CAAG,KAAM,CAAAd,iBAAiB,CAACU,OAAO,CAAC,CAC7C,GAAII,IAAI,CAACC,QAAQ,CAAE,MAAO,CAAAH,eAAe,CAAC,CAAEG,QAAQ,CAAE,IAAK,CAAC,CAAC,CAE7D,MAAO,CAAAD,IAAI,CACd,CACH,CAAC,CAED,KAAM,CAAAI,YAAY,CAAGrB,gBAAgB,CAClC,0BAA0B,CAC1B,MAAOsB,EAAE,CAAAC,KAAA,GAA0B,IAAxB,CAAER,eAAgB,CAAC,CAAAQ,KAAA,CAC3B,KAAM,CAAAN,IAAI,CAAG,KAAM,CAAAb,iBAAiB,CAACkB,EAAE,CAAC,CACxC,GAAIL,IAAI,CAACC,QAAQ,CAAE,MAAO,CAAAH,eAAe,CAAC,CAAEG,QAAQ,CAAE,IAAK,CAAC,CAAC,CAE7D,MAAO,CAAAD,IAAI,CACd,CACH,CAAC,CAED,KAAM,CAAAO,eAAe,CAAGxB,gBAAgB,CACrC,6BAA6B,CAC7B,MAAOyB,KAAK,CAAAC,KAAA,GAAoC,IAAlC,CAAEX,eAAe,CAAEY,QAAS,CAAC,CAAAD,KAAA,CACxC,KAAM,CAAAT,IAAI,CAAG,KAAM,CAAAhB,gBAAgB,CAAC,CAAC,CACrC,GAAIgB,IAAI,CAACC,QAAQ,CAAE,MAAO,CAAAH,eAAe,CAAC,CAAEG,QAAQ,CAAE,IAAK,CAAC,CAAC,CAC7D,KAAM,CAAEU,UAAW,CAAC,CAAGD,QAAQ,CAAC,CAAC,CAACC,UAAU,CAE5C,MAAO,CAAAX,IAAI,CAACY,GAAG,CAAEpB,MAAc,EAAK,CACjC,KAAM,CAAAqB,GAAG,CAAGF,UAAU,CAACG,IAAI,CAAED,GAAQ,EAAKA,GAAG,CAACR,EAAE,GAAKb,MAAM,CAACa,EAAE,CAAC,CAC/D,OAAAU,aAAA,CAAAA,aAAA,IAAYvB,MAAM,MAAEwB,IAAI,CAAE,CAAAH,GAAG,SAAHA,GAAG,iBAAHA,GAAG,CAAEG,IAAI,GAAI,SAAS,CAAEC,KAAK,CAAE,CAAAJ,GAAG,SAAHA,GAAG,iBAAHA,GAAG,CAAEI,KAAK,GAAI,MAAM,GAChF,CAAC,CAAC,CACL,CACH,CAAC,CAED,KAAM,CAAAC,kBAAkB,CAAGpC,WAAW,CAAC,CACpCkC,IAAI,CAAE,aAAa,CACnB1B,YAAY,CACZ6B,QAAQ,CAAE,CACPC,cAAcA,CAACC,KAAK,CAAAC,KAAA,CAAe,IAAb,CAAEC,OAAQ,CAAC,CAAAD,KAAA,CAC9BD,KAAK,CAAC9B,WAAW,CAAGgC,OAAO,CAC9B,CAAC,CACDC,SAASA,CAACH,KAAK,CAAAI,KAAA,CAAe,IAAb,CAAEF,OAAQ,CAAC,CAAAE,KAAA,CACzBJ,KAAK,CAAC7B,MAAM,CAAG+B,OAAO,CACzB,CACH,CAAC,CACDG,aAAa,CAAGC,OAAO,EAAK,CACzBA,OAAO,CACHC,OAAO,CAACjC,SAAS,CAACkC,OAAO,CAAE,CAACR,KAAK,CAAAS,KAAA,GAAe,IAAb,CAAEC,IAAK,CAAC,CAAAD,KAAA,CACzCT,KAAK,CAAC7B,MAAM,CAAGuC,IAAI,CAACC,GAAG,CAC1B,CAAC,CAAC,CACDJ,OAAO,CAACjC,SAAS,CAACsC,SAAS,CAAE,CAACZ,KAAK,CAAAa,KAAA,GAAe,IAAb,CAAEH,IAAK,CAAC,CAAAG,KAAA,CAC3Cb,KAAK,CAAC9B,WAAW,CAAC4C,IAAI,CAAC,CACpB9B,EAAE,CAAE0B,IAAI,CAACC,GAAG,CAAC3B,EAAG,CAChB+B,IAAI,CAAEL,IAAI,CAACC,GAAG,CAACI,IAAK,CACpBC,IAAI,CAAE,CAAC,CACPrB,IAAI,CAAEe,IAAI,CAACC,GAAG,CAAChB,IAAI,EAAI,KAAK,CAC5BC,KAAK,CAAEc,IAAI,CAACC,GAAG,CAACf,KAAK,EAAI,MAC5B,CAAC,CAAC,CACL,CAAC,CAAC,CACDW,OAAO,CAAC1B,YAAY,CAAC+B,SAAS,CAAE,CAACZ,KAAK,CAAAiB,KAAA,GAAe,IAAb,CAAEP,IAAK,CAAC,CAAAO,KAAA,CAC9CjB,KAAK,CAAC9B,WAAW,CAAG8B,KAAK,CAAC9B,WAAW,CAACqB,GAAG,CAAEpB,MAAM,EAAMA,MAAM,CAACa,EAAE,GAAK0B,IAAI,CAACC,GAAG,CAAC3B,EAAE,CAAAU,aAAA,CAAAA,aAAA,IAAQvB,MAAM,EAAKuC,IAAI,CAACC,GAAG,EAAKxC,MAAO,CAAC,CAC3H,CAAC,CAAC,CACDoC,OAAO,CAACxB,YAAY,CAAC6B,SAAS,CAAE,CAACZ,KAAK,CAAAkB,KAAA,GAAe,IAAb,CAAER,IAAK,CAAC,CAAAQ,KAAA,CAC9CC,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAEV,IAAI,CAACC,GAAG,CAAC,CAChDX,KAAK,CAAC9B,WAAW,CAAG8B,KAAK,CAAC9B,WAAW,CAACmD,MAAM,CAAElD,MAAM,EAAKA,MAAM,CAACa,EAAE,GAAK0B,IAAI,CAACC,GAAG,CAAC,CACnF,CAAC,CAAC,CACDJ,OAAO,CAACrB,eAAe,CAACsB,OAAO,CAAGR,KAAK,EAAK,CAC1CA,KAAK,CAAC3B,OAAO,CAAG,IAAI,CACvB,CAAC,CAAC,CACDkC,OAAO,CAACrB,eAAe,CAAC0B,SAAS,CAAE,CAACZ,KAAK,CAAAsB,KAAA,GAAkB,IAAhB,CAAEpB,OAAQ,CAAC,CAAAoB,KAAA,CACpDtB,KAAK,CAAC9B,WAAW,CAAGgC,OAAO,CAC3BF,KAAK,CAAC3B,OAAO,CAAG,KAAK,CACxB,CAAC,CAAC,CACDkC,OAAO,CAACrB,eAAe,CAACqC,QAAQ,CAAGvB,KAAK,EAAK,CAC3CA,KAAK,CAAC3B,OAAO,CAAG,KAAK,CACxB,CAAC,CAAC,CACR,CACH,CAAC,CAAC,CAEF,MAAO,MAAM,CAAE0B,cAAc,CAAEI,SAAU,CAAC,CAAGN,kBAAkB,CAAC2B,OAAO,CACvE,OAAS3C,YAAY,CAAEK,eAAe,CAAEH,YAAY,CAAET,SAAS,EAC/D,cAAe,CAAAuB,kBAAkB,CAAC4B,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}