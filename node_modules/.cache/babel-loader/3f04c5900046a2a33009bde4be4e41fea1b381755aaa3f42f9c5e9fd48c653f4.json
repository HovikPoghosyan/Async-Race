{"ast":null,"code":"import axios from 'axios';\nconst API_BASE = 'http://localhost:3000';\nconst URLS = {\n  garage: `${API_BASE}/garage`,\n  winners: `${API_BASE}/winners`,\n  engine: `${API_BASE}/engine`\n};\nconst ajax = async (url, {\n  method = 'get',\n  headers = {},\n  data = {},\n  returnHeaders\n}) => {\n  try {\n    const response = await axios({\n      url,\n      method,\n      data,\n      headers\n    });\n    return returnHeaders ? {\n      data: response.data,\n      headers: {\n        ...response.headers\n      }\n    } : response.data;\n  } catch (axiosError) {\n    var _axiosError$response, _axiosError$response$, _axiosError$response2, _axiosError$response3;\n    return {\n      isFailed: true,\n      status: axiosError === null || axiosError === void 0 ? void 0 : axiosError.status,\n      errors: {\n        message: (axiosError === null || axiosError === void 0 ? void 0 : (_axiosError$response = axiosError.response) === null || _axiosError$response === void 0 ? void 0 : (_axiosError$response$ = _axiosError$response.data) === null || _axiosError$response$ === void 0 ? void 0 : _axiosError$response$.message) || axiosError.message || 'Unknown Error',\n        list: axiosError !== null && axiosError !== void 0 && (_axiosError$response2 = axiosError.response) !== null && _axiosError$response2 !== void 0 && (_axiosError$response3 = _axiosError$response2.data) !== null && _axiosError$response3 !== void 0 && _axiosError$response3.errors ? {\n          ...axiosError.response.data.errors\n        } : null\n      }\n    };\n  }\n};\nconst fetchGarageListPage = async pageNo => {\n  const queryParams = new URLSearchParams({\n    _page: pageNo,\n    _limit: '7'\n  });\n  const data = await ajax(`${URLS.garage}?${queryParams.toString()}`, {\n    method: 'GET',\n    headers: {},\n    data: {},\n    returnHeaders: true\n  });\n  return data;\n};\nconst fetchWinnersListPage = async pageNo => {\n  const queryParams = new URLSearchParams({\n    _page: pageNo,\n    _limit: '10'\n  });\n  const data = await ajax(`${URLS.winners}?${queryParams.toString()}`, {\n    method: 'GET',\n    headers: {},\n    data: {},\n    returnHeaders: true\n  });\n  return data;\n};\nconst fetchCarData = async id => {\n  const queryParams = new URLSearchParams({\n    id\n  });\n  const data = await ajax(`${URLS.garage}?${queryParams.toString()}`, {\n    method: 'GET',\n    headers: {},\n    data: {}\n  });\n  return data;\n};\nconst fetchNewCar = async carData => {\n  const data = await ajax(URLS.garage, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    data: {\n      ...carData\n    }\n  });\n  return data;\n};\nconst fetchDeleteCar = async id => {\n  const data = await ajax(`${URLS.garage}/${id}`, {\n    method: 'DELETE',\n    headers: {},\n    data: {}\n  });\n  return data;\n};\nconst fetchUpdateCar = async carData => {\n  const data = await ajax(`${URLS.garage}/${carData.id}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    data: {\n      ...carData\n    }\n  });\n  return data;\n};\nconst fetchCarEngineMode = async (id, status) => {\n  const queryParams = new URLSearchParams({\n    id,\n    status\n  });\n  const data = await ajax(`${URLS.engine}?${queryParams.toString()}`, {\n    method: 'PATCH',\n    headers: {},\n    data: {}\n  });\n  return data;\n};\nconst fetchNewWinner = async carData => {\n  const data = await ajax(URLS.winners, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    data: {\n      id: carData.id,\n      wins: 1,\n      time: carData.time\n    }\n  });\n  return data;\n};\nconst fetchDeleteWinner = async id => {\n  const data = await ajax(`${URLS.winners}/${id}`, {\n    method: 'DELETE',\n    headers: {},\n    data: {}\n  });\n  return data;\n};\nconst fetchUpdateWinner = async carData => {\n  const data = await ajax(`${URLS.winners}/${carData.id}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    data: {\n      wins: carData.wins,\n      time: carData.time\n    }\n  });\n  return data;\n};\nconst fetchCarDrive = async id => {\n  const queryParams = new URLSearchParams({\n    id,\n    status: 'drive'\n  });\n  const data = await ajax(`${URLS.engine}?${queryParams.toString()}`, {\n    method: 'PATCH',\n    headers: {},\n    data: {}\n  });\n  return data;\n};\nexport { fetchDeleteWinner, fetchUpdateCar, fetchDeleteCar, fetchNewCar, fetchCarEngineMode, fetchNewWinner, fetchUpdateWinner, fetchCarDrive, fetchGarageListPage, fetchWinnersListPage, fetchCarData };\nexport default ajax;","map":{"version":3,"names":["axios","API_BASE","URLS","garage","winners","engine","ajax","url","method","headers","data","returnHeaders","response","axiosError","_axiosError$response","_axiosError$response$","_axiosError$response2","_axiosError$response3","isFailed","status","errors","message","list","fetchGarageListPage","pageNo","queryParams","URLSearchParams","_page","_limit","toString","fetchWinnersListPage","fetchCarData","id","fetchNewCar","carData","fetchDeleteCar","fetchUpdateCar","fetchCarEngineMode","fetchNewWinner","wins","time","fetchDeleteWinner","fetchUpdateWinner","fetchCarDrive"],"sources":["C:/Users/Admin/Documents/GitHub/Async-Race/src/CONSTANTS/Axios.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_BASE = 'http://localhost:3000';\r\nconst URLS = {\r\n   garage: `${API_BASE}/garage`,\r\n   winners: `${API_BASE}/winners`,\r\n   engine: `${API_BASE}/engine`,\r\n};\r\n\r\nconst ajax = async (url, { method = 'get', headers = {}, data = {}, returnHeaders }) => {\r\n   try {\r\n      const response = await axios({\r\n         url,\r\n         method,\r\n         data,\r\n         headers,\r\n      });\r\n\r\n      return returnHeaders\r\n         ? {\r\n              data: response.data,\r\n              headers: { ...response.headers },\r\n           }\r\n         : response.data;\r\n   } catch (axiosError) {\r\n      return {\r\n         isFailed: true,\r\n         status: axiosError?.status,\r\n         errors: {\r\n            message: axiosError?.response?.data?.message || axiosError.message || 'Unknown Error',\r\n            list: axiosError?.response?.data?.errors ? { ...axiosError.response.data.errors } : null,\r\n         },\r\n      };\r\n   }\r\n};\r\n\r\nconst fetchGarageListPage = async (pageNo) => {\r\n   const queryParams = new URLSearchParams({ _page: pageNo, _limit: '7' });\r\n   const data = await ajax(`${URLS.garage}?${queryParams.toString()}`, {\r\n      method: 'GET',\r\n      headers: {},\r\n      data: {},\r\n      returnHeaders: true,\r\n   });\r\n\r\n   return data;\r\n};\r\n\r\nconst fetchWinnersListPage = async (pageNo) => {\r\n   const queryParams = new URLSearchParams({ _page: pageNo, _limit: '10' });\r\n   const data = await ajax(`${URLS.winners}?${queryParams.toString()}`, {\r\n      method: 'GET',\r\n      headers: {},\r\n      data: {},\r\n      returnHeaders: true,\r\n   });\r\n\r\n   return data;\r\n};\r\n\r\nconst fetchCarData = async (id) => {\r\n   const queryParams = new URLSearchParams({ id });\r\n   const data = await ajax(`${URLS.garage}?${queryParams.toString()}`, {\r\n      method: 'GET',\r\n      headers: {},\r\n      data: {},\r\n   });\r\n\r\n   return data;\r\n};\r\n\r\nconst fetchNewCar = async (carData) => {\r\n   const data = await ajax(URLS.garage, {\r\n      method: 'POST',\r\n      headers: {\r\n         'Content-Type': 'application/json',\r\n      },\r\n      data: { ...carData },\r\n   });\r\n\r\n   return data;\r\n};\r\n\r\nconst fetchDeleteCar = async (id) => {\r\n   const data = await ajax(`${URLS.garage}/${id}`, {\r\n      method: 'DELETE',\r\n      headers: {},\r\n      data: {},\r\n   });\r\n\r\n   return data;\r\n};\r\n\r\nconst fetchUpdateCar = async (carData) => {\r\n   const data = await ajax(`${URLS.garage}/${carData.id}`, {\r\n      method: 'PUT',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      data: { ...carData },\r\n   });\r\n\r\n   return data;\r\n};\r\n\r\nconst fetchCarEngineMode = async (id, status) => {\r\n   const queryParams = new URLSearchParams({ id, status });\r\n   const data = await ajax(`${URLS.engine}?${queryParams.toString()}`, {\r\n      method: 'PATCH',\r\n      headers: {},\r\n      data: {},\r\n   });\r\n\r\n   return data;\r\n};\r\n\r\nconst fetchNewWinner = async (carData) => {\r\n   const data = await ajax(URLS.winners, {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      data: {\r\n         id: carData.id,\r\n         wins: 1,\r\n         time: carData.time,\r\n      },\r\n   });\r\n\r\n   return data;\r\n};\r\n\r\nconst fetchDeleteWinner = async (id) => {\r\n   const data = await ajax(`${URLS.winners}/${id}`, {\r\n      method: 'DELETE',\r\n      headers: {},\r\n      data: {},\r\n   });\r\n\r\n   return data;\r\n};\r\n\r\nconst fetchUpdateWinner = async (carData) => {\r\n   const data = await ajax(`${URLS.winners}/${carData.id}`, {\r\n      method: 'PUT',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      data: {\r\n         wins: carData.wins,\r\n         time: carData.time,\r\n      },\r\n   });\r\n\r\n   return data;\r\n};\r\n\r\nconst fetchCarDrive = async (id) => {\r\n   const queryParams = new URLSearchParams({ id, status: 'drive' });\r\n   const data = await ajax(`${URLS.engine}?${queryParams.toString()}`, {\r\n      method: 'PATCH',\r\n      headers: {},\r\n      data: {},\r\n   });\r\n\r\n   return data;\r\n};\r\n\r\nexport {\r\n   fetchDeleteWinner,\r\n   fetchUpdateCar,\r\n   fetchDeleteCar,\r\n   fetchNewCar,\r\n   fetchCarEngineMode,\r\n   fetchNewWinner,\r\n   fetchUpdateWinner,\r\n   fetchCarDrive,\r\n   fetchGarageListPage,\r\n   fetchWinnersListPage,\r\n   fetchCarData,\r\n};\r\nexport default ajax;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}