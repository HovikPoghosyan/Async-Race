{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { getRandomCarName, getRandomColor } from 'CONSTANTS/CarData';\nimport { fetchGarageListPage, fetchNewCar, fetchDeleteCar, fetchUpdateCar } from 'CONSTANTS/Axios';\nimport { deleteWinner, updateWinner } from './winnersListReducer';\nconst initialState = {\n  garageList: [],\n  selectedCar: undefined,\n  loading: true,\n  race: 'stopped',\n  winnerPopup: false,\n  count: 0\n};\nconst generateCars = createAsyncThunk('garageList/generateCars', async (count, {\n  dispatch\n}) => {\n  for (let index = 0; index < count; index++) {\n    await dispatch(addNewCar({\n      name: getRandomCarName(),\n      color: getRandomColor()\n    }));\n  }\n});\nconst addNewCar = createAsyncThunk('garageList/addNewCar', async (carData, {\n  rejectWithValue\n}) => {\n  const response = await fetchNewCar(carData);\n  if (response !== null && response !== void 0 && response.isFailed) return rejectWithValue({\n    isFailed: true\n  });\n  return response;\n});\nconst updateCar = createAsyncThunk('list/updateCar', async (carData, {\n  rejectWithValue,\n  dispatch,\n  getState\n}) => {\n  const response = await fetchUpdateCar(carData);\n  const {\n    winnersList\n  } = getState().winnersList;\n  const carInWinnersList = winnersList.find(winner => winner.id === carData.id);\n  if (response !== null && response !== void 0 && response.isFailed) return rejectWithValue({\n    isFailed: true\n  });\n  if (carInWinnersList) dispatch(updateWinner({\n    ...carInWinnersList,\n    ...carData\n  })).unwrap();\n  return response;\n});\nconst deleteCar = createAsyncThunk('garageList/deleteCar', async (id, {\n  rejectWithValue,\n  getState,\n  dispatch\n}) => {\n  const response = await fetchDeleteCar(id);\n  const {\n    winnersList\n  } = getState().winnersList;\n  const carIsWinner = winnersList.some(winner => winner.id === id);\n  if (carIsWinner) {\n    dispatch(deleteWinner(id));\n  }\n  if (response.isFailed) return rejectWithValue({\n    isFailed: true\n  });\n  return response;\n});\nconst getGarageListPage = createAsyncThunk('garageList/getGarageList', async (pageNo, {\n  rejectWithValue\n}) => {\n  console.log('getGarageList');\n  const response = await fetchGarageListPage(pageNo);\n  if (response.isFailed) return rejectWithValue({\n    isFailed: true,\n    errorMessage: response.errors.message\n  });\n  return response;\n});\nconst garageListReducer = createSlice({\n  name: 'garageList',\n  initialState,\n  reducers: {\n    setSelectedCar(state, {\n      payload\n    }) {\n      state.selectedCar = payload;\n    },\n    setRace(state, {\n      payload\n    }) {\n      state.race = payload;\n    },\n    closeWinnerPopup(state) {\n      state.winnerPopup = false;\n    },\n    openWinnerPopup(state) {\n      state.winnerPopup = true;\n    }\n  },\n  extraReducers: builder => {\n    builder\n    // .addCase(generateCars.pending, (state ) => { state.loading = true })\n    // .addCase(generateCars.fulfilled, (state, { meta }) => { state.loading = false })\n    .addCase(addNewCar.fulfilled, (state, {\n      meta\n    }) => {\n      state.count += 1;\n    }).addCase(updateCar.fulfilled, (state, {\n      meta\n    }) => {\n      state.garageList = state.garageList.map(car => car.id === meta.arg.id ? {\n        ...car,\n        ...meta.arg\n      } : car);\n    }).addCase(deleteCar.fulfilled, (state, {\n      meta\n    }) => {\n      var _state$selectedCar;\n      state.garageList = state.garageList.filter(car => car.id !== meta.arg);\n      state.selectedCar = ((_state$selectedCar = state.selectedCar) === null || _state$selectedCar === void 0 ? void 0 : _state$selectedCar.id) == meta.arg ? undefined : state.selectedCar;\n      state.count -= 1;\n    }).addCase(getGarageListPage.pending, state => {\n      state.loading = true;\n    }).addCase(getGarageListPage.fulfilled, (state, {\n      payload\n    }) => {\n      const list = [...state.garageList, ...payload.data].sort((carOne, carSecond) => carOne.id - carSecond.id);\n      state.garageList = Array.from(new Map(list.map(item => [item.id, item])).values());\n      state.count = Number(payload.headers['x-total-count']);\n      state.loading = false;\n    }).addCase(getGarageListPage.rejected, state => {\n      state.loading = false;\n    });\n  }\n});\nexport const {\n  setSelectedCar,\n  closeWinnerPopup,\n  setRace,\n  openWinnerPopup\n} = garageListReducer.actions;\nexport { generateCars, addNewCar, updateCar, deleteCar, getGarageListPage };\nexport default garageListReducer.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","getRandomCarName","getRandomColor","fetchGarageListPage","fetchNewCar","fetchDeleteCar","fetchUpdateCar","deleteWinner","updateWinner","initialState","garageList","selectedCar","undefined","loading","race","winnerPopup","count","generateCars","dispatch","index","addNewCar","name","color","carData","rejectWithValue","response","isFailed","updateCar","getState","winnersList","carInWinnersList","find","winner","id","unwrap","deleteCar","carIsWinner","some","getGarageListPage","pageNo","console","log","errorMessage","errors","message","garageListReducer","reducers","setSelectedCar","state","payload","setRace","closeWinnerPopup","openWinnerPopup","extraReducers","builder","addCase","fulfilled","meta","map","car","arg","_state$selectedCar","filter","pending","list","data","sort","carOne","carSecond","Array","from","Map","item","values","Number","headers","rejected","actions","reducer"],"sources":["C:/Users/Admin/Documents/GitHub/Async-Race/src/store/modules/garageListReducer.ts"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { getRandomCarName, getRandomColor } from 'CONSTANTS/CarData';\nimport { fetchGarageListPage, fetchNewCar, fetchDeleteCar, fetchUpdateCar } from 'CONSTANTS/Axios';\nimport type { RootState } from 'store/configureReduxStore';\nimport { deleteWinner, Winner, updateWinner } from './winnersListReducer';\n\nexport interface Car {\n   id: number;\n   name: string;\n   color: string;\n}\n\nexport interface CarData {\n   name: string;\n   color: string;\n}\n\ninterface GarageListState {\n   garageList: Car[];\n   selectedCar?: Car;\n   loading: boolean;\n   race: string;\n   winnerPopup: boolean;\n   count: number;\n}\n\nconst initialState: GarageListState = {\n   garageList: [],\n   selectedCar: undefined,\n   loading: true,\n   race: 'stopped',\n   winnerPopup: false,\n   count: 0,\n};\n\nconst generateCars = createAsyncThunk<void, number, { state: RootState; rejectValue: { isFailed: boolean } }>(\n   'garageList/generateCars',\n   async (count, { dispatch }) => {\n      for (let index = 0; index < count; index++) {\n         await dispatch(\n            addNewCar({\n               name: getRandomCarName(),\n               color: getRandomColor(),\n            })\n         );\n      }\n   }\n);\n\nconst addNewCar = createAsyncThunk<CarData, CarData, { state: RootState; rejectValue: { isFailed: boolean } }>(\n   'garageList/addNewCar',\n   async (carData, { rejectWithValue }) => {\n      const response = await fetchNewCar(carData);\n      if (response?.isFailed) return rejectWithValue({ isFailed: true });\n\n      return response;\n   }\n);\n\nconst updateCar = createAsyncThunk<Car, Car, { state: RootState; rejectValue: { isFailed: boolean } }>(\n   'list/updateCar',\n   async (carData, { rejectWithValue, dispatch, getState }) => {\n      const response = await fetchUpdateCar(carData);\n      const { winnersList } = getState().winnersList;\n      const carInWinnersList = winnersList.find((winner: Winner) => winner.id === carData.id);\n      if (response?.isFailed) return rejectWithValue({ isFailed: true });\n      if (carInWinnersList) dispatch(updateWinner({ ...carInWinnersList, ...carData })).unwrap();\n\n      return response;\n   }\n);\n\nconst deleteCar = createAsyncThunk<number, number, { state: RootState; rejectValue: { isFailed: boolean } }>(\n   'garageList/deleteCar',\n   async (id, { rejectWithValue, getState, dispatch }) => {\n      const response = await fetchDeleteCar(id);\n      const { winnersList } = getState().winnersList;\n      const carIsWinner = winnersList.some((winner: Winner) => winner.id === id);\n      if (carIsWinner) {\n         dispatch(deleteWinner(id));\n      }\n      if (response.isFailed) return rejectWithValue({ isFailed: true });\n\n      return response;\n   }\n);\n\nconst getGarageListPage = createAsyncThunk<any, number, { state: RootState; rejectValue: { isFailed: boolean; errorMessage: string } }>(\n   'garageList/getGarageList',\n   async (pageNo, { rejectWithValue }) => {\n      console.log('getGarageList');\n      const response = await fetchGarageListPage(pageNo);\n      if (response.isFailed) return rejectWithValue({ isFailed: true, errorMessage: response.errors.message });\n\n      return response;\n   }\n);\n\nconst garageListReducer = createSlice({\n   name: 'garageList',\n   initialState,\n   reducers: {\n      setSelectedCar(state, { payload }) {\n         state.selectedCar = payload;\n      },\n      setRace(state, { payload }) {\n         state.race = payload;\n      },\n      closeWinnerPopup(state) {\n         state.winnerPopup = false;\n      },\n      openWinnerPopup(state) {\n         state.winnerPopup = true;\n      },\n   },\n   extraReducers: (builder) => {\n      builder\n         // .addCase(generateCars.pending, (state ) => { state.loading = true })\n         // .addCase(generateCars.fulfilled, (state, { meta }) => { state.loading = false })\n         .addCase(addNewCar.fulfilled, (state, { meta }) => {\n            state.count += 1;\n         })\n         .addCase(updateCar.fulfilled, (state, { meta }) => {\n            state.garageList = state.garageList.map((car) => (car.id === meta.arg.id ? { ...car, ...meta.arg } : car));\n         })\n         .addCase(deleteCar.fulfilled, (state, { meta }) => {\n            state.garageList = state.garageList.filter((car) => car.id !== meta.arg);\n            state.selectedCar = state.selectedCar?.id == meta.arg ? undefined : state.selectedCar;\n            state.count -= 1;\n         })\n         .addCase(getGarageListPage.pending, (state) => {\n            state.loading = true;\n         })\n         .addCase(getGarageListPage.fulfilled, (state, { payload }) => {\n            const list = [...state.garageList, ...payload.data].sort((carOne, carSecond) => carOne.id - carSecond.id);\n            state.garageList = Array.from(new Map(list.map((item) => [item.id, item])).values());\n            state.count = Number(payload.headers['x-total-count']);\n            state.loading = false;\n         })\n         .addCase(getGarageListPage.rejected, (state) => {\n            state.loading = false;\n         });\n   },\n});\n\nexport const { setSelectedCar, closeWinnerPopup, setRace, openWinnerPopup } = garageListReducer.actions;\nexport { generateCars, addNewCar, updateCar, deleteCar, getGarageListPage };\nexport default garageListReducer.reducer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}