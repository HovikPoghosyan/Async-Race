{"ast":null,"code":"import axios from 'axios';\nconst API_BASE = 'http://localhost:3000';\nconst URLS = {\n  garage: `${API_BASE}/garage`,\n  register: `${API_BASE}/auth/register`,\n  posts: `${API_BASE}/posts`,\n  countries: `${API_BASE}/countries`,\n  models: `${API_BASE}/marks`,\n  deletPost: `${API_BASE}/posts/`\n};\nconst ajax = async (url, {\n  method = 'get',\n  headers = {},\n  data = {}\n}) => {\n  try {\n    const response = await axios({\n      url,\n      method,\n      data,\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        ...headers\n      }\n    });\n    return response.data;\n  } catch (axiosError) {\n    var _axiosError$response, _axiosError$response$, _axiosError$response2, _axiosError$response3;\n    console.error('AJAX Error:', axiosError);\n    return {\n      isFailed: true,\n      errors: {\n        message: (axiosError === null || axiosError === void 0 ? void 0 : (_axiosError$response = axiosError.response) === null || _axiosError$response === void 0 ? void 0 : (_axiosError$response$ = _axiosError$response.data) === null || _axiosError$response$ === void 0 ? void 0 : _axiosError$response$.message) || axiosError.message || 'Unknown Error',\n        list: axiosError !== null && axiosError !== void 0 && (_axiosError$response2 = axiosError.response) !== null && _axiosError$response2 !== void 0 && (_axiosError$response3 = _axiosError$response2.data) !== null && _axiosError$response3 !== void 0 && _axiosError$response3.errors ? {\n          ...axiosError.response.data.errors\n        } : null\n      }\n    };\n  }\n};\nconst fetchGarageList = async () => {\n  const data = await ajax(URLS.garage, {\n    method: 'GET',\n    headers: {},\n    data: {}\n  });\n  console.log('garaje list response: ', data);\n  return data;\n};\nexport { fetchGarageList\n// fetchWinnersList,\n};\nexport default ajax;","map":{"version":3,"names":["axios","API_BASE","URLS","garage","register","posts","countries","models","deletPost","ajax","url","method","headers","data","response","axiosError","_axiosError$response","_axiosError$response$","_axiosError$response2","_axiosError$response3","console","error","isFailed","errors","message","list","fetchGarageList","log"],"sources":["C:/Users/Admin/Documents/GitHub/Async-Race/src/CONSTANTS/Axios.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_BASE = 'http://localhost:3000';\r\nconst URLS = {\r\n   garage: `${API_BASE}/garage`,\r\n   register: `${API_BASE}/auth/register`,\r\n   posts: `${API_BASE}/posts`,\r\n   countries: `${API_BASE}/countries`,\r\n   models: `${API_BASE}/marks`,\r\n   deletPost: `${API_BASE}/posts/`,\r\n};\r\n\r\nconst ajax = async ( url, { method = 'get', headers = {}, data = {} } ) => {\r\n   try {\r\n      const response = await axios({\r\n         url,\r\n         method,\r\n         data,\r\n         headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json',\r\n            ...headers,\r\n         },\r\n      });\r\n      return response.data;\r\n   } catch ( axiosError ) {\r\n      console.error('AJAX Error:', axiosError );\r\n      return {\r\n         isFailed: true,\r\n         errors: {\r\n            message: axiosError?.response?.data?.message || axiosError.message || 'Unknown Error',\r\n            list: axiosError?.response?.data?.errors ? { ...axiosError.response.data.errors } : null,\r\n         },\r\n      };\r\n   }\r\n};\r\n\r\nconst fetchGarageList = async() => {\r\n\r\n   const data = await ajax( URLS.garage, {\r\n      method: 'GET',\r\n      headers: { },\r\n      data: { }\r\n   } );\r\n\r\n   console.log('garaje list response: ', data);\r\n   return data;\r\n};\r\n\r\nexport {\r\n   fetchGarageList,\r\n   // fetchWinnersList,\r\n};\r\nexport default ajax;\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,QAAQ,GAAG,uBAAuB;AACxC,MAAMC,IAAI,GAAG;EACVC,MAAM,EAAE,GAAGF,QAAQ,SAAS;EAC5BG,QAAQ,EAAE,GAAGH,QAAQ,gBAAgB;EACrCI,KAAK,EAAE,GAAGJ,QAAQ,QAAQ;EAC1BK,SAAS,EAAE,GAAGL,QAAQ,YAAY;EAClCM,MAAM,EAAE,GAAGN,QAAQ,QAAQ;EAC3BO,SAAS,EAAE,GAAGP,QAAQ;AACzB,CAAC;AAED,MAAMQ,IAAI,GAAG,MAAAA,CAAQC,GAAG,EAAE;EAAEC,MAAM,GAAG,KAAK;EAAEC,OAAO,GAAG,CAAC,CAAC;EAAEC,IAAI,GAAG,CAAC;AAAE,CAAC,KAAM;EACxE,IAAI;IACD,MAAMC,QAAQ,GAAG,MAAMd,KAAK,CAAC;MAC1BU,GAAG;MACHC,MAAM;MACNE,IAAI;MACJD,OAAO,EAAE;QACN,QAAQ,EAAE,kBAAkB;QAC5B,cAAc,EAAE,kBAAkB;QAClC,GAAGA;MACN;IACH,CAAC,CAAC;IACF,OAAOE,QAAQ,CAACD,IAAI;EACvB,CAAC,CAAC,OAAQE,UAAU,EAAG;IAAA,IAAAC,oBAAA,EAAAC,qBAAA,EAAAC,qBAAA,EAAAC,qBAAA;IACpBC,OAAO,CAACC,KAAK,CAAC,aAAa,EAAEN,UAAW,CAAC;IACzC,OAAO;MACJO,QAAQ,EAAE,IAAI;MACdC,MAAM,EAAE;QACLC,OAAO,EAAE,CAAAT,UAAU,aAAVA,UAAU,wBAAAC,oBAAA,GAAVD,UAAU,CAAED,QAAQ,cAAAE,oBAAA,wBAAAC,qBAAA,GAApBD,oBAAA,CAAsBH,IAAI,cAAAI,qBAAA,uBAA1BA,qBAAA,CAA4BO,OAAO,KAAIT,UAAU,CAACS,OAAO,IAAI,eAAe;QACrFC,IAAI,EAAEV,UAAU,aAAVA,UAAU,gBAAAG,qBAAA,GAAVH,UAAU,CAAED,QAAQ,cAAAI,qBAAA,gBAAAC,qBAAA,GAApBD,qBAAA,CAAsBL,IAAI,cAAAM,qBAAA,eAA1BA,qBAAA,CAA4BI,MAAM,GAAG;UAAE,GAAGR,UAAU,CAACD,QAAQ,CAACD,IAAI,CAACU;QAAO,CAAC,GAAG;MACvF;IACH,CAAC;EACJ;AACH,CAAC;AAED,MAAMG,eAAe,GAAG,MAAAA,CAAA,KAAW;EAEhC,MAAMb,IAAI,GAAG,MAAMJ,IAAI,CAAEP,IAAI,CAACC,MAAM,EAAE;IACnCQ,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE,CAAE,CAAC;IACZC,IAAI,EAAE,CAAE;EACX,CAAE,CAAC;EAEHO,OAAO,CAACO,GAAG,CAAC,wBAAwB,EAAEd,IAAI,CAAC;EAC3C,OAAOA,IAAI;AACd,CAAC;AAED,SACGa;AACA;AAAA;AAEH,eAAejB,IAAI","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}