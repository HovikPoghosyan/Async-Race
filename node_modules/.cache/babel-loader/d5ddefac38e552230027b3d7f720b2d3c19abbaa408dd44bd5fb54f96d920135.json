{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { fetchGarageList, fetchWinnersList } from 'CONSTANTS/Axios';\nconst getGarageAndWinnersLists = createAsyncThunk('list/getGarageAndWinners', async (props, {\n  rejectWithValue\n}) => {\n  const garageData = await fetchGarageList();\n  if (garageData.isFailed) return rejectWithValue();\n  const winnersData = await fetchWinnersList();\n  if (winnersData.isFailed) return rejectWithValue();\n  const enrichedWinners = winnersData.map(winner => {\n    var _car$name, _car$color;\n    const car = garageData.find(current => current.id === winner.id);\n    return {\n      ...winner,\n      name: (_car$name = car === null || car === void 0 ? void 0 : car.name) !== null && _car$name !== void 0 ? _car$name : 'Unknown',\n      color: (_car$color = car === null || car === void 0 ? void 0 : car.color) !== null && _car$color !== void 0 ? _car$color : '#000'\n    };\n  });\n  return {\n    garageList: garageData,\n    winnersList: enrichedWinners\n  };\n});\nconst initialState = {\n  garageList: [],\n  winnersList: [],\n  loading: false\n};\nconst appSlice = createSlice({\n  name: 'list',\n  initialState,\n  reducers: {\n    setGarageList(state, {\n      payload\n    }) {\n      state.garageList = payload;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(getGarageAndWinnersLists.pending, state => {\n      state.loading = true;\n    }).addCase(getGarageAndWinnersLists.fulfilled, (state, {\n      payload\n    }) => {\n      state.garageList = payload.garageList;\n      state.winnersList = payload.winnersList;\n      state.loading = false;\n    }).addCase(getGarageAndWinnersLists.rejected, state => {\n      state.loading = false;\n    });\n  }\n});\nexport const {} = appSlice.actions;\nexport { getGarageAndWinnersLists };\nexport default appSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","fetchGarageList","fetchWinnersList","getGarageAndWinnersLists","props","rejectWithValue","garageData","isFailed","winnersData","enrichedWinners","map","winner","_car$name","_car$color","car","find","current","id","name","color","garageList","winnersList","initialState","loading","appSlice","reducers","setGarageList","state","payload","extraReducers","builder","addCase","pending","fulfilled","rejected","actions","reducer"],"sources":["C:/Users/Admin/Documents/GitHub/Async-Race/src/store/modules/listReducer.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n\nimport { fetchGarageList, fetchWinnersList } from 'CONSTANTS/Axios';\n\nconst getGarageAndWinnersLists = createAsyncThunk(\n   'list/getGarageAndWinners',\n   async ( props, { rejectWithValue }) => {\n      const garageData = await fetchGarageList()\n      if ( garageData.isFailed ) return rejectWithValue()\n\n      const winnersData = await fetchWinnersList()\n      if (winnersData.isFailed) return rejectWithValue()\n\n      const enrichedWinners = winnersData.map(winner => {\n         const car = garageData.find(current => current.id === winner.id)\n         return {\n         ...winner,\n         name: car?.name ?? 'Unknown',\n         color: car?.color ?? '#000',\n         }\n      })\n\n      return {\n         garageList: garageData,\n         winnersList: enrichedWinners,\n      }\n   }\n)\n\n\nconst initialState = {\n   garageList: [],\n   winnersList: [],\n   loading: false,\n};\n\nconst appSlice = createSlice({\n   name: 'list',\n   initialState,\n   reducers: {\n      setGarageList( state, { payload } ) {\n         state.garageList = payload;\n      },\n   },\n   extraReducers: ( builder ) => {\n      builder\n      .addCase( getGarageAndWinnersLists.pending, ( state ) => {\n         state.loading = true;\n      })\n      .addCase( getGarageAndWinnersLists.fulfilled, ( state, { payload } ) => {\n         state.garageList = payload.garageList;\n         state.winnersList = payload.winnersList;\n         state.loading = false;\n      })\n      .addCase( getGarageAndWinnersLists.rejected, ( state ) => {\n         state.loading = false;\n      })\n   }\n});\n\nexport const { \n} = appSlice.actions;\nexport { \n   getGarageAndWinnersLists,\n};\nexport default appSlice.reducer;"],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAEhE,SAASC,eAAe,EAAEC,gBAAgB,QAAQ,iBAAiB;AAEnE,MAAMC,wBAAwB,GAAGH,gBAAgB,CAC9C,0BAA0B,EAC1B,OAAQI,KAAK,EAAE;EAAEC;AAAgB,CAAC,KAAK;EACpC,MAAMC,UAAU,GAAG,MAAML,eAAe,CAAC,CAAC;EAC1C,IAAKK,UAAU,CAACC,QAAQ,EAAG,OAAOF,eAAe,CAAC,CAAC;EAEnD,MAAMG,WAAW,GAAG,MAAMN,gBAAgB,CAAC,CAAC;EAC5C,IAAIM,WAAW,CAACD,QAAQ,EAAE,OAAOF,eAAe,CAAC,CAAC;EAElD,MAAMI,eAAe,GAAGD,WAAW,CAACE,GAAG,CAACC,MAAM,IAAI;IAAA,IAAAC,SAAA,EAAAC,UAAA;IAC/C,MAAMC,GAAG,GAAGR,UAAU,CAACS,IAAI,CAACC,OAAO,IAAIA,OAAO,CAACC,EAAE,KAAKN,MAAM,CAACM,EAAE,CAAC;IAChE,OAAO;MACP,GAAGN,MAAM;MACTO,IAAI,GAAAN,SAAA,GAAEE,GAAG,aAAHA,GAAG,uBAAHA,GAAG,CAAEI,IAAI,cAAAN,SAAA,cAAAA,SAAA,GAAI,SAAS;MAC5BO,KAAK,GAAAN,UAAA,GAAEC,GAAG,aAAHA,GAAG,uBAAHA,GAAG,CAAEK,KAAK,cAAAN,UAAA,cAAAA,UAAA,GAAI;IACrB,CAAC;EACJ,CAAC,CAAC;EAEF,OAAO;IACJO,UAAU,EAAEd,UAAU;IACtBe,WAAW,EAAEZ;EAChB,CAAC;AACJ,CACH,CAAC;AAGD,MAAMa,YAAY,GAAG;EAClBF,UAAU,EAAE,EAAE;EACdC,WAAW,EAAE,EAAE;EACfE,OAAO,EAAE;AACZ,CAAC;AAED,MAAMC,QAAQ,GAAGzB,WAAW,CAAC;EAC1BmB,IAAI,EAAE,MAAM;EACZI,YAAY;EACZG,QAAQ,EAAE;IACPC,aAAaA,CAAEC,KAAK,EAAE;MAAEC;IAAQ,CAAC,EAAG;MACjCD,KAAK,CAACP,UAAU,GAAGQ,OAAO;IAC7B;EACH,CAAC;EACDC,aAAa,EAAIC,OAAO,IAAM;IAC3BA,OAAO,CACNC,OAAO,CAAE5B,wBAAwB,CAAC6B,OAAO,EAAIL,KAAK,IAAM;MACtDA,KAAK,CAACJ,OAAO,GAAG,IAAI;IACvB,CAAC,CAAC,CACDQ,OAAO,CAAE5B,wBAAwB,CAAC8B,SAAS,EAAE,CAAEN,KAAK,EAAE;MAAEC;IAAQ,CAAC,KAAM;MACrED,KAAK,CAACP,UAAU,GAAGQ,OAAO,CAACR,UAAU;MACrCO,KAAK,CAACN,WAAW,GAAGO,OAAO,CAACP,WAAW;MACvCM,KAAK,CAACJ,OAAO,GAAG,KAAK;IACxB,CAAC,CAAC,CACDQ,OAAO,CAAE5B,wBAAwB,CAAC+B,QAAQ,EAAIP,KAAK,IAAM;MACvDA,KAAK,CAACJ,OAAO,GAAG,KAAK;IACxB,CAAC,CAAC;EACL;AACH,CAAC,CAAC;AAEF,OAAO,MAAM,CACb,CAAC,GAAGC,QAAQ,CAACW,OAAO;AACpB,SACGhC,wBAAwB;AAE3B,eAAeqB,QAAQ,CAACY,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}